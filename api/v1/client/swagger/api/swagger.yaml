openapi: 3.0.0
info:
  title: API v1
  description: "# Introduction\nWelcome to the documentation for Hatchet's API. \n"
  termsOfService: https://docs.hatchet.run/terms-and-privacy/terms-of-service/
  contact:
    name: Hatchet Support
    email: support@hatchet.run
  version: 1.0.0
servers:
- url: http://localhost:8080
security:
- Bearer: []
tags:
- name: Users
  description: "Users are Hatchet users. \n"
paths:
  /api/v1/github_app/{github_app_installation_id}/repos:
    get:
      tags:
      - Github Apps
      summary: List Github Repos
      description: Lists the Github repos that the github app installation has access
        to.
      operationId: listGithubRepos
      parameters:
      - name: github_app_installation_id
        in: path
        description: The github app installation id
        required: true
        style: simple
        explode: false
        schema:
          type: string
          x-go-name: GithubAppInstallation
        x-go-name: GithubAppInstallation
      responses:
        "200":
          description: Successfully listed Github repositories
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListGithubReposResponse'
        "400":
          description: A malformed or bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorBadRequestExample'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorForbiddenExample'
      x-codeSamples:
      - lang: Shell
        source: |-
          curl --request GET \
            --url http://localhost:8080/api/v1/github_app/322346f9-54b4-497d-bc9a-c54b5aaa4400/repos \
            --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'
      - lang: Node
        source: |-
          const fetch = require('node-fetch');

          let url = 'http://localhost:8080/api/v1/github_app/322346f9-54b4-497d-bc9a-c54b5aaa4400/repos';

          let options = {method: 'GET', headers: {Authorization: 'Bearer REPLACE_BEARER_TOKEN'}};

          fetch(url, options)
            .then(res => res.json())
            .then(json => console.log(json))
            .catch(err => console.error('error:' + err));
      - lang: Ruby
        source: |-
          require 'uri'
          require 'net/http'

          url = URI("http://localhost:8080/api/v1/github_app/322346f9-54b4-497d-bc9a-c54b5aaa4400/repos")

          http = Net::HTTP.new(url.host, url.port)

          request = Net::HTTP::Get.new(url)
          request["Authorization"] = 'Bearer REPLACE_BEARER_TOKEN'

          response = http.request(request)
          puts response.read_body
      - lang: Python
        source: |-
          import requests

          url = "http://localhost:8080/api/v1/github_app/322346f9-54b4-497d-bc9a-c54b5aaa4400/repos"

          headers = {"Authorization": "Bearer REPLACE_BEARER_TOKEN"}

          response = requests.request("GET", url, headers=headers)

          print(response.text)
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\
          \n)\n\nfunc main() {\n\n\turl := \"http://localhost:8080/api/v1/github_app/322346f9-54b4-497d-bc9a-c54b5aaa4400/repos\"\
          \n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"\
          Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
  /api/v1/github_app/{github_app_installation_id}/repos/{github_repo_owner}/{github_repo_name}/branches:
    get:
      tags:
      - Github Apps
      summary: List Github Branches
      description: Lists the Github repo branches.
      operationId: listGithubRepoBranches
      responses:
        "200":
          description: Successfully listed Github repo branches
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListGithubRepoBranchesResponse'
        "400":
          description: A malformed or bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorBadRequestExample'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorForbiddenExample'
      x-codeSamples:
      - lang: Shell
        source: |-
          curl --request GET \
            --url http://localhost:8080/api/v1/github_app/{github_app_installation_id}/repos/{github_repo_owner}/{github_repo_name}/branches \
            --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'
      - lang: Node
        source: |-
          const fetch = require('node-fetch');

          let url = 'http://localhost:8080/api/v1/github_app/{github_app_installation_id}/repos/{github_repo_owner}/{github_repo_name}/branches';

          let options = {method: 'GET', headers: {Authorization: 'Bearer REPLACE_BEARER_TOKEN'}};

          fetch(url, options)
            .then(res => res.json())
            .then(json => console.log(json))
            .catch(err => console.error('error:' + err));
      - lang: Ruby
        source: |-
          require 'uri'
          require 'net/http'

          url = URI("http://localhost:8080/api/v1/github_app/{github_app_installation_id}/repos/{github_repo_owner}/{github_repo_name}/branches")

          http = Net::HTTP.new(url.host, url.port)

          request = Net::HTTP::Get.new(url)
          request["Authorization"] = 'Bearer REPLACE_BEARER_TOKEN'

          response = http.request(request)
          puts response.read_body
      - lang: Python
        source: |-
          import requests

          url = "http://localhost:8080/api/v1/github_app/{github_app_installation_id}/repos/{github_repo_owner}/{github_repo_name}/branches"

          headers = {"Authorization": "Bearer REPLACE_BEARER_TOKEN"}

          response = requests.request("GET", url, headers=headers)

          print(response.text)
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\
          \n)\n\nfunc main() {\n\n\turl := \"http://localhost:8080/api/v1/github_app/{github_app_installation_id}/repos/{github_repo_owner}/{github_repo_name}/branches\"\
          \n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"\
          Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
  /api/v1/github_app/install:
    get:
      tags:
      - Github Apps
      summary: Install Github App
      description: Redirects the user to Github to install the Github App.
      operationId: installGithubApp
      responses:
        "302":
          description: Successfully redirected to Github app installation
          content: {}
        "400":
          description: A malformed or bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorBadRequestExample'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorForbiddenExample'
        "405":
          description: This endpoint is not supported on this Hatchet instance.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorNotSupportedExample'
      x-codeSamples:
      - lang: Shell
        source: |-
          curl --request GET \
            --url http://localhost:8080/api/v1/github_app/install \
            --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'
      - lang: Node
        source: |-
          const fetch = require('node-fetch');

          let url = 'http://localhost:8080/api/v1/github_app/install';

          let options = {method: 'GET', headers: {Authorization: 'Bearer REPLACE_BEARER_TOKEN'}};

          fetch(url, options)
            .then(res => res.json())
            .then(json => console.log(json))
            .catch(err => console.error('error:' + err));
      - lang: Ruby
        source: |-
          require 'uri'
          require 'net/http'

          url = URI("http://localhost:8080/api/v1/github_app/install")

          http = Net::HTTP.new(url.host, url.port)

          request = Net::HTTP::Get.new(url)
          request["Authorization"] = 'Bearer REPLACE_BEARER_TOKEN'

          response = http.request(request)
          puts response.read_body
      - lang: Python
        source: |-
          import requests

          url = "http://localhost:8080/api/v1/github_app/install"

          headers = {"Authorization": "Bearer REPLACE_BEARER_TOKEN"}

          response = requests.request("GET", url, headers=headers)

          print(response.text)
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\
          \n)\n\nfunc main() {\n\n\turl := \"http://localhost:8080/api/v1/github_app/install\"\
          \n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"\
          Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
  /api/v1/invites/{org_member_invite_id}/{org_member_invite_tok}:
    post:
      tags:
      - Organizations
      summary: Accept an organization invite.
      description: Accept an invite for an organization.
      operationId: acceptOrgMemberInvite
      parameters:
      - name: org_member_invite_id
        in: path
        description: The member invite id
        required: true
        style: simple
        explode: false
        schema:
          type: string
          x-go-name: OrgMemberInviteID
        x-go-name: OrgMemberInviteID
      - name: org_member_invite_tok
        in: path
        description: The member invite token (sensitive)
        required: true
        style: simple
        explode: false
        schema:
          type: string
          x-go-name: OrgMemberInviteTok
        x-go-name: OrgMemberInviteTok
      responses:
        "200":
          description: Successfully accepted the invite.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmptyResponse'
        "400":
          description: A malformed or bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorBadRequestExample'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorForbiddenExample'
        "405":
          description: This endpoint is not supported on this Hatchet instance.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorNotSupportedExample'
      x-codeSamples:
      - lang: Shell
        source: |-
          curl --request POST \
            --url http://localhost:8080/api/v1/invites/322346f9-54b4-497d-bc9a-c54b5aaa4400/abcdefgh... \
            --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'
      - lang: Node
        source: |-
          const fetch = require('node-fetch');

          let url = 'http://localhost:8080/api/v1/invites/322346f9-54b4-497d-bc9a-c54b5aaa4400/abcdefgh...';

          let options = {method: 'POST', headers: {Authorization: 'Bearer REPLACE_BEARER_TOKEN'}};

          fetch(url, options)
            .then(res => res.json())
            .then(json => console.log(json))
            .catch(err => console.error('error:' + err));
      - lang: Ruby
        source: |-
          require 'uri'
          require 'net/http'

          url = URI("http://localhost:8080/api/v1/invites/322346f9-54b4-497d-bc9a-c54b5aaa4400/abcdefgh...")

          http = Net::HTTP.new(url.host, url.port)

          request = Net::HTTP::Post.new(url)
          request["Authorization"] = 'Bearer REPLACE_BEARER_TOKEN'

          response = http.request(request)
          puts response.read_body
      - lang: Python
        source: |-
          import requests

          url = "http://localhost:8080/api/v1/invites/322346f9-54b4-497d-bc9a-c54b5aaa4400/abcdefgh..."

          headers = {"Authorization": "Bearer REPLACE_BEARER_TOKEN"}

          response = requests.request("POST", url, headers=headers)

          print(response.text)
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\
          \n)\n\nfunc main() {\n\n\turl := \"http://localhost:8080/api/v1/invites/322346f9-54b4-497d-bc9a-c54b5aaa4400/abcdefgh...\"\
          \n\n\treq, _ := http.NewRequest(\"POST\", url, nil)\n\n\treq.Header.Add(\"\
          Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
  /api/v1/metadata:
    get:
      tags:
      - Metadata
      summary: Get server metadata
      description: Gets the metadata for the Hatchet instance.
      operationId: getServerMetadata
      responses:
        "200":
          description: Successfully got the metadata
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIServerMetadata'
      x-codeSamples:
      - lang: Shell
        source: |-
          curl --request GET \
            --url http://localhost:8080/api/v1/metadata \
            --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'
      - lang: Node
        source: |-
          const fetch = require('node-fetch');

          let url = 'http://localhost:8080/api/v1/metadata';

          let options = {method: 'GET', headers: {Authorization: 'Bearer REPLACE_BEARER_TOKEN'}};

          fetch(url, options)
            .then(res => res.json())
            .then(json => console.log(json))
            .catch(err => console.error('error:' + err));
      - lang: Ruby
        source: |-
          require 'uri'
          require 'net/http'

          url = URI("http://localhost:8080/api/v1/metadata")

          http = Net::HTTP.new(url.host, url.port)

          request = Net::HTTP::Get.new(url)
          request["Authorization"] = 'Bearer REPLACE_BEARER_TOKEN'

          response = http.request(request)
          puts response.read_body
      - lang: Python
        source: |-
          import requests

          url = "http://localhost:8080/api/v1/metadata"

          headers = {"Authorization": "Bearer REPLACE_BEARER_TOKEN"}

          response = requests.request("GET", url, headers=headers)

          print(response.text)
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\
          \n)\n\nfunc main() {\n\n\turl := \"http://localhost:8080/api/v1/metadata\"\
          \n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"\
          Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
  /api/v1/oauth/github_app:
    get:
      tags:
      - Github Apps
      summary: Start Github App OAuth
      description: Starts the OAuth flow to authenticate with a Github App.
      operationId: startGithubAppOAuth
      responses:
        "302":
          description: Successfully triggered Github App oauth
          content: {}
        "400":
          description: A malformed or bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorBadRequestExample'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorForbiddenExample'
        "405":
          description: This endpoint is not supported on this Hatchet instance.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorNotSupportedExample'
      x-codeSamples:
      - lang: Shell
        source: |-
          curl --request GET \
            --url http://localhost:8080/api/v1/oauth/github_app \
            --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'
      - lang: Node
        source: |-
          const fetch = require('node-fetch');

          let url = 'http://localhost:8080/api/v1/oauth/github_app';

          let options = {method: 'GET', headers: {Authorization: 'Bearer REPLACE_BEARER_TOKEN'}};

          fetch(url, options)
            .then(res => res.json())
            .then(json => console.log(json))
            .catch(err => console.error('error:' + err));
      - lang: Ruby
        source: |-
          require 'uri'
          require 'net/http'

          url = URI("http://localhost:8080/api/v1/oauth/github_app")

          http = Net::HTTP.new(url.host, url.port)

          request = Net::HTTP::Get.new(url)
          request["Authorization"] = 'Bearer REPLACE_BEARER_TOKEN'

          response = http.request(request)
          puts response.read_body
      - lang: Python
        source: |-
          import requests

          url = "http://localhost:8080/api/v1/oauth/github_app"

          headers = {"Authorization": "Bearer REPLACE_BEARER_TOKEN"}

          response = requests.request("GET", url, headers=headers)

          print(response.text)
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\
          \n)\n\nfunc main() {\n\n\turl := \"http://localhost:8080/api/v1/oauth/github_app\"\
          \n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"\
          Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
  /api/v1/oauth/github_app/callback:
    get:
      tags:
      - Github Apps
      summary: Start Github App OAuth
      description: Finishes the OAuth flow to authenticate with a Github App.
      operationId: finishGithubAppOAuth
      responses:
        "302":
          description: Successfully authenticated OR error state
          content: {}
        "400":
          description: A malformed or bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorBadRequestExample'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorForbiddenExample'
        "405":
          description: This endpoint is not supported on this Hatchet instance.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorNotSupportedExample'
      x-codeSamples:
      - lang: Shell
        source: |-
          curl --request GET \
            --url http://localhost:8080/api/v1/oauth/github_app/callback \
            --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'
      - lang: Node
        source: |-
          const fetch = require('node-fetch');

          let url = 'http://localhost:8080/api/v1/oauth/github_app/callback';

          let options = {method: 'GET', headers: {Authorization: 'Bearer REPLACE_BEARER_TOKEN'}};

          fetch(url, options)
            .then(res => res.json())
            .then(json => console.log(json))
            .catch(err => console.error('error:' + err));
      - lang: Ruby
        source: |-
          require 'uri'
          require 'net/http'

          url = URI("http://localhost:8080/api/v1/oauth/github_app/callback")

          http = Net::HTTP.new(url.host, url.port)

          request = Net::HTTP::Get.new(url)
          request["Authorization"] = 'Bearer REPLACE_BEARER_TOKEN'

          response = http.request(request)
          puts response.read_body
      - lang: Python
        source: |-
          import requests

          url = "http://localhost:8080/api/v1/oauth/github_app/callback"

          headers = {"Authorization": "Bearer REPLACE_BEARER_TOKEN"}

          response = requests.request("GET", url, headers=headers)

          print(response.text)
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\
          \n)\n\nfunc main() {\n\n\turl := \"http://localhost:8080/api/v1/oauth/github_app/callback\"\
          \n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"\
          Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
  /api/v1/organizations:
    post:
      tags:
      - Organizations
      summary: Create a new organization
      description: "Creates a new organization, with the authenticated user set as\
        \ the organization owner."
      operationId: createOrganization
      requestBody:
        description: The organization to create
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/createOrganization_request'
        required: false
      responses:
        "201":
          description: Successfully created the organization
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateOrganizationResponse'
        "400":
          description: A malformed or bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorBadRequestExample'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorForbiddenExample'
        "405":
          description: This endpoint is not supported on this Hatchet instance.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorNotSupportedExample'
      x-codeSamples:
      - lang: Shell
        source: |-
          curl --request POST \
            --url http://localhost:8080/api/v1/organizations \
            --header 'Authorization: Bearer REPLACE_BEARER_TOKEN' \
            --header 'content-type: application/json' \
            --data '{"display_name":"Organization 1"}'
      - lang: Node
        source: |-
          const fetch = require('node-fetch');

          let url = 'http://localhost:8080/api/v1/organizations';

          let options = {
            method: 'POST',
            headers: {
              Authorization: 'Bearer REPLACE_BEARER_TOKEN',
              'content-type': 'application/json'
            },
            body: '{"display_name":"Organization 1"}'
          };

          fetch(url, options)
            .then(res => res.json())
            .then(json => console.log(json))
            .catch(err => console.error('error:' + err));
      - lang: Ruby
        source: |-
          require 'uri'
          require 'net/http'

          url = URI("http://localhost:8080/api/v1/organizations")

          http = Net::HTTP.new(url.host, url.port)

          request = Net::HTTP::Post.new(url)
          request["Authorization"] = 'Bearer REPLACE_BEARER_TOKEN'
          request["content-type"] = 'application/json'
          request.body = "{\"display_name\":\"Organization 1\"}"

          response = http.request(request)
          puts response.read_body
      - lang: Python
        source: |-
          import requests

          url = "http://localhost:8080/api/v1/organizations"

          payload = {"display_name": "Organization 1"}
          headers = {
              "Authorization": "Bearer REPLACE_BEARER_TOKEN",
              "content-type": "application/json"
          }

          response = requests.request("POST", url, json=payload, headers=headers)

          print(response.text)
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\
          \n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"http://localhost:8080/api/v1/organizations\"\
          \n\n\tpayload := strings.NewReader(\"{\\\"display_name\\\":\\\"Organization\
          \ 1\\\"}\")\n\n\treq, _ := http.NewRequest(\"POST\", url, payload)\n\n\t\
          req.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\treq.Header.Add(\"\
          content-type\", \"application/json\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
      x-codegen-request-body-name: CreateOrganizationRequest
  /api/v1/organizations/{org_id}:
    get:
      tags:
      - Organizations
      summary: Get an organization
      description: Retrieves an organization by the `org_id`.
      operationId: getOrganization
      parameters:
      - name: org_id
        in: path
        description: The org id
        required: true
        style: simple
        explode: false
        schema:
          type: string
          x-go-name: Org
        x-go-name: Org
      responses:
        "200":
          description: Successfully got the organization
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetOrganizationResponse'
        "400":
          description: A malformed or bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorBadRequestExample'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorForbiddenExample'
        "405":
          description: This endpoint is not supported on this Hatchet instance.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorNotSupportedExample'
      x-codeSamples:
      - lang: Shell
        source: |-
          curl --request GET \
            --url http://localhost:8080/api/v1/organizations/322346f9-54b4-497d-bc9a-c54b5aaa4400 \
            --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'
      - lang: Node
        source: |-
          const fetch = require('node-fetch');

          let url = 'http://localhost:8080/api/v1/organizations/322346f9-54b4-497d-bc9a-c54b5aaa4400';

          let options = {method: 'GET', headers: {Authorization: 'Bearer REPLACE_BEARER_TOKEN'}};

          fetch(url, options)
            .then(res => res.json())
            .then(json => console.log(json))
            .catch(err => console.error('error:' + err));
      - lang: Ruby
        source: |-
          require 'uri'
          require 'net/http'

          url = URI("http://localhost:8080/api/v1/organizations/322346f9-54b4-497d-bc9a-c54b5aaa4400")

          http = Net::HTTP.new(url.host, url.port)

          request = Net::HTTP::Get.new(url)
          request["Authorization"] = 'Bearer REPLACE_BEARER_TOKEN'

          response = http.request(request)
          puts response.read_body
      - lang: Python
        source: |-
          import requests

          url = "http://localhost:8080/api/v1/organizations/322346f9-54b4-497d-bc9a-c54b5aaa4400"

          headers = {"Authorization": "Bearer REPLACE_BEARER_TOKEN"}

          response = requests.request("GET", url, headers=headers)

          print(response.text)
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\
          \n)\n\nfunc main() {\n\n\turl := \"http://localhost:8080/api/v1/organizations/322346f9-54b4-497d-bc9a-c54b5aaa4400\"\
          \n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"\
          Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
    post:
      tags:
      - Organizations
      summary: Update an organization
      description: Updates organization metadata.
      operationId: updateOrganization
      parameters:
      - name: org_id
        in: path
        description: The org id
        required: true
        style: simple
        explode: false
        schema:
          type: string
          x-go-name: Org
        x-go-name: Org
      requestBody:
        description: The values to update
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/updateOrganization_request'
        required: false
      responses:
        "200":
          description: Successfully updated the organization
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateOrgResponse'
        "400":
          description: A malformed or bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorBadRequestExample'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorForbiddenExample'
      x-codeSamples:
      - lang: Shell
        source: |-
          curl --request POST \
            --url http://localhost:8080/api/v1/organizations/322346f9-54b4-497d-bc9a-c54b5aaa4400 \
            --header 'Authorization: Bearer REPLACE_BEARER_TOKEN' \
            --header 'content-type: application/json' \
            --data '{"display_name":"User 1"}'
      - lang: Node
        source: |-
          const fetch = require('node-fetch');

          let url = 'http://localhost:8080/api/v1/organizations/322346f9-54b4-497d-bc9a-c54b5aaa4400';

          let options = {
            method: 'POST',
            headers: {
              Authorization: 'Bearer REPLACE_BEARER_TOKEN',
              'content-type': 'application/json'
            },
            body: '{"display_name":"User 1"}'
          };

          fetch(url, options)
            .then(res => res.json())
            .then(json => console.log(json))
            .catch(err => console.error('error:' + err));
      - lang: Ruby
        source: |-
          require 'uri'
          require 'net/http'

          url = URI("http://localhost:8080/api/v1/organizations/322346f9-54b4-497d-bc9a-c54b5aaa4400")

          http = Net::HTTP.new(url.host, url.port)

          request = Net::HTTP::Post.new(url)
          request["Authorization"] = 'Bearer REPLACE_BEARER_TOKEN'
          request["content-type"] = 'application/json'
          request.body = "{\"display_name\":\"User 1\"}"

          response = http.request(request)
          puts response.read_body
      - lang: Python
        source: |-
          import requests

          url = "http://localhost:8080/api/v1/organizations/322346f9-54b4-497d-bc9a-c54b5aaa4400"

          payload = {"display_name": "User 1"}
          headers = {
              "Authorization": "Bearer REPLACE_BEARER_TOKEN",
              "content-type": "application/json"
          }

          response = requests.request("POST", url, json=payload, headers=headers)

          print(response.text)
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\
          \n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"http://localhost:8080/api/v1/organizations/322346f9-54b4-497d-bc9a-c54b5aaa4400\"\
          \n\n\tpayload := strings.NewReader(\"{\\\"display_name\\\":\\\"User 1\\\"\
          }\")\n\n\treq, _ := http.NewRequest(\"POST\", url, payload)\n\n\treq.Header.Add(\"\
          Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\treq.Header.Add(\"content-type\"\
          , \"application/json\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\t\
          defer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\
          \tfmt.Println(string(body))\n\n}"
      x-codegen-request-body-name: UpdateOrgRequest
    delete:
      tags:
      - Organizations
      summary: Delete organization.
      description: Delete an organization. Only owners can delete organizations.
      operationId: deleteOrg
      responses:
        "200":
          description: Successfully triggered organization deletion.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteOrganizationResponse'
        "400":
          description: A malformed or bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorBadRequestExample'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorForbiddenExample'
      x-codeSamples:
      - lang: Shell
        source: |-
          curl --request DELETE \
            --url http://localhost:8080/api/v1/organizations/{org_id} \
            --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'
      - lang: Node
        source: |-
          const fetch = require('node-fetch');

          let url = 'http://localhost:8080/api/v1/organizations/{org_id}';

          let options = {method: 'DELETE', headers: {Authorization: 'Bearer REPLACE_BEARER_TOKEN'}};

          fetch(url, options)
            .then(res => res.json())
            .then(json => console.log(json))
            .catch(err => console.error('error:' + err));
      - lang: Ruby
        source: |-
          require 'uri'
          require 'net/http'

          url = URI("http://localhost:8080/api/v1/organizations/{org_id}")

          http = Net::HTTP.new(url.host, url.port)

          request = Net::HTTP::Delete.new(url)
          request["Authorization"] = 'Bearer REPLACE_BEARER_TOKEN'

          response = http.request(request)
          puts response.read_body
      - lang: Python
        source: |-
          import requests

          url = "http://localhost:8080/api/v1/organizations/{org_id}"

          headers = {"Authorization": "Bearer REPLACE_BEARER_TOKEN"}

          response = requests.request("DELETE", url, headers=headers)

          print(response.text)
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\
          \n)\n\nfunc main() {\n\n\turl := \"http://localhost:8080/api/v1/organizations/{org_id}\"\
          \n\n\treq, _ := http.NewRequest(\"DELETE\", url, nil)\n\n\treq.Header.Add(\"\
          Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
  /api/v1/organizations/{org_id}/change_owner:
    post:
      tags:
      - Organizations
      summary: Update organization owner.
      description: |-
        Update organization owner. Only owners may update organization owners. The previous owner will become
        an admin (and can subsequently be removed from the organization, if required).
      operationId: updateOrgOwner
      parameters:
      - name: org_id
        in: path
        description: The org id
        required: true
        style: simple
        explode: false
        schema:
          type: string
          x-go-name: Org
        x-go-name: Org
      responses:
        "200":
          description: Successfully changed organization owner.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmptyResponse'
        "400":
          description: A malformed or bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorBadRequestExample'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorForbiddenExample'
      x-codeSamples:
      - lang: Shell
        source: |-
          curl --request POST \
            --url http://localhost:8080/api/v1/organizations/322346f9-54b4-497d-bc9a-c54b5aaa4400/change_owner \
            --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'
      - lang: Node
        source: |-
          const fetch = require('node-fetch');

          let url = 'http://localhost:8080/api/v1/organizations/322346f9-54b4-497d-bc9a-c54b5aaa4400/change_owner';

          let options = {method: 'POST', headers: {Authorization: 'Bearer REPLACE_BEARER_TOKEN'}};

          fetch(url, options)
            .then(res => res.json())
            .then(json => console.log(json))
            .catch(err => console.error('error:' + err));
      - lang: Ruby
        source: |-
          require 'uri'
          require 'net/http'

          url = URI("http://localhost:8080/api/v1/organizations/322346f9-54b4-497d-bc9a-c54b5aaa4400/change_owner")

          http = Net::HTTP.new(url.host, url.port)

          request = Net::HTTP::Post.new(url)
          request["Authorization"] = 'Bearer REPLACE_BEARER_TOKEN'

          response = http.request(request)
          puts response.read_body
      - lang: Python
        source: |-
          import requests

          url = "http://localhost:8080/api/v1/organizations/322346f9-54b4-497d-bc9a-c54b5aaa4400/change_owner"

          headers = {"Authorization": "Bearer REPLACE_BEARER_TOKEN"}

          response = requests.request("POST", url, headers=headers)

          print(response.text)
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\
          \n)\n\nfunc main() {\n\n\turl := \"http://localhost:8080/api/v1/organizations/322346f9-54b4-497d-bc9a-c54b5aaa4400/change_owner\"\
          \n\n\treq, _ := http.NewRequest(\"POST\", url, nil)\n\n\treq.Header.Add(\"\
          Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
  /api/v1/organizations/{org_id}/leave:
    post:
      tags:
      - Organizations
      summary: Leave an organization
      description: |-
        Leave an organization. The currently authenticated user will leave this organization.
        Owners cannot leave an organization without changing the owner first.
      operationId: leaveOrg
      parameters:
      - name: org_id
        in: path
        description: The org id
        required: true
        style: simple
        explode: false
        schema:
          type: string
          x-go-name: Org
        x-go-name: Org
      responses:
        "202":
          description: Successfully triggered organization member removal.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmptyResponse'
        "400":
          description: A malformed or bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorBadRequestExample'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorForbiddenExample'
      x-codeSamples:
      - lang: Shell
        source: |-
          curl --request POST \
            --url http://localhost:8080/api/v1/organizations/322346f9-54b4-497d-bc9a-c54b5aaa4400/leave \
            --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'
      - lang: Node
        source: |-
          const fetch = require('node-fetch');

          let url = 'http://localhost:8080/api/v1/organizations/322346f9-54b4-497d-bc9a-c54b5aaa4400/leave';

          let options = {method: 'POST', headers: {Authorization: 'Bearer REPLACE_BEARER_TOKEN'}};

          fetch(url, options)
            .then(res => res.json())
            .then(json => console.log(json))
            .catch(err => console.error('error:' + err));
      - lang: Ruby
        source: |-
          require 'uri'
          require 'net/http'

          url = URI("http://localhost:8080/api/v1/organizations/322346f9-54b4-497d-bc9a-c54b5aaa4400/leave")

          http = Net::HTTP.new(url.host, url.port)

          request = Net::HTTP::Post.new(url)
          request["Authorization"] = 'Bearer REPLACE_BEARER_TOKEN'

          response = http.request(request)
          puts response.read_body
      - lang: Python
        source: |-
          import requests

          url = "http://localhost:8080/api/v1/organizations/322346f9-54b4-497d-bc9a-c54b5aaa4400/leave"

          headers = {"Authorization": "Bearer REPLACE_BEARER_TOKEN"}

          response = requests.request("POST", url, headers=headers)

          print(response.text)
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\
          \n)\n\nfunc main() {\n\n\turl := \"http://localhost:8080/api/v1/organizations/322346f9-54b4-497d-bc9a-c54b5aaa4400/leave\"\
          \n\n\treq, _ := http.NewRequest(\"POST\", url, nil)\n\n\treq.Header.Add(\"\
          Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
  /api/v1/organizations/{org_id}/members:
    get:
      tags:
      - Organizations
      summary: List organization members
      description: Lists organization members.
      operationId: listOrgMembers
      parameters:
      - name: org_id
        in: query
        description: The page to query for
        required: false
        style: form
        explode: true
        schema:
          type: integer
          format: int64
          x-go-name: Page
        x-go-name: Page
      responses:
        "200":
          description: Successfully listed members
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListOrgMembersResponse'
        "400":
          description: A malformed or bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorBadRequestExample'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorForbiddenExample'
      x-codeSamples:
      - lang: Shell
        source: |-
          curl --request GET \
            --url 'http://localhost:8080/api/v1/organizations/{org_id}/members?org_id=2' \
            --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'
      - lang: Node
        source: |-
          const fetch = require('node-fetch');

          let url = 'http://localhost:8080/api/v1/organizations/{org_id}/members?org_id=2';

          let options = {method: 'GET', headers: {Authorization: 'Bearer REPLACE_BEARER_TOKEN'}};

          fetch(url, options)
            .then(res => res.json())
            .then(json => console.log(json))
            .catch(err => console.error('error:' + err));
      - lang: Ruby
        source: |-
          require 'uri'
          require 'net/http'

          url = URI("http://localhost:8080/api/v1/organizations/{org_id}/members?org_id=2")

          http = Net::HTTP.new(url.host, url.port)

          request = Net::HTTP::Get.new(url)
          request["Authorization"] = 'Bearer REPLACE_BEARER_TOKEN'

          response = http.request(request)
          puts response.read_body
      - lang: Python
        source: |-
          import requests

          url = "http://localhost:8080/api/v1/organizations/{org_id}/members"

          querystring = {"org_id":"2"}

          headers = {"Authorization": "Bearer REPLACE_BEARER_TOKEN"}

          response = requests.request("GET", url, headers=headers, params=querystring)

          print(response.text)
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\
          \n)\n\nfunc main() {\n\n\turl := \"http://localhost:8080/api/v1/organizations/{org_id}/members?org_id=2\"\
          \n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"\
          Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
    post:
      tags:
      - Organizations
      summary: Create a member invite
      description: Creates a new invite for an organization member.
      operationId: createOrgMemberInvite
      parameters:
      - name: org_id
        in: path
        description: The org id
        required: true
        style: simple
        explode: false
        schema:
          type: string
          x-go-name: Org
        x-go-name: Org
      requestBody:
        description: The org member to create
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/createOrgMemberInvite_request'
        required: false
      responses:
        "201":
          description: Successfully created the invite.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateOrgMemberInviteResponse'
        "400":
          description: A malformed or bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorBadRequestExample'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorForbiddenExample'
        "405":
          description: This endpoint is not supported on this Hatchet instance.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorNotSupportedExample'
      x-codeSamples:
      - lang: Shell
        source: |-
          curl --request POST \
            --url http://localhost:8080/api/v1/organizations/322346f9-54b4-497d-bc9a-c54b5aaa4400/members \
            --header 'Authorization: Bearer REPLACE_BEARER_TOKEN' \
            --header 'content-type: application/json' \
            --data '{"invitee_email":"user1@gmail.com","invitee_policies":[{"id":"string","name":"string"}]}'
      - lang: Node
        source: |-
          const fetch = require('node-fetch');

          let url = 'http://localhost:8080/api/v1/organizations/322346f9-54b4-497d-bc9a-c54b5aaa4400/members';

          let options = {
            method: 'POST',
            headers: {
              Authorization: 'Bearer REPLACE_BEARER_TOKEN',
              'content-type': 'application/json'
            },
            body: '{"invitee_email":"user1@gmail.com","invitee_policies":[{"id":"string","name":"string"}]}'
          };

          fetch(url, options)
            .then(res => res.json())
            .then(json => console.log(json))
            .catch(err => console.error('error:' + err));
      - lang: Ruby
        source: |-
          require 'uri'
          require 'net/http'

          url = URI("http://localhost:8080/api/v1/organizations/322346f9-54b4-497d-bc9a-c54b5aaa4400/members")

          http = Net::HTTP.new(url.host, url.port)

          request = Net::HTTP::Post.new(url)
          request["Authorization"] = 'Bearer REPLACE_BEARER_TOKEN'
          request["content-type"] = 'application/json'
          request.body = "{\"invitee_email\":\"user1@gmail.com\",\"invitee_policies\":[{\"id\":\"string\",\"name\":\"string\"}]}"

          response = http.request(request)
          puts response.read_body
      - lang: Python
        source: |-
          import requests

          url = "http://localhost:8080/api/v1/organizations/322346f9-54b4-497d-bc9a-c54b5aaa4400/members"

          payload = {
              "invitee_email": "user1@gmail.com",
              "invitee_policies": [
                  {
                      "id": "string",
                      "name": "string"
                  }
              ]
          }
          headers = {
              "Authorization": "Bearer REPLACE_BEARER_TOKEN",
              "content-type": "application/json"
          }

          response = requests.request("POST", url, json=payload, headers=headers)

          print(response.text)
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\
          \n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"http://localhost:8080/api/v1/organizations/322346f9-54b4-497d-bc9a-c54b5aaa4400/members\"\
          \n\n\tpayload := strings.NewReader(\"{\\\"invitee_email\\\":\\\"user1@gmail.com\\\
          \",\\\"invitee_policies\\\":[{\\\"id\\\":\\\"string\\\",\\\"name\\\":\\\"\
          string\\\"}]}\")\n\n\treq, _ := http.NewRequest(\"POST\", url, payload)\n\
          \n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\
          \treq.Header.Add(\"content-type\", \"application/json\")\n\n\tres, _ :=\
          \ http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\
          \n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
      x-codegen-request-body-name: CreateOrgMemberInviteRequest
  /api/v1/organizations/{org_id}/members/{org_member_id}:
    get:
      tags:
      - Organizations
      summary: Get organization member.
      description: Get organization member. Only admins and owner can read full member
        data.
      operationId: getOrgMember
      parameters:
      - name: org_id
        in: path
        description: The org id
        required: true
        style: simple
        explode: false
        schema:
          type: string
          x-go-name: Org
        x-go-name: Org
      - name: org_member_id
        in: path
        description: The org member id
        required: true
        style: simple
        explode: false
        schema:
          type: string
          x-go-name: OrgMember
        x-go-name: OrgMember
      responses:
        "200":
          description: Successfully got member
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetOrgMemberResponse'
        "400":
          description: A malformed or bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorBadRequestExample'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorForbiddenExample'
      x-codeSamples:
      - lang: Shell
        source: |-
          curl --request GET \
            --url http://localhost:8080/api/v1/organizations/322346f9-54b4-497d-bc9a-c54b5aaa4400/members/322346f9-54b4-497d-bc9a-c54b5aaa4400 \
            --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'
      - lang: Node
        source: |-
          const fetch = require('node-fetch');

          let url = 'http://localhost:8080/api/v1/organizations/322346f9-54b4-497d-bc9a-c54b5aaa4400/members/322346f9-54b4-497d-bc9a-c54b5aaa4400';

          let options = {method: 'GET', headers: {Authorization: 'Bearer REPLACE_BEARER_TOKEN'}};

          fetch(url, options)
            .then(res => res.json())
            .then(json => console.log(json))
            .catch(err => console.error('error:' + err));
      - lang: Ruby
        source: |-
          require 'uri'
          require 'net/http'

          url = URI("http://localhost:8080/api/v1/organizations/322346f9-54b4-497d-bc9a-c54b5aaa4400/members/322346f9-54b4-497d-bc9a-c54b5aaa4400")

          http = Net::HTTP.new(url.host, url.port)

          request = Net::HTTP::Get.new(url)
          request["Authorization"] = 'Bearer REPLACE_BEARER_TOKEN'

          response = http.request(request)
          puts response.read_body
      - lang: Python
        source: |-
          import requests

          url = "http://localhost:8080/api/v1/organizations/322346f9-54b4-497d-bc9a-c54b5aaa4400/members/322346f9-54b4-497d-bc9a-c54b5aaa4400"

          headers = {"Authorization": "Bearer REPLACE_BEARER_TOKEN"}

          response = requests.request("GET", url, headers=headers)

          print(response.text)
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\
          \n)\n\nfunc main() {\n\n\turl := \"http://localhost:8080/api/v1/organizations/322346f9-54b4-497d-bc9a-c54b5aaa4400/members/322346f9-54b4-497d-bc9a-c54b5aaa4400\"\
          \n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"\
          Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
    delete:
      tags:
      - Organizations
      summary: Delete organization member.
      description: |-
        Delete an organization member. Only admins can delete an organization member. Owners cannot be
        removed from the organization, the owner must be transferred before the organization owner can
        be removed.
      operationId: deleteOrgMember
      parameters:
      - name: org_id
        in: path
        description: The org id
        required: true
        style: simple
        explode: false
        schema:
          type: string
          x-go-name: Org
        x-go-name: Org
      responses:
        "200":
          description: Successfully triggered organization member deletion.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmptyResponse'
        "400":
          description: A malformed or bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorBadRequestExample'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorForbiddenExample'
      x-codeSamples:
      - lang: Shell
        source: |-
          curl --request DELETE \
            --url http://localhost:8080/api/v1/organizations/322346f9-54b4-497d-bc9a-c54b5aaa4400/members/{org_member_id} \
            --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'
      - lang: Node
        source: |-
          const fetch = require('node-fetch');

          let url = 'http://localhost:8080/api/v1/organizations/322346f9-54b4-497d-bc9a-c54b5aaa4400/members/{org_member_id}';

          let options = {method: 'DELETE', headers: {Authorization: 'Bearer REPLACE_BEARER_TOKEN'}};

          fetch(url, options)
            .then(res => res.json())
            .then(json => console.log(json))
            .catch(err => console.error('error:' + err));
      - lang: Ruby
        source: |-
          require 'uri'
          require 'net/http'

          url = URI("http://localhost:8080/api/v1/organizations/322346f9-54b4-497d-bc9a-c54b5aaa4400/members/{org_member_id}")

          http = Net::HTTP.new(url.host, url.port)

          request = Net::HTTP::Delete.new(url)
          request["Authorization"] = 'Bearer REPLACE_BEARER_TOKEN'

          response = http.request(request)
          puts response.read_body
      - lang: Python
        source: |-
          import requests

          url = "http://localhost:8080/api/v1/organizations/322346f9-54b4-497d-bc9a-c54b5aaa4400/members/{org_member_id}"

          headers = {"Authorization": "Bearer REPLACE_BEARER_TOKEN"}

          response = requests.request("DELETE", url, headers=headers)

          print(response.text)
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\
          \n)\n\nfunc main() {\n\n\turl := \"http://localhost:8080/api/v1/organizations/322346f9-54b4-497d-bc9a-c54b5aaa4400/members/{org_member_id}\"\
          \n\n\treq, _ := http.NewRequest(\"DELETE\", url, nil)\n\n\treq.Header.Add(\"\
          Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
  /api/v1/organizations/{org_id}/members/{org_member_id}/update_policies:
    post:
      tags:
      - Organizations
      summary: Update organization member policies.
      description: Update an organization member's policies.
      operationId: updateOrgMemberPolicies
      parameters:
      - name: org_id
        in: path
        description: The org id
        required: true
        style: simple
        explode: false
        schema:
          type: string
          x-go-name: Org
        x-go-name: Org
      - name: org_member_id
        in: path
        description: The org member id
        required: true
        style: simple
        explode: false
        schema:
          type: string
          x-go-name: OrgMember
        x-go-name: OrgMember
      responses:
        "202":
          description: Successfully updated organization member policies.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateOrgMemberPoliciesResponse'
        "400":
          description: A malformed or bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorBadRequestExample'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorForbiddenExample'
      x-codeSamples:
      - lang: Shell
        source: |-
          curl --request POST \
            --url http://localhost:8080/api/v1/organizations/322346f9-54b4-497d-bc9a-c54b5aaa4400/members/322346f9-54b4-497d-bc9a-c54b5aaa4400/update_policies \
            --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'
      - lang: Node
        source: |-
          const fetch = require('node-fetch');

          let url = 'http://localhost:8080/api/v1/organizations/322346f9-54b4-497d-bc9a-c54b5aaa4400/members/322346f9-54b4-497d-bc9a-c54b5aaa4400/update_policies';

          let options = {method: 'POST', headers: {Authorization: 'Bearer REPLACE_BEARER_TOKEN'}};

          fetch(url, options)
            .then(res => res.json())
            .then(json => console.log(json))
            .catch(err => console.error('error:' + err));
      - lang: Ruby
        source: |-
          require 'uri'
          require 'net/http'

          url = URI("http://localhost:8080/api/v1/organizations/322346f9-54b4-497d-bc9a-c54b5aaa4400/members/322346f9-54b4-497d-bc9a-c54b5aaa4400/update_policies")

          http = Net::HTTP.new(url.host, url.port)

          request = Net::HTTP::Post.new(url)
          request["Authorization"] = 'Bearer REPLACE_BEARER_TOKEN'

          response = http.request(request)
          puts response.read_body
      - lang: Python
        source: |-
          import requests

          url = "http://localhost:8080/api/v1/organizations/322346f9-54b4-497d-bc9a-c54b5aaa4400/members/322346f9-54b4-497d-bc9a-c54b5aaa4400/update_policies"

          headers = {"Authorization": "Bearer REPLACE_BEARER_TOKEN"}

          response = requests.request("POST", url, headers=headers)

          print(response.text)
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\
          \n)\n\nfunc main() {\n\n\turl := \"http://localhost:8080/api/v1/organizations/322346f9-54b4-497d-bc9a-c54b5aaa4400/members/322346f9-54b4-497d-bc9a-c54b5aaa4400/update_policies\"\
          \n\n\treq, _ := http.NewRequest(\"POST\", url, nil)\n\n\treq.Header.Add(\"\
          Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
  /api/v1/organizations/{org_id}/teams:
    get:
      tags:
      - Teams
      summary: List teams.
      description: Lists teams for an organization.
      operationId: listTeams
      parameters:
      - name: org_id
        in: query
        description: The page to query for
        required: false
        style: form
        explode: true
        schema:
          type: integer
          format: int64
          x-go-name: Page
        x-go-name: Page
      responses:
        "200":
          description: Successfully listed teams
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListTeamsResponse'
        "400":
          description: A malformed or bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorBadRequestExample'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorForbiddenExample'
      x-codeSamples:
      - lang: Shell
        source: |-
          curl --request GET \
            --url 'http://localhost:8080/api/v1/organizations/{org_id}/teams?org_id=2' \
            --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'
      - lang: Node
        source: |-
          const fetch = require('node-fetch');

          let url = 'http://localhost:8080/api/v1/organizations/{org_id}/teams?org_id=2';

          let options = {method: 'GET', headers: {Authorization: 'Bearer REPLACE_BEARER_TOKEN'}};

          fetch(url, options)
            .then(res => res.json())
            .then(json => console.log(json))
            .catch(err => console.error('error:' + err));
      - lang: Ruby
        source: |-
          require 'uri'
          require 'net/http'

          url = URI("http://localhost:8080/api/v1/organizations/{org_id}/teams?org_id=2")

          http = Net::HTTP.new(url.host, url.port)

          request = Net::HTTP::Get.new(url)
          request["Authorization"] = 'Bearer REPLACE_BEARER_TOKEN'

          response = http.request(request)
          puts response.read_body
      - lang: Python
        source: |-
          import requests

          url = "http://localhost:8080/api/v1/organizations/{org_id}/teams"

          querystring = {"org_id":"2"}

          headers = {"Authorization": "Bearer REPLACE_BEARER_TOKEN"}

          response = requests.request("GET", url, headers=headers, params=querystring)

          print(response.text)
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\
          \n)\n\nfunc main() {\n\n\turl := \"http://localhost:8080/api/v1/organizations/{org_id}/teams?org_id=2\"\
          \n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"\
          Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
    post:
      tags:
      - Teams
      summary: Create a new team.
      description: "Creates a new team, with the authenticated user set as a team\
        \ admin."
      operationId: createTeam
      parameters:
      - name: org_id
        in: path
        description: The org id
        required: true
        style: simple
        explode: false
        schema:
          type: string
          x-go-name: Org
        x-go-name: Org
      requestBody:
        description: The team to create
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/createTeam_request'
        required: false
      responses:
        "201":
          description: Successfully created the team
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateTeamResponse'
        "400":
          description: A malformed or bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorBadRequestExample'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorForbiddenExample'
      x-codeSamples:
      - lang: Shell
        source: |-
          curl --request POST \
            --url http://localhost:8080/api/v1/organizations/322346f9-54b4-497d-bc9a-c54b5aaa4400/teams \
            --header 'Authorization: Bearer REPLACE_BEARER_TOKEN' \
            --header 'content-type: application/json' \
            --data '{"display_name":"Team 1"}'
      - lang: Node
        source: |-
          const fetch = require('node-fetch');

          let url = 'http://localhost:8080/api/v1/organizations/322346f9-54b4-497d-bc9a-c54b5aaa4400/teams';

          let options = {
            method: 'POST',
            headers: {
              Authorization: 'Bearer REPLACE_BEARER_TOKEN',
              'content-type': 'application/json'
            },
            body: '{"display_name":"Team 1"}'
          };

          fetch(url, options)
            .then(res => res.json())
            .then(json => console.log(json))
            .catch(err => console.error('error:' + err));
      - lang: Ruby
        source: |-
          require 'uri'
          require 'net/http'

          url = URI("http://localhost:8080/api/v1/organizations/322346f9-54b4-497d-bc9a-c54b5aaa4400/teams")

          http = Net::HTTP.new(url.host, url.port)

          request = Net::HTTP::Post.new(url)
          request["Authorization"] = 'Bearer REPLACE_BEARER_TOKEN'
          request["content-type"] = 'application/json'
          request.body = "{\"display_name\":\"Team 1\"}"

          response = http.request(request)
          puts response.read_body
      - lang: Python
        source: |-
          import requests

          url = "http://localhost:8080/api/v1/organizations/322346f9-54b4-497d-bc9a-c54b5aaa4400/teams"

          payload = {"display_name": "Team 1"}
          headers = {
              "Authorization": "Bearer REPLACE_BEARER_TOKEN",
              "content-type": "application/json"
          }

          response = requests.request("POST", url, json=payload, headers=headers)

          print(response.text)
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\
          \n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"http://localhost:8080/api/v1/organizations/322346f9-54b4-497d-bc9a-c54b5aaa4400/teams\"\
          \n\n\tpayload := strings.NewReader(\"{\\\"display_name\\\":\\\"Team 1\\\"\
          }\")\n\n\treq, _ := http.NewRequest(\"POST\", url, payload)\n\n\treq.Header.Add(\"\
          Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\treq.Header.Add(\"content-type\"\
          , \"application/json\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\t\
          defer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\
          \tfmt.Println(string(body))\n\n}"
      x-codegen-request-body-name: CreateTeamRequest
  /api/v1/teams/{team_id}:
    post:
      tags:
      - Teams
      summary: Update team
      description: Updates a team.
      operationId: updateTeam
      parameters:
      - name: team_id
        in: path
        description: The team id
        required: true
        style: simple
        explode: false
        schema:
          type: string
          x-go-name: Team
        x-go-name: Team
      requestBody:
        description: The team parameters to update
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/createTeam_request'
        required: false
      responses:
        "200":
          description: Successfully updated the team
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TeamUpdateResponse'
        "400":
          description: A malformed or bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorBadRequestExample'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorForbiddenExample'
      x-codeSamples:
      - lang: Shell
        source: |-
          curl --request POST \
            --url http://localhost:8080/api/v1/teams/322346f9-54b4-497d-bc9a-c54b5aaa4400 \
            --header 'Authorization: Bearer REPLACE_BEARER_TOKEN' \
            --header 'content-type: application/json' \
            --data '{"display_name":"Team 1"}'
      - lang: Node
        source: |-
          const fetch = require('node-fetch');

          let url = 'http://localhost:8080/api/v1/teams/322346f9-54b4-497d-bc9a-c54b5aaa4400';

          let options = {
            method: 'POST',
            headers: {
              Authorization: 'Bearer REPLACE_BEARER_TOKEN',
              'content-type': 'application/json'
            },
            body: '{"display_name":"Team 1"}'
          };

          fetch(url, options)
            .then(res => res.json())
            .then(json => console.log(json))
            .catch(err => console.error('error:' + err));
      - lang: Ruby
        source: |-
          require 'uri'
          require 'net/http'

          url = URI("http://localhost:8080/api/v1/teams/322346f9-54b4-497d-bc9a-c54b5aaa4400")

          http = Net::HTTP.new(url.host, url.port)

          request = Net::HTTP::Post.new(url)
          request["Authorization"] = 'Bearer REPLACE_BEARER_TOKEN'
          request["content-type"] = 'application/json'
          request.body = "{\"display_name\":\"Team 1\"}"

          response = http.request(request)
          puts response.read_body
      - lang: Python
        source: |-
          import requests

          url = "http://localhost:8080/api/v1/teams/322346f9-54b4-497d-bc9a-c54b5aaa4400"

          payload = {"display_name": "Team 1"}
          headers = {
              "Authorization": "Bearer REPLACE_BEARER_TOKEN",
              "content-type": "application/json"
          }

          response = requests.request("POST", url, json=payload, headers=headers)

          print(response.text)
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\
          \n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"http://localhost:8080/api/v1/teams/322346f9-54b4-497d-bc9a-c54b5aaa4400\"\
          \n\n\tpayload := strings.NewReader(\"{\\\"display_name\\\":\\\"Team 1\\\"\
          }\")\n\n\treq, _ := http.NewRequest(\"POST\", url, payload)\n\n\treq.Header.Add(\"\
          Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\treq.Header.Add(\"content-type\"\
          , \"application/json\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\t\
          defer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\
          \tfmt.Println(string(body))\n\n}"
      x-codegen-request-body-name: TeamUpdateRequest
    delete:
      tags:
      - Teams
      summary: Delete team.
      description: Delete a team. This operation cannot be undone.
      operationId: deleteTeam
      parameters:
      - name: team_id
        in: path
        description: The team id
        required: true
        style: simple
        explode: false
        schema:
          type: string
          x-go-name: Team
        x-go-name: Team
      responses:
        "200":
          description: Successfully triggered team deletion.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteTeamResponse'
        "400":
          description: A malformed or bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorBadRequestExample'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorForbiddenExample'
      x-codeSamples:
      - lang: Shell
        source: |-
          curl --request DELETE \
            --url http://localhost:8080/api/v1/teams/322346f9-54b4-497d-bc9a-c54b5aaa4400 \
            --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'
      - lang: Node
        source: |-
          const fetch = require('node-fetch');

          let url = 'http://localhost:8080/api/v1/teams/322346f9-54b4-497d-bc9a-c54b5aaa4400';

          let options = {method: 'DELETE', headers: {Authorization: 'Bearer REPLACE_BEARER_TOKEN'}};

          fetch(url, options)
            .then(res => res.json())
            .then(json => console.log(json))
            .catch(err => console.error('error:' + err));
      - lang: Ruby
        source: |-
          require 'uri'
          require 'net/http'

          url = URI("http://localhost:8080/api/v1/teams/322346f9-54b4-497d-bc9a-c54b5aaa4400")

          http = Net::HTTP.new(url.host, url.port)

          request = Net::HTTP::Delete.new(url)
          request["Authorization"] = 'Bearer REPLACE_BEARER_TOKEN'

          response = http.request(request)
          puts response.read_body
      - lang: Python
        source: |-
          import requests

          url = "http://localhost:8080/api/v1/teams/322346f9-54b4-497d-bc9a-c54b5aaa4400"

          headers = {"Authorization": "Bearer REPLACE_BEARER_TOKEN"}

          response = requests.request("DELETE", url, headers=headers)

          print(response.text)
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\
          \n)\n\nfunc main() {\n\n\turl := \"http://localhost:8080/api/v1/teams/322346f9-54b4-497d-bc9a-c54b5aaa4400\"\
          \n\n\treq, _ := http.NewRequest(\"DELETE\", url, nil)\n\n\treq.Header.Add(\"\
          Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
  /api/v1/teams/{team_id}/github_incoming/{github_incoming_webhook_id}:
    post:
      tags:
      - Teams
      summary: Github incoming webhook endpoint
      description: Github incoming webhook handler.
      operationId: githubIncomingWebhook
      parameters:
      - name: team_id
        in: path
        description: The team id
        required: true
        style: simple
        explode: false
        schema:
          type: string
          x-go-name: Team
        x-go-name: Team
      - name: github_incoming_webhook_id
        in: path
        description: The incoming webhook id
        required: true
        style: simple
        explode: false
        schema:
          type: string
          x-go-name: WebhookID
        x-go-name: WebhookID
      responses:
        "200":
          description: Successfully responded to webhook
          content: {}
        "400":
          description: A malformed or bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorBadRequestExample'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorForbiddenExample'
      x-codeSamples:
      - lang: Shell
        source: |-
          curl --request POST \
            --url http://localhost:8080/api/v1/teams/322346f9-54b4-497d-bc9a-c54b5aaa4400/github_incoming/322346f9-54b4-497d-bc9a-c54b5aaa4400 \
            --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'
      - lang: Node
        source: |-
          const fetch = require('node-fetch');

          let url = 'http://localhost:8080/api/v1/teams/322346f9-54b4-497d-bc9a-c54b5aaa4400/github_incoming/322346f9-54b4-497d-bc9a-c54b5aaa4400';

          let options = {method: 'POST', headers: {Authorization: 'Bearer REPLACE_BEARER_TOKEN'}};

          fetch(url, options)
            .then(res => res.json())
            .then(json => console.log(json))
            .catch(err => console.error('error:' + err));
      - lang: Ruby
        source: |-
          require 'uri'
          require 'net/http'

          url = URI("http://localhost:8080/api/v1/teams/322346f9-54b4-497d-bc9a-c54b5aaa4400/github_incoming/322346f9-54b4-497d-bc9a-c54b5aaa4400")

          http = Net::HTTP.new(url.host, url.port)

          request = Net::HTTP::Post.new(url)
          request["Authorization"] = 'Bearer REPLACE_BEARER_TOKEN'

          response = http.request(request)
          puts response.read_body
      - lang: Python
        source: |-
          import requests

          url = "http://localhost:8080/api/v1/teams/322346f9-54b4-497d-bc9a-c54b5aaa4400/github_incoming/322346f9-54b4-497d-bc9a-c54b5aaa4400"

          headers = {"Authorization": "Bearer REPLACE_BEARER_TOKEN"}

          response = requests.request("POST", url, headers=headers)

          print(response.text)
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\
          \n)\n\nfunc main() {\n\n\turl := \"http://localhost:8080/api/v1/teams/322346f9-54b4-497d-bc9a-c54b5aaa4400/github_incoming/322346f9-54b4-497d-bc9a-c54b5aaa4400\"\
          \n\n\treq, _ := http.NewRequest(\"POST\", url, nil)\n\n\treq.Header.Add(\"\
          Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
  /api/v1/teams/{team_id}/members:
    get:
      tags:
      - Teams
      summary: List team members
      description: Lists team members for a team.
      operationId: listTeamMembers
      parameters:
      - name: team_id
        in: query
        description: The page to query for
        required: false
        style: form
        explode: true
        schema:
          type: integer
          format: int64
          x-go-name: Page
        x-go-name: Page
      responses:
        "200":
          description: Successfully listed team members
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListTeamMembersResponse'
        "400":
          description: A malformed or bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorBadRequestExample'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorForbiddenExample'
      x-codeSamples:
      - lang: Shell
        source: |-
          curl --request GET \
            --url 'http://localhost:8080/api/v1/teams/{team_id}/members?team_id=2' \
            --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'
      - lang: Node
        source: |-
          const fetch = require('node-fetch');

          let url = 'http://localhost:8080/api/v1/teams/{team_id}/members?team_id=2';

          let options = {method: 'GET', headers: {Authorization: 'Bearer REPLACE_BEARER_TOKEN'}};

          fetch(url, options)
            .then(res => res.json())
            .then(json => console.log(json))
            .catch(err => console.error('error:' + err));
      - lang: Ruby
        source: |-
          require 'uri'
          require 'net/http'

          url = URI("http://localhost:8080/api/v1/teams/{team_id}/members?team_id=2")

          http = Net::HTTP.new(url.host, url.port)

          request = Net::HTTP::Get.new(url)
          request["Authorization"] = 'Bearer REPLACE_BEARER_TOKEN'

          response = http.request(request)
          puts response.read_body
      - lang: Python
        source: |-
          import requests

          url = "http://localhost:8080/api/v1/teams/{team_id}/members"

          querystring = {"team_id":"2"}

          headers = {"Authorization": "Bearer REPLACE_BEARER_TOKEN"}

          response = requests.request("GET", url, headers=headers, params=querystring)

          print(response.text)
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\
          \n)\n\nfunc main() {\n\n\turl := \"http://localhost:8080/api/v1/teams/{team_id}/members?team_id=2\"\
          \n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"\
          Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
    post:
      tags:
      - Teams
      summary: Add team member
      description: Add a team member from the organization members to the team.
      operationId: addTeamMember
      parameters:
      - name: team_id
        in: path
        description: The team id
        required: true
        style: simple
        explode: false
        schema:
          type: string
          x-go-name: Team
        x-go-name: Team
      requestBody:
        description: The team member to add
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/addTeamMember_request'
        required: false
      responses:
        "200":
          description: Successfully added team member
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TeamAddMemberResponse'
        "400":
          description: A malformed or bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorBadRequestExample'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorForbiddenExample'
      x-codeSamples:
      - lang: Shell
        source: |-
          curl --request POST \
            --url http://localhost:8080/api/v1/teams/322346f9-54b4-497d-bc9a-c54b5aaa4400/members \
            --header 'Authorization: Bearer REPLACE_BEARER_TOKEN' \
            --header 'content-type: application/json' \
            --data '{"org_member_id":"string","policies":[{"id":"string","name":"string"}]}'
      - lang: Node
        source: |-
          const fetch = require('node-fetch');

          let url = 'http://localhost:8080/api/v1/teams/322346f9-54b4-497d-bc9a-c54b5aaa4400/members';

          let options = {
            method: 'POST',
            headers: {
              Authorization: 'Bearer REPLACE_BEARER_TOKEN',
              'content-type': 'application/json'
            },
            body: '{"org_member_id":"string","policies":[{"id":"string","name":"string"}]}'
          };

          fetch(url, options)
            .then(res => res.json())
            .then(json => console.log(json))
            .catch(err => console.error('error:' + err));
      - lang: Ruby
        source: |-
          require 'uri'
          require 'net/http'

          url = URI("http://localhost:8080/api/v1/teams/322346f9-54b4-497d-bc9a-c54b5aaa4400/members")

          http = Net::HTTP.new(url.host, url.port)

          request = Net::HTTP::Post.new(url)
          request["Authorization"] = 'Bearer REPLACE_BEARER_TOKEN'
          request["content-type"] = 'application/json'
          request.body = "{\"org_member_id\":\"string\",\"policies\":[{\"id\":\"string\",\"name\":\"string\"}]}"

          response = http.request(request)
          puts response.read_body
      - lang: Python
        source: |-
          import requests

          url = "http://localhost:8080/api/v1/teams/322346f9-54b4-497d-bc9a-c54b5aaa4400/members"

          payload = {
              "org_member_id": "string",
              "policies": [
                  {
                      "id": "string",
                      "name": "string"
                  }
              ]
          }
          headers = {
              "Authorization": "Bearer REPLACE_BEARER_TOKEN",
              "content-type": "application/json"
          }

          response = requests.request("POST", url, json=payload, headers=headers)

          print(response.text)
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\
          \n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"http://localhost:8080/api/v1/teams/322346f9-54b4-497d-bc9a-c54b5aaa4400/members\"\
          \n\n\tpayload := strings.NewReader(\"{\\\"org_member_id\\\":\\\"string\\\
          \",\\\"policies\\\":[{\\\"id\\\":\\\"string\\\",\\\"name\\\":\\\"string\\\
          \"}]}\")\n\n\treq, _ := http.NewRequest(\"POST\", url, payload)\n\n\treq.Header.Add(\"\
          Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\treq.Header.Add(\"content-type\"\
          , \"application/json\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\t\
          defer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\
          \tfmt.Println(string(body))\n\n}"
      x-codegen-request-body-name: TeamAddMemberRequest
  /api/v1/teams/{team_id}/members/{team_member_id}:
    delete:
      tags:
      - Teams
      summary: Delete team member
      description: Delete a team member.
      operationId: deleteTeamMember
      parameters:
      - name: team_id
        in: path
        description: The team member id
        required: true
        style: simple
        explode: false
        schema:
          type: string
          x-go-name: TeamMember
        x-go-name: TeamMember
      responses:
        "201":
          description: Successfully triggered team member deletion.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmptyResponse'
        "400":
          description: A malformed or bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorBadRequestExample'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorForbiddenExample'
      x-codeSamples:
      - lang: Shell
        source: |-
          curl --request DELETE \
            --url http://localhost:8080/api/v1/teams/322346f9-54b4-497d-bc9a-c54b5aaa4400/members/{team_member_id} \
            --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'
      - lang: Node
        source: |-
          const fetch = require('node-fetch');

          let url = 'http://localhost:8080/api/v1/teams/322346f9-54b4-497d-bc9a-c54b5aaa4400/members/{team_member_id}';

          let options = {method: 'DELETE', headers: {Authorization: 'Bearer REPLACE_BEARER_TOKEN'}};

          fetch(url, options)
            .then(res => res.json())
            .then(json => console.log(json))
            .catch(err => console.error('error:' + err));
      - lang: Ruby
        source: |-
          require 'uri'
          require 'net/http'

          url = URI("http://localhost:8080/api/v1/teams/322346f9-54b4-497d-bc9a-c54b5aaa4400/members/{team_member_id}")

          http = Net::HTTP.new(url.host, url.port)

          request = Net::HTTP::Delete.new(url)
          request["Authorization"] = 'Bearer REPLACE_BEARER_TOKEN'

          response = http.request(request)
          puts response.read_body
      - lang: Python
        source: |-
          import requests

          url = "http://localhost:8080/api/v1/teams/322346f9-54b4-497d-bc9a-c54b5aaa4400/members/{team_member_id}"

          headers = {"Authorization": "Bearer REPLACE_BEARER_TOKEN"}

          response = requests.request("DELETE", url, headers=headers)

          print(response.text)
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\
          \n)\n\nfunc main() {\n\n\turl := \"http://localhost:8080/api/v1/teams/322346f9-54b4-497d-bc9a-c54b5aaa4400/members/{team_member_id}\"\
          \n\n\treq, _ := http.NewRequest(\"DELETE\", url, nil)\n\n\treq.Header.Add(\"\
          Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
  /api/v1/teams/{team_id}/modules:
    get:
      tags:
      - Modules
      summary: List Modules
      description: Lists modules for a given team.
      operationId: listModules
      parameters:
      - name: page
        in: query
        description: The page to query for
        required: false
        style: form
        explode: true
        schema:
          type: integer
          format: int64
          x-go-name: Page
        x-go-name: Page
      - name: team_id
        in: path
        description: The team id
        required: true
        style: simple
        explode: false
        schema:
          type: string
          x-go-name: Team
        x-go-name: Team
      responses:
        "200":
          description: Successfully listed modules
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListModulesResponse'
        "400":
          description: A malformed or bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorBadRequestExample'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorForbiddenExample'
      x-codeSamples:
      - lang: Shell
        source: |-
          curl --request GET \
            --url 'http://localhost:8080/api/v1/teams/322346f9-54b4-497d-bc9a-c54b5aaa4400/modules?page=2' \
            --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'
      - lang: Node
        source: |-
          const fetch = require('node-fetch');

          let url = 'http://localhost:8080/api/v1/teams/322346f9-54b4-497d-bc9a-c54b5aaa4400/modules?page=2';

          let options = {method: 'GET', headers: {Authorization: 'Bearer REPLACE_BEARER_TOKEN'}};

          fetch(url, options)
            .then(res => res.json())
            .then(json => console.log(json))
            .catch(err => console.error('error:' + err));
      - lang: Ruby
        source: |-
          require 'uri'
          require 'net/http'

          url = URI("http://localhost:8080/api/v1/teams/322346f9-54b4-497d-bc9a-c54b5aaa4400/modules?page=2")

          http = Net::HTTP.new(url.host, url.port)

          request = Net::HTTP::Get.new(url)
          request["Authorization"] = 'Bearer REPLACE_BEARER_TOKEN'

          response = http.request(request)
          puts response.read_body
      - lang: Python
        source: |-
          import requests

          url = "http://localhost:8080/api/v1/teams/322346f9-54b4-497d-bc9a-c54b5aaa4400/modules"

          querystring = {"page":"2"}

          headers = {"Authorization": "Bearer REPLACE_BEARER_TOKEN"}

          response = requests.request("GET", url, headers=headers, params=querystring)

          print(response.text)
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\
          \n)\n\nfunc main() {\n\n\turl := \"http://localhost:8080/api/v1/teams/322346f9-54b4-497d-bc9a-c54b5aaa4400/modules?page=2\"\
          \n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"\
          Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
    post:
      tags:
      - Modules
      summary: Create Module
      description: Creates a new module.
      operationId: createModule
      parameters:
      - name: team_id
        in: path
        description: The team id
        required: true
        style: simple
        explode: false
        schema:
          type: string
          x-go-name: Team
        x-go-name: Team
      requestBody:
        description: The module to create
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/createModule_request'
        required: false
      responses:
        "201":
          description: Successfully created the module
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateModuleResponse'
        "400":
          description: A malformed or bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorBadRequestExample'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorForbiddenExample'
      x-codeSamples:
      - lang: Shell
        source: |-
          curl --request POST \
            --url http://localhost:8080/api/v1/teams/322346f9-54b4-497d-bc9a-c54b5aaa4400/modules \
            --header 'Authorization: Bearer REPLACE_BEARER_TOKEN' \
            --header 'content-type: application/json' \
            --data '{"env_vars":{"property1":"string","property2":"string"},"github":{"github_app_installation_id":"bb214807-246e-43a5-a25d-41761d1cff9e","github_repository_branch":"main","github_repository_name":"infra","github_repository_owner":"hatchet-dev","path":"./staging/eks"},"name":"string","values_github":{"github_app_installation_id":"bb214807-246e-43a5-a25d-41761d1cff9e","github_repository_branch":"main","github_repository_name":"infra","github_repository_owner":"hatchet-dev","path":"./staging/eks"},"values_raw":{"property1":{},"property2":{}}}'
      - lang: Node
        source: |-
          const fetch = require('node-fetch');

          let url = 'http://localhost:8080/api/v1/teams/322346f9-54b4-497d-bc9a-c54b5aaa4400/modules';

          let options = {
            method: 'POST',
            headers: {
              Authorization: 'Bearer REPLACE_BEARER_TOKEN',
              'content-type': 'application/json'
            },
            body: '{"env_vars":{"property1":"string","property2":"string"},"github":{"github_app_installation_id":"bb214807-246e-43a5-a25d-41761d1cff9e","github_repository_branch":"main","github_repository_name":"infra","github_repository_owner":"hatchet-dev","path":"./staging/eks"},"name":"string","values_github":{"github_app_installation_id":"bb214807-246e-43a5-a25d-41761d1cff9e","github_repository_branch":"main","github_repository_name":"infra","github_repository_owner":"hatchet-dev","path":"./staging/eks"},"values_raw":{"property1":{},"property2":{}}}'
          };

          fetch(url, options)
            .then(res => res.json())
            .then(json => console.log(json))
            .catch(err => console.error('error:' + err));
      - lang: Ruby
        source: |-
          require 'uri'
          require 'net/http'

          url = URI("http://localhost:8080/api/v1/teams/322346f9-54b4-497d-bc9a-c54b5aaa4400/modules")

          http = Net::HTTP.new(url.host, url.port)

          request = Net::HTTP::Post.new(url)
          request["Authorization"] = 'Bearer REPLACE_BEARER_TOKEN'
          request["content-type"] = 'application/json'
          request.body = "{\"env_vars\":{\"property1\":\"string\",\"property2\":\"string\"},\"github\":{\"github_app_installation_id\":\"bb214807-246e-43a5-a25d-41761d1cff9e\",\"github_repository_branch\":\"main\",\"github_repository_name\":\"infra\",\"github_repository_owner\":\"hatchet-dev\",\"path\":\"./staging/eks\"},\"name\":\"string\",\"values_github\":{\"github_app_installation_id\":\"bb214807-246e-43a5-a25d-41761d1cff9e\",\"github_repository_branch\":\"main\",\"github_repository_name\":\"infra\",\"github_repository_owner\":\"hatchet-dev\",\"path\":\"./staging/eks\"},\"values_raw\":{\"property1\":{},\"property2\":{}}}"

          response = http.request(request)
          puts response.read_body
      - lang: Python
        source: |-
          import requests

          url = "http://localhost:8080/api/v1/teams/322346f9-54b4-497d-bc9a-c54b5aaa4400/modules"

          payload = {
              "env_vars": {
                  "property1": "string",
                  "property2": "string"
              },
              "github": {
                  "github_app_installation_id": "bb214807-246e-43a5-a25d-41761d1cff9e",
                  "github_repository_branch": "main",
                  "github_repository_name": "infra",
                  "github_repository_owner": "hatchet-dev",
                  "path": "./staging/eks"
              },
              "name": "string",
              "values_github": {
                  "github_app_installation_id": "bb214807-246e-43a5-a25d-41761d1cff9e",
                  "github_repository_branch": "main",
                  "github_repository_name": "infra",
                  "github_repository_owner": "hatchet-dev",
                  "path": "./staging/eks"
              },
              "values_raw": {
                  "property1": {},
                  "property2": {}
              }
          }
          headers = {
              "Authorization": "Bearer REPLACE_BEARER_TOKEN",
              "content-type": "application/json"
          }

          response = requests.request("POST", url, json=payload, headers=headers)

          print(response.text)
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\
          \n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"http://localhost:8080/api/v1/teams/322346f9-54b4-497d-bc9a-c54b5aaa4400/modules\"\
          \n\n\tpayload := strings.NewReader(\"{\\\"env_vars\\\":{\\\"property1\\\"\
          :\\\"string\\\",\\\"property2\\\":\\\"string\\\"},\\\"github\\\":{\\\"github_app_installation_id\\\
          \":\\\"bb214807-246e-43a5-a25d-41761d1cff9e\\\",\\\"github_repository_branch\\\
          \":\\\"main\\\",\\\"github_repository_name\\\":\\\"infra\\\",\\\"github_repository_owner\\\
          \":\\\"hatchet-dev\\\",\\\"path\\\":\\\"./staging/eks\\\"},\\\"name\\\"\
          :\\\"string\\\",\\\"values_github\\\":{\\\"github_app_installation_id\\\"\
          :\\\"bb214807-246e-43a5-a25d-41761d1cff9e\\\",\\\"github_repository_branch\\\
          \":\\\"main\\\",\\\"github_repository_name\\\":\\\"infra\\\",\\\"github_repository_owner\\\
          \":\\\"hatchet-dev\\\",\\\"path\\\":\\\"./staging/eks\\\"},\\\"values_raw\\\
          \":{\\\"property1\\\":{},\\\"property2\\\":{}}}\")\n\n\treq, _ := http.NewRequest(\"\
          POST\", url, payload)\n\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\"\
          )\n\treq.Header.Add(\"content-type\", \"application/json\")\n\n\tres, _\
          \ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ :=\
          \ ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\
          \n}"
      x-codegen-request-body-name: CreateModuleRequest
  /api/v1/teams/{team_id}/modules/{module_id}:
    get:
      tags:
      - Modules
      summary: Get module
      description: Gets a module by module id.
      operationId: getModule
      parameters:
      - name: team_id
        in: path
        description: The team id
        required: true
        style: simple
        explode: false
        schema:
          type: string
          x-go-name: Team
        x-go-name: Team
      - name: module_id
        in: path
        description: The module id
        required: true
        style: simple
        explode: false
        schema:
          type: string
          x-go-name: Module
        x-go-name: Module
      responses:
        "200":
          description: Successfully got the module
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetModuleResponse'
        "400":
          description: A malformed or bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorBadRequestExample'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorForbiddenExample'
      x-codeSamples:
      - lang: Shell
        source: |-
          curl --request GET \
            --url http://localhost:8080/api/v1/teams/322346f9-54b4-497d-bc9a-c54b5aaa4400/modules/322346f9-54b4-497d-bc9a-c54b5aaa4400 \
            --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'
      - lang: Node
        source: |-
          const fetch = require('node-fetch');

          let url = 'http://localhost:8080/api/v1/teams/322346f9-54b4-497d-bc9a-c54b5aaa4400/modules/322346f9-54b4-497d-bc9a-c54b5aaa4400';

          let options = {method: 'GET', headers: {Authorization: 'Bearer REPLACE_BEARER_TOKEN'}};

          fetch(url, options)
            .then(res => res.json())
            .then(json => console.log(json))
            .catch(err => console.error('error:' + err));
      - lang: Ruby
        source: |-
          require 'uri'
          require 'net/http'

          url = URI("http://localhost:8080/api/v1/teams/322346f9-54b4-497d-bc9a-c54b5aaa4400/modules/322346f9-54b4-497d-bc9a-c54b5aaa4400")

          http = Net::HTTP.new(url.host, url.port)

          request = Net::HTTP::Get.new(url)
          request["Authorization"] = 'Bearer REPLACE_BEARER_TOKEN'

          response = http.request(request)
          puts response.read_body
      - lang: Python
        source: |-
          import requests

          url = "http://localhost:8080/api/v1/teams/322346f9-54b4-497d-bc9a-c54b5aaa4400/modules/322346f9-54b4-497d-bc9a-c54b5aaa4400"

          headers = {"Authorization": "Bearer REPLACE_BEARER_TOKEN"}

          response = requests.request("GET", url, headers=headers)

          print(response.text)
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\
          \n)\n\nfunc main() {\n\n\turl := \"http://localhost:8080/api/v1/teams/322346f9-54b4-497d-bc9a-c54b5aaa4400/modules/322346f9-54b4-497d-bc9a-c54b5aaa4400\"\
          \n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"\
          Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
    post:
      tags:
      - Modules
      summary: Update Module Run
      description: Updates a module.
      operationId: updateModule
      parameters:
      - name: team_id
        in: path
        description: The team id
        required: true
        style: simple
        explode: false
        schema:
          type: string
          x-go-name: Team
        x-go-name: Team
      - name: module_id
        in: path
        description: The module id
        required: true
        style: simple
        explode: false
        schema:
          type: string
          x-go-name: Module
        x-go-name: Module
      requestBody:
        description: The module params to update
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/createModule_request'
        required: false
      responses:
        "200":
          description: Successfully updated the module
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateModuleResponse'
        "400":
          description: A malformed or bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorBadRequestExample'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorForbiddenExample'
      x-codeSamples:
      - lang: Shell
        source: |-
          curl --request POST \
            --url http://localhost:8080/api/v1/teams/322346f9-54b4-497d-bc9a-c54b5aaa4400/modules/322346f9-54b4-497d-bc9a-c54b5aaa4400 \
            --header 'Authorization: Bearer REPLACE_BEARER_TOKEN' \
            --header 'content-type: application/json' \
            --data '{"env_vars":{"property1":"string","property2":"string"},"github":{"github_app_installation_id":"bb214807-246e-43a5-a25d-41761d1cff9e","github_repository_branch":"main","github_repository_name":"infra","github_repository_owner":"hatchet-dev","path":"./staging/eks"},"name":"string","values_github":{"github_app_installation_id":"bb214807-246e-43a5-a25d-41761d1cff9e","github_repository_branch":"main","github_repository_name":"infra","github_repository_owner":"hatchet-dev","path":"./staging/eks"},"values_raw":{"property1":{},"property2":{}}}'
      - lang: Node
        source: |-
          const fetch = require('node-fetch');

          let url = 'http://localhost:8080/api/v1/teams/322346f9-54b4-497d-bc9a-c54b5aaa4400/modules/322346f9-54b4-497d-bc9a-c54b5aaa4400';

          let options = {
            method: 'POST',
            headers: {
              Authorization: 'Bearer REPLACE_BEARER_TOKEN',
              'content-type': 'application/json'
            },
            body: '{"env_vars":{"property1":"string","property2":"string"},"github":{"github_app_installation_id":"bb214807-246e-43a5-a25d-41761d1cff9e","github_repository_branch":"main","github_repository_name":"infra","github_repository_owner":"hatchet-dev","path":"./staging/eks"},"name":"string","values_github":{"github_app_installation_id":"bb214807-246e-43a5-a25d-41761d1cff9e","github_repository_branch":"main","github_repository_name":"infra","github_repository_owner":"hatchet-dev","path":"./staging/eks"},"values_raw":{"property1":{},"property2":{}}}'
          };

          fetch(url, options)
            .then(res => res.json())
            .then(json => console.log(json))
            .catch(err => console.error('error:' + err));
      - lang: Ruby
        source: |-
          require 'uri'
          require 'net/http'

          url = URI("http://localhost:8080/api/v1/teams/322346f9-54b4-497d-bc9a-c54b5aaa4400/modules/322346f9-54b4-497d-bc9a-c54b5aaa4400")

          http = Net::HTTP.new(url.host, url.port)

          request = Net::HTTP::Post.new(url)
          request["Authorization"] = 'Bearer REPLACE_BEARER_TOKEN'
          request["content-type"] = 'application/json'
          request.body = "{\"env_vars\":{\"property1\":\"string\",\"property2\":\"string\"},\"github\":{\"github_app_installation_id\":\"bb214807-246e-43a5-a25d-41761d1cff9e\",\"github_repository_branch\":\"main\",\"github_repository_name\":\"infra\",\"github_repository_owner\":\"hatchet-dev\",\"path\":\"./staging/eks\"},\"name\":\"string\",\"values_github\":{\"github_app_installation_id\":\"bb214807-246e-43a5-a25d-41761d1cff9e\",\"github_repository_branch\":\"main\",\"github_repository_name\":\"infra\",\"github_repository_owner\":\"hatchet-dev\",\"path\":\"./staging/eks\"},\"values_raw\":{\"property1\":{},\"property2\":{}}}"

          response = http.request(request)
          puts response.read_body
      - lang: Python
        source: |-
          import requests

          url = "http://localhost:8080/api/v1/teams/322346f9-54b4-497d-bc9a-c54b5aaa4400/modules/322346f9-54b4-497d-bc9a-c54b5aaa4400"

          payload = {
              "env_vars": {
                  "property1": "string",
                  "property2": "string"
              },
              "github": {
                  "github_app_installation_id": "bb214807-246e-43a5-a25d-41761d1cff9e",
                  "github_repository_branch": "main",
                  "github_repository_name": "infra",
                  "github_repository_owner": "hatchet-dev",
                  "path": "./staging/eks"
              },
              "name": "string",
              "values_github": {
                  "github_app_installation_id": "bb214807-246e-43a5-a25d-41761d1cff9e",
                  "github_repository_branch": "main",
                  "github_repository_name": "infra",
                  "github_repository_owner": "hatchet-dev",
                  "path": "./staging/eks"
              },
              "values_raw": {
                  "property1": {},
                  "property2": {}
              }
          }
          headers = {
              "Authorization": "Bearer REPLACE_BEARER_TOKEN",
              "content-type": "application/json"
          }

          response = requests.request("POST", url, json=payload, headers=headers)

          print(response.text)
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\
          \n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"http://localhost:8080/api/v1/teams/322346f9-54b4-497d-bc9a-c54b5aaa4400/modules/322346f9-54b4-497d-bc9a-c54b5aaa4400\"\
          \n\n\tpayload := strings.NewReader(\"{\\\"env_vars\\\":{\\\"property1\\\"\
          :\\\"string\\\",\\\"property2\\\":\\\"string\\\"},\\\"github\\\":{\\\"github_app_installation_id\\\
          \":\\\"bb214807-246e-43a5-a25d-41761d1cff9e\\\",\\\"github_repository_branch\\\
          \":\\\"main\\\",\\\"github_repository_name\\\":\\\"infra\\\",\\\"github_repository_owner\\\
          \":\\\"hatchet-dev\\\",\\\"path\\\":\\\"./staging/eks\\\"},\\\"name\\\"\
          :\\\"string\\\",\\\"values_github\\\":{\\\"github_app_installation_id\\\"\
          :\\\"bb214807-246e-43a5-a25d-41761d1cff9e\\\",\\\"github_repository_branch\\\
          \":\\\"main\\\",\\\"github_repository_name\\\":\\\"infra\\\",\\\"github_repository_owner\\\
          \":\\\"hatchet-dev\\\",\\\"path\\\":\\\"./staging/eks\\\"},\\\"values_raw\\\
          \":{\\\"property1\\\":{},\\\"property2\\\":{}}}\")\n\n\treq, _ := http.NewRequest(\"\
          POST\", url, payload)\n\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\"\
          )\n\treq.Header.Add(\"content-type\", \"application/json\")\n\n\tres, _\
          \ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ :=\
          \ ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\
          \n}"
      x-codegen-request-body-name: UpdateModuleRequest
    delete:
      tags:
      - Modules
      summary: Delete Module
      description: Deletes a module.
      operationId: deleteModule
      parameters:
      - name: team_id
        in: path
        description: The team id
        required: true
        style: simple
        explode: false
        schema:
          type: string
          x-go-name: Team
        x-go-name: Team
      - name: module_id
        in: path
        description: The module id
        required: true
        style: simple
        explode: false
        schema:
          type: string
          x-go-name: Module
        x-go-name: Module
      responses:
        "200":
          description: Successfully deleted the module
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteModuleResponse'
        "400":
          description: A malformed or bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorBadRequestExample'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorForbiddenExample'
      x-codeSamples:
      - lang: Shell
        source: |-
          curl --request DELETE \
            --url http://localhost:8080/api/v1/teams/322346f9-54b4-497d-bc9a-c54b5aaa4400/modules/322346f9-54b4-497d-bc9a-c54b5aaa4400 \
            --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'
      - lang: Node
        source: |-
          const fetch = require('node-fetch');

          let url = 'http://localhost:8080/api/v1/teams/322346f9-54b4-497d-bc9a-c54b5aaa4400/modules/322346f9-54b4-497d-bc9a-c54b5aaa4400';

          let options = {method: 'DELETE', headers: {Authorization: 'Bearer REPLACE_BEARER_TOKEN'}};

          fetch(url, options)
            .then(res => res.json())
            .then(json => console.log(json))
            .catch(err => console.error('error:' + err));
      - lang: Ruby
        source: |-
          require 'uri'
          require 'net/http'

          url = URI("http://localhost:8080/api/v1/teams/322346f9-54b4-497d-bc9a-c54b5aaa4400/modules/322346f9-54b4-497d-bc9a-c54b5aaa4400")

          http = Net::HTTP.new(url.host, url.port)

          request = Net::HTTP::Delete.new(url)
          request["Authorization"] = 'Bearer REPLACE_BEARER_TOKEN'

          response = http.request(request)
          puts response.read_body
      - lang: Python
        source: |-
          import requests

          url = "http://localhost:8080/api/v1/teams/322346f9-54b4-497d-bc9a-c54b5aaa4400/modules/322346f9-54b4-497d-bc9a-c54b5aaa4400"

          headers = {"Authorization": "Bearer REPLACE_BEARER_TOKEN"}

          response = requests.request("DELETE", url, headers=headers)

          print(response.text)
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\
          \n)\n\nfunc main() {\n\n\turl := \"http://localhost:8080/api/v1/teams/322346f9-54b4-497d-bc9a-c54b5aaa4400/modules/322346f9-54b4-497d-bc9a-c54b5aaa4400\"\
          \n\n\treq, _ := http.NewRequest(\"DELETE\", url, nil)\n\n\treq.Header.Add(\"\
          Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
  /api/v1/teams/{team_id}/modules/{module_id}/env_vars/{module_env_vars_id}:
    get:
      tags:
      - Modules
      summary: Get Module Env Vars
      description: Gets the module env vars version by id.
      operationId: getModuleEnvVars
      parameters:
      - name: team_id
        in: path
        description: The team id
        required: true
        style: simple
        explode: false
        schema:
          type: string
          x-go-name: Team
        x-go-name: Team
      - name: module_id
        in: path
        description: The module id
        required: true
        style: simple
        explode: false
        schema:
          type: string
          x-go-name: Module
        x-go-name: Module
      - name: module_env_vars_id
        in: path
        description: The module env vars version id
        required: true
        style: simple
        explode: false
        schema:
          type: string
          x-go-name: ModuleEnvVar
        x-go-name: ModuleEnvVar
      responses:
        "200":
          description: Successfully got module env vars
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetModuleEnvVarsVersionResponse'
        "400":
          description: A malformed or bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorBadRequestExample'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorForbiddenExample'
      x-codeSamples:
      - lang: Shell
        source: |-
          curl --request GET \
            --url http://localhost:8080/api/v1/teams/322346f9-54b4-497d-bc9a-c54b5aaa4400/modules/322346f9-54b4-497d-bc9a-c54b5aaa4400/env_vars/322346f9-54b4-497d-bc9a-c54b5aaa4400 \
            --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'
      - lang: Node
        source: |-
          const fetch = require('node-fetch');

          let url = 'http://localhost:8080/api/v1/teams/322346f9-54b4-497d-bc9a-c54b5aaa4400/modules/322346f9-54b4-497d-bc9a-c54b5aaa4400/env_vars/322346f9-54b4-497d-bc9a-c54b5aaa4400';

          let options = {method: 'GET', headers: {Authorization: 'Bearer REPLACE_BEARER_TOKEN'}};

          fetch(url, options)
            .then(res => res.json())
            .then(json => console.log(json))
            .catch(err => console.error('error:' + err));
      - lang: Ruby
        source: |-
          require 'uri'
          require 'net/http'

          url = URI("http://localhost:8080/api/v1/teams/322346f9-54b4-497d-bc9a-c54b5aaa4400/modules/322346f9-54b4-497d-bc9a-c54b5aaa4400/env_vars/322346f9-54b4-497d-bc9a-c54b5aaa4400")

          http = Net::HTTP.new(url.host, url.port)

          request = Net::HTTP::Get.new(url)
          request["Authorization"] = 'Bearer REPLACE_BEARER_TOKEN'

          response = http.request(request)
          puts response.read_body
      - lang: Python
        source: |-
          import requests

          url = "http://localhost:8080/api/v1/teams/322346f9-54b4-497d-bc9a-c54b5aaa4400/modules/322346f9-54b4-497d-bc9a-c54b5aaa4400/env_vars/322346f9-54b4-497d-bc9a-c54b5aaa4400"

          headers = {"Authorization": "Bearer REPLACE_BEARER_TOKEN"}

          response = requests.request("GET", url, headers=headers)

          print(response.text)
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\
          \n)\n\nfunc main() {\n\n\turl := \"http://localhost:8080/api/v1/teams/322346f9-54b4-497d-bc9a-c54b5aaa4400/modules/322346f9-54b4-497d-bc9a-c54b5aaa4400/env_vars/322346f9-54b4-497d-bc9a-c54b5aaa4400\"\
          \n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"\
          Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
  /api/v1/teams/{team_id}/modules/{module_id}/force_unlock:
    post:
      tags:
      - Modules
      summary: Unlock Module
      description: Force unlocks a module.
      operationId: forceUnlockModule
      responses:
        "200":
          description: Successfully unlocked the module
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForceUnlockModuleResponse'
        "400":
          description: A malformed or bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorBadRequestExample'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorForbiddenExample'
      x-codeSamples:
      - lang: Shell
        source: |-
          curl --request POST \
            --url http://localhost:8080/api/v1/teams/{team_id}/modules/{module_id}/force_unlock \
            --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'
      - lang: Node
        source: |-
          const fetch = require('node-fetch');

          let url = 'http://localhost:8080/api/v1/teams/{team_id}/modules/{module_id}/force_unlock';

          let options = {method: 'POST', headers: {Authorization: 'Bearer REPLACE_BEARER_TOKEN'}};

          fetch(url, options)
            .then(res => res.json())
            .then(json => console.log(json))
            .catch(err => console.error('error:' + err));
      - lang: Ruby
        source: |-
          require 'uri'
          require 'net/http'

          url = URI("http://localhost:8080/api/v1/teams/{team_id}/modules/{module_id}/force_unlock")

          http = Net::HTTP.new(url.host, url.port)

          request = Net::HTTP::Post.new(url)
          request["Authorization"] = 'Bearer REPLACE_BEARER_TOKEN'

          response = http.request(request)
          puts response.read_body
      - lang: Python
        source: |-
          import requests

          url = "http://localhost:8080/api/v1/teams/{team_id}/modules/{module_id}/force_unlock"

          headers = {"Authorization": "Bearer REPLACE_BEARER_TOKEN"}

          response = requests.request("POST", url, headers=headers)

          print(response.text)
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\
          \n)\n\nfunc main() {\n\n\turl := \"http://localhost:8080/api/v1/teams/{team_id}/modules/{module_id}/force_unlock\"\
          \n\n\treq, _ := http.NewRequest(\"POST\", url, nil)\n\n\treq.Header.Add(\"\
          Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
  /api/v1/teams/{team_id}/modules/{module_id}/runs:
    get:
      tags:
      - Modules
      summary: List Module Runs
      description: Lists module runs for a given module id.
      operationId: listModuleRuns
      parameters:
      - name: page
        in: query
        description: The page to query for
        required: false
        style: form
        explode: true
        schema:
          type: integer
          format: int64
          x-go-name: Page
        x-go-name: Page
      - name: status
        in: query
        description: the status of the module run
        required: false
        style: form
        explode: true
        schema:
          type: string
          x-go-name: Status
        x-go-name: Status
      - name: team_id
        in: path
        description: The team id
        required: true
        style: simple
        explode: false
        schema:
          type: string
          x-go-name: Team
        x-go-name: Team
      - name: module_id
        in: path
        description: The module id
        required: true
        style: simple
        explode: false
        schema:
          type: string
          x-go-name: Module
        x-go-name: Module
      responses:
        "200":
          description: Successfully listed the module runs
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListModuleRunsResponse'
        "400":
          description: A malformed or bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorBadRequestExample'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorForbiddenExample'
      x-codeSamples:
      - lang: Shell
        source: |-
          curl --request GET \
            --url 'http://localhost:8080/api/v1/teams/322346f9-54b4-497d-bc9a-c54b5aaa4400/modules/322346f9-54b4-497d-bc9a-c54b5aaa4400/runs?page=2&status=SOME_STRING_VALUE' \
            --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'
      - lang: Node
        source: |-
          const fetch = require('node-fetch');

          let url = 'http://localhost:8080/api/v1/teams/322346f9-54b4-497d-bc9a-c54b5aaa4400/modules/322346f9-54b4-497d-bc9a-c54b5aaa4400/runs?page=2&status=SOME_STRING_VALUE';

          let options = {method: 'GET', headers: {Authorization: 'Bearer REPLACE_BEARER_TOKEN'}};

          fetch(url, options)
            .then(res => res.json())
            .then(json => console.log(json))
            .catch(err => console.error('error:' + err));
      - lang: Ruby
        source: |-
          require 'uri'
          require 'net/http'

          url = URI("http://localhost:8080/api/v1/teams/322346f9-54b4-497d-bc9a-c54b5aaa4400/modules/322346f9-54b4-497d-bc9a-c54b5aaa4400/runs?page=2&status=SOME_STRING_VALUE")

          http = Net::HTTP.new(url.host, url.port)

          request = Net::HTTP::Get.new(url)
          request["Authorization"] = 'Bearer REPLACE_BEARER_TOKEN'

          response = http.request(request)
          puts response.read_body
      - lang: Python
        source: |-
          import requests

          url = "http://localhost:8080/api/v1/teams/322346f9-54b4-497d-bc9a-c54b5aaa4400/modules/322346f9-54b4-497d-bc9a-c54b5aaa4400/runs"

          querystring = {"page":"2","status":"SOME_STRING_VALUE"}

          headers = {"Authorization": "Bearer REPLACE_BEARER_TOKEN"}

          response = requests.request("GET", url, headers=headers, params=querystring)

          print(response.text)
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\
          \n)\n\nfunc main() {\n\n\turl := \"http://localhost:8080/api/v1/teams/322346f9-54b4-497d-bc9a-c54b5aaa4400/modules/322346f9-54b4-497d-bc9a-c54b5aaa4400/runs?page=2&status=SOME_STRING_VALUE\"\
          \n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"\
          Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
    post:
      tags:
      - Modules
      summary: Create Module Run
      description: Creates a new module run.
      operationId: createModuleRun
      parameters:
      - name: team_id
        in: path
        description: The team id
        required: true
        style: simple
        explode: false
        schema:
          type: string
          x-go-name: Team
        x-go-name: Team
      - name: module_id
        in: path
        description: The module id
        required: true
        style: simple
        explode: false
        schema:
          type: string
          x-go-name: Module
        x-go-name: Module
      responses:
        "201":
          description: Successfully created the module
          content: {}
        "400":
          description: A malformed or bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorBadRequestExample'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorForbiddenExample'
      x-codeSamples:
      - lang: Shell
        source: |-
          curl --request POST \
            --url http://localhost:8080/api/v1/teams/322346f9-54b4-497d-bc9a-c54b5aaa4400/modules/322346f9-54b4-497d-bc9a-c54b5aaa4400/runs \
            --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'
      - lang: Node
        source: |-
          const fetch = require('node-fetch');

          let url = 'http://localhost:8080/api/v1/teams/322346f9-54b4-497d-bc9a-c54b5aaa4400/modules/322346f9-54b4-497d-bc9a-c54b5aaa4400/runs';

          let options = {method: 'POST', headers: {Authorization: 'Bearer REPLACE_BEARER_TOKEN'}};

          fetch(url, options)
            .then(res => res.json())
            .then(json => console.log(json))
            .catch(err => console.error('error:' + err));
      - lang: Ruby
        source: |-
          require 'uri'
          require 'net/http'

          url = URI("http://localhost:8080/api/v1/teams/322346f9-54b4-497d-bc9a-c54b5aaa4400/modules/322346f9-54b4-497d-bc9a-c54b5aaa4400/runs")

          http = Net::HTTP.new(url.host, url.port)

          request = Net::HTTP::Post.new(url)
          request["Authorization"] = 'Bearer REPLACE_BEARER_TOKEN'

          response = http.request(request)
          puts response.read_body
      - lang: Python
        source: |-
          import requests

          url = "http://localhost:8080/api/v1/teams/322346f9-54b4-497d-bc9a-c54b5aaa4400/modules/322346f9-54b4-497d-bc9a-c54b5aaa4400/runs"

          headers = {"Authorization": "Bearer REPLACE_BEARER_TOKEN"}

          response = requests.request("POST", url, headers=headers)

          print(response.text)
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\
          \n)\n\nfunc main() {\n\n\turl := \"http://localhost:8080/api/v1/teams/322346f9-54b4-497d-bc9a-c54b5aaa4400/modules/322346f9-54b4-497d-bc9a-c54b5aaa4400/runs\"\
          \n\n\treq, _ := http.NewRequest(\"POST\", url, nil)\n\n\treq.Header.Add(\"\
          Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
  /api/v1/teams/{team_id}/modules/{module_id}/runs/{module_run_id}:
    get:
      tags:
      - Modules
      summary: Get module run
      description: Gets a module run.
      operationId: getModuleRun
      parameters:
      - name: team_id
        in: path
        description: The team id
        required: true
        style: simple
        explode: false
        schema:
          type: string
          x-go-name: Team
        x-go-name: Team
      - name: module_id
        in: path
        description: The module id
        required: true
        style: simple
        explode: false
        schema:
          type: string
          x-go-name: Module
        x-go-name: Module
      - name: module_run_id
        in: path
        description: The module run id
        required: true
        style: simple
        explode: false
        schema:
          type: string
          x-go-name: Run
        x-go-name: Run
      responses:
        "200":
          description: Successfully got the module run
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetModuleRunResponse'
        "400":
          description: A malformed or bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorBadRequestExample'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorForbiddenExample'
        "423":
          description: Locked
          content: {}
      x-codeSamples:
      - lang: Shell
        source: |-
          curl --request GET \
            --url http://localhost:8080/api/v1/teams/322346f9-54b4-497d-bc9a-c54b5aaa4400/modules/322346f9-54b4-497d-bc9a-c54b5aaa4400/runs/322346f9-54b4-497d-bc9a-c54b5aaa4400 \
            --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'
      - lang: Node
        source: |-
          const fetch = require('node-fetch');

          let url = 'http://localhost:8080/api/v1/teams/322346f9-54b4-497d-bc9a-c54b5aaa4400/modules/322346f9-54b4-497d-bc9a-c54b5aaa4400/runs/322346f9-54b4-497d-bc9a-c54b5aaa4400';

          let options = {method: 'GET', headers: {Authorization: 'Bearer REPLACE_BEARER_TOKEN'}};

          fetch(url, options)
            .then(res => res.json())
            .then(json => console.log(json))
            .catch(err => console.error('error:' + err));
      - lang: Ruby
        source: |-
          require 'uri'
          require 'net/http'

          url = URI("http://localhost:8080/api/v1/teams/322346f9-54b4-497d-bc9a-c54b5aaa4400/modules/322346f9-54b4-497d-bc9a-c54b5aaa4400/runs/322346f9-54b4-497d-bc9a-c54b5aaa4400")

          http = Net::HTTP.new(url.host, url.port)

          request = Net::HTTP::Get.new(url)
          request["Authorization"] = 'Bearer REPLACE_BEARER_TOKEN'

          response = http.request(request)
          puts response.read_body
      - lang: Python
        source: |-
          import requests

          url = "http://localhost:8080/api/v1/teams/322346f9-54b4-497d-bc9a-c54b5aaa4400/modules/322346f9-54b4-497d-bc9a-c54b5aaa4400/runs/322346f9-54b4-497d-bc9a-c54b5aaa4400"

          headers = {"Authorization": "Bearer REPLACE_BEARER_TOKEN"}

          response = requests.request("GET", url, headers=headers)

          print(response.text)
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\
          \n)\n\nfunc main() {\n\n\turl := \"http://localhost:8080/api/v1/teams/322346f9-54b4-497d-bc9a-c54b5aaa4400/modules/322346f9-54b4-497d-bc9a-c54b5aaa4400/runs/322346f9-54b4-497d-bc9a-c54b5aaa4400\"\
          \n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"\
          Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
  /api/v1/teams/{team_id}/modules/{module_id}/runs/{module_run_id}/finalize:
    post:
      tags:
      - Modules
      summary: Finalize module run
      description: Updates a module run with a finalized status.
      operationId: finalizeModuleRun
      parameters:
      - name: team_id
        in: path
        description: The team id
        required: true
        style: simple
        explode: false
        schema:
          type: string
          x-go-name: Team
        x-go-name: Team
      - name: module_id
        in: path
        description: The module id
        required: true
        style: simple
        explode: false
        schema:
          type: string
          x-go-name: Module
        x-go-name: Module
      - name: module_run_id
        in: path
        description: The module run id
        required: true
        style: simple
        explode: false
        schema:
          type: string
          x-go-name: Run
        x-go-name: Run
      requestBody:
        description: The module run status to update
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/finalizeModuleRun_request'
        required: true
      responses:
        "200":
          description: Successfully updated the module run
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FinalizeModuleRunResponse'
        "400":
          description: A malformed or bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorBadRequestExample'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorForbiddenExample'
        "423":
          description: Locked
          content: {}
      x-codeSamples:
      - lang: Shell
        source: |-
          curl --request POST \
            --url http://localhost:8080/api/v1/teams/322346f9-54b4-497d-bc9a-c54b5aaa4400/modules/322346f9-54b4-497d-bc9a-c54b5aaa4400/runs/322346f9-54b4-497d-bc9a-c54b5aaa4400/finalize \
            --header 'Authorization: Bearer REPLACE_BEARER_TOKEN' \
            --header 'content-type: application/json' \
            --data '{"description":"string","status":"string"}'
      - lang: Node
        source: |-
          const fetch = require('node-fetch');

          let url = 'http://localhost:8080/api/v1/teams/322346f9-54b4-497d-bc9a-c54b5aaa4400/modules/322346f9-54b4-497d-bc9a-c54b5aaa4400/runs/322346f9-54b4-497d-bc9a-c54b5aaa4400/finalize';

          let options = {
            method: 'POST',
            headers: {
              Authorization: 'Bearer REPLACE_BEARER_TOKEN',
              'content-type': 'application/json'
            },
            body: '{"description":"string","status":"string"}'
          };

          fetch(url, options)
            .then(res => res.json())
            .then(json => console.log(json))
            .catch(err => console.error('error:' + err));
      - lang: Ruby
        source: |-
          require 'uri'
          require 'net/http'

          url = URI("http://localhost:8080/api/v1/teams/322346f9-54b4-497d-bc9a-c54b5aaa4400/modules/322346f9-54b4-497d-bc9a-c54b5aaa4400/runs/322346f9-54b4-497d-bc9a-c54b5aaa4400/finalize")

          http = Net::HTTP.new(url.host, url.port)

          request = Net::HTTP::Post.new(url)
          request["Authorization"] = 'Bearer REPLACE_BEARER_TOKEN'
          request["content-type"] = 'application/json'
          request.body = "{\"description\":\"string\",\"status\":\"string\"}"

          response = http.request(request)
          puts response.read_body
      - lang: Python
        source: |-
          import requests

          url = "http://localhost:8080/api/v1/teams/322346f9-54b4-497d-bc9a-c54b5aaa4400/modules/322346f9-54b4-497d-bc9a-c54b5aaa4400/runs/322346f9-54b4-497d-bc9a-c54b5aaa4400/finalize"

          payload = {
              "description": "string",
              "status": "string"
          }
          headers = {
              "Authorization": "Bearer REPLACE_BEARER_TOKEN",
              "content-type": "application/json"
          }

          response = requests.request("POST", url, json=payload, headers=headers)

          print(response.text)
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\
          \n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"http://localhost:8080/api/v1/teams/322346f9-54b4-497d-bc9a-c54b5aaa4400/modules/322346f9-54b4-497d-bc9a-c54b5aaa4400/runs/322346f9-54b4-497d-bc9a-c54b5aaa4400/finalize\"\
          \n\n\tpayload := strings.NewReader(\"{\\\"description\\\":\\\"string\\\"\
          ,\\\"status\\\":\\\"string\\\"}\")\n\n\treq, _ := http.NewRequest(\"POST\"\
          , url, payload)\n\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\"\
          )\n\treq.Header.Add(\"content-type\", \"application/json\")\n\n\tres, _\
          \ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ :=\
          \ ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\
          \n}"
      x-codegen-request-body-name: FinalizeModuleRunRequest
  /api/v1/teams/{team_id}/modules/{module_id}/runs/{module_run_id}/logs:
    get:
      tags:
      - Modules
      summary: Get logs
      description: Gets the logs for a module run.
      operationId: getModuleRunLogs
      parameters:
      - name: team_id
        in: path
        description: The team id
        required: true
        style: simple
        explode: false
        schema:
          type: string
          x-go-name: Team
        x-go-name: Team
      - name: module_id
        in: path
        description: The module id
        required: true
        style: simple
        explode: false
        schema:
          type: string
          x-go-name: Module
        x-go-name: Module
      - name: module_run_id
        in: path
        description: The module run id
        required: true
        style: simple
        explode: false
        schema:
          type: string
          x-go-name: Run
        x-go-name: Run
      responses:
        "200":
          description: Successfully got the logs
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetLogsResponse'
        "400":
          description: A malformed or bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorBadRequestExample'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorForbiddenExample'
        "423":
          description: Locked
          content: {}
      x-codeSamples:
      - lang: Shell
        source: |-
          curl --request GET \
            --url http://localhost:8080/api/v1/teams/322346f9-54b4-497d-bc9a-c54b5aaa4400/modules/322346f9-54b4-497d-bc9a-c54b5aaa4400/runs/322346f9-54b4-497d-bc9a-c54b5aaa4400/logs \
            --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'
      - lang: Node
        source: |-
          const fetch = require('node-fetch');

          let url = 'http://localhost:8080/api/v1/teams/322346f9-54b4-497d-bc9a-c54b5aaa4400/modules/322346f9-54b4-497d-bc9a-c54b5aaa4400/runs/322346f9-54b4-497d-bc9a-c54b5aaa4400/logs';

          let options = {method: 'GET', headers: {Authorization: 'Bearer REPLACE_BEARER_TOKEN'}};

          fetch(url, options)
            .then(res => res.json())
            .then(json => console.log(json))
            .catch(err => console.error('error:' + err));
      - lang: Ruby
        source: |-
          require 'uri'
          require 'net/http'

          url = URI("http://localhost:8080/api/v1/teams/322346f9-54b4-497d-bc9a-c54b5aaa4400/modules/322346f9-54b4-497d-bc9a-c54b5aaa4400/runs/322346f9-54b4-497d-bc9a-c54b5aaa4400/logs")

          http = Net::HTTP.new(url.host, url.port)

          request = Net::HTTP::Get.new(url)
          request["Authorization"] = 'Bearer REPLACE_BEARER_TOKEN'

          response = http.request(request)
          puts response.read_body
      - lang: Python
        source: |-
          import requests

          url = "http://localhost:8080/api/v1/teams/322346f9-54b4-497d-bc9a-c54b5aaa4400/modules/322346f9-54b4-497d-bc9a-c54b5aaa4400/runs/322346f9-54b4-497d-bc9a-c54b5aaa4400/logs"

          headers = {"Authorization": "Bearer REPLACE_BEARER_TOKEN"}

          response = requests.request("GET", url, headers=headers)

          print(response.text)
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\
          \n)\n\nfunc main() {\n\n\turl := \"http://localhost:8080/api/v1/teams/322346f9-54b4-497d-bc9a-c54b5aaa4400/modules/322346f9-54b4-497d-bc9a-c54b5aaa4400/runs/322346f9-54b4-497d-bc9a-c54b5aaa4400/logs\"\
          \n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"\
          Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
  /api/v1/teams/{team_id}/modules/{module_id}/runs/{module_run_id}/monitor_result:
    post:
      tags:
      - Modules
      summary: Create Monitor Result
      description: Reports a monitor result.
      operationId: createMonitorResult
      parameters:
      - name: team_id
        in: path
        description: The team id
        required: true
        style: simple
        explode: false
        schema:
          type: string
          x-go-name: Team
        x-go-name: Team
      - name: module_id
        in: path
        description: The module id
        required: true
        style: simple
        explode: false
        schema:
          type: string
          x-go-name: Module
        x-go-name: Module
      - name: module_run_id
        in: path
        description: The module run id
        required: true
        style: simple
        explode: false
        schema:
          type: string
          x-go-name: Run
        x-go-name: Run
      requestBody:
        description: The monitor result
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/createMonitorResult_request'
        required: true
      responses:
        "200":
          description: Successfully created the monitor result
          content: {}
        "400":
          description: A malformed or bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorBadRequestExample'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorForbiddenExample'
      x-codeSamples:
      - lang: Shell
        source: |-
          curl --request POST \
            --url http://localhost:8080/api/v1/teams/322346f9-54b4-497d-bc9a-c54b5aaa4400/modules/322346f9-54b4-497d-bc9a-c54b5aaa4400/runs/322346f9-54b4-497d-bc9a-c54b5aaa4400/monitor_result \
            --header 'Authorization: Bearer REPLACE_BEARER_TOKEN' \
            --header 'content-type: application/json' \
            --data '{"failure_messages":["string"],"monitor_id":"string","severity":"string","status":"string","success_message":"string","title":"string"}'
      - lang: Node
        source: |-
          const fetch = require('node-fetch');

          let url = 'http://localhost:8080/api/v1/teams/322346f9-54b4-497d-bc9a-c54b5aaa4400/modules/322346f9-54b4-497d-bc9a-c54b5aaa4400/runs/322346f9-54b4-497d-bc9a-c54b5aaa4400/monitor_result';

          let options = {
            method: 'POST',
            headers: {
              Authorization: 'Bearer REPLACE_BEARER_TOKEN',
              'content-type': 'application/json'
            },
            body: '{"failure_messages":["string"],"monitor_id":"string","severity":"string","status":"string","success_message":"string","title":"string"}'
          };

          fetch(url, options)
            .then(res => res.json())
            .then(json => console.log(json))
            .catch(err => console.error('error:' + err));
      - lang: Ruby
        source: |-
          require 'uri'
          require 'net/http'

          url = URI("http://localhost:8080/api/v1/teams/322346f9-54b4-497d-bc9a-c54b5aaa4400/modules/322346f9-54b4-497d-bc9a-c54b5aaa4400/runs/322346f9-54b4-497d-bc9a-c54b5aaa4400/monitor_result")

          http = Net::HTTP.new(url.host, url.port)

          request = Net::HTTP::Post.new(url)
          request["Authorization"] = 'Bearer REPLACE_BEARER_TOKEN'
          request["content-type"] = 'application/json'
          request.body = "{\"failure_messages\":[\"string\"],\"monitor_id\":\"string\",\"severity\":\"string\",\"status\":\"string\",\"success_message\":\"string\",\"title\":\"string\"}"

          response = http.request(request)
          puts response.read_body
      - lang: Python
        source: |-
          import requests

          url = "http://localhost:8080/api/v1/teams/322346f9-54b4-497d-bc9a-c54b5aaa4400/modules/322346f9-54b4-497d-bc9a-c54b5aaa4400/runs/322346f9-54b4-497d-bc9a-c54b5aaa4400/monitor_result"

          payload = {
              "failure_messages": ["string"],
              "monitor_id": "string",
              "severity": "string",
              "status": "string",
              "success_message": "string",
              "title": "string"
          }
          headers = {
              "Authorization": "Bearer REPLACE_BEARER_TOKEN",
              "content-type": "application/json"
          }

          response = requests.request("POST", url, json=payload, headers=headers)

          print(response.text)
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\
          \n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"http://localhost:8080/api/v1/teams/322346f9-54b4-497d-bc9a-c54b5aaa4400/modules/322346f9-54b4-497d-bc9a-c54b5aaa4400/runs/322346f9-54b4-497d-bc9a-c54b5aaa4400/monitor_result\"\
          \n\n\tpayload := strings.NewReader(\"{\\\"failure_messages\\\":[\\\"string\\\
          \"],\\\"monitor_id\\\":\\\"string\\\",\\\"severity\\\":\\\"string\\\",\\\
          \"status\\\":\\\"string\\\",\\\"success_message\\\":\\\"string\\\",\\\"\
          title\\\":\\\"string\\\"}\")\n\n\treq, _ := http.NewRequest(\"POST\", url,\
          \ payload)\n\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\"\
          )\n\treq.Header.Add(\"content-type\", \"application/json\")\n\n\tres, _\
          \ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ :=\
          \ ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\
          \n}"
      x-codegen-request-body-name: CreateMonitorResultRequest
  /api/v1/teams/{team_id}/modules/{module_id}/runs/{module_run_id}/plan:
    post:
      tags:
      - Modules
      summary: Create Terraform plan
      description: Creates a `POST` request for a Terraform plan. **Should only be
        called by Terraform in automation.**
      operationId: createTerraformPlan
      parameters:
      - name: team_id
        in: path
        description: The team id
        required: true
        style: simple
        explode: false
        schema:
          type: string
          x-go-name: Team
        x-go-name: Team
      - name: module_id
        in: path
        description: The module id
        required: true
        style: simple
        explode: false
        schema:
          type: string
          x-go-name: Module
        x-go-name: Module
      - name: module_run_id
        in: path
        description: The module run id
        required: true
        style: simple
        explode: false
        schema:
          type: string
          x-go-name: Run
        x-go-name: Run
      requestBody:
        description: The terraform plan contents
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/createTerraformPlan_request'
        required: true
      responses:
        "200":
          description: Successfully created the TF plan
          content: {}
        "400":
          description: A malformed or bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorBadRequestExample'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorForbiddenExample'
        "423":
          description: Locked
          content: {}
      x-codeSamples:
      - lang: Shell
        source: |-
          curl --request POST \
            --url http://localhost:8080/api/v1/teams/322346f9-54b4-497d-bc9a-c54b5aaa4400/modules/322346f9-54b4-497d-bc9a-c54b5aaa4400/runs/322346f9-54b4-497d-bc9a-c54b5aaa4400/plan \
            --header 'Authorization: Bearer REPLACE_BEARER_TOKEN' \
            --header 'content-type: application/json' \
            --data '{"plan_json":"string","plan_pretty":"string"}'
      - lang: Node
        source: |-
          const fetch = require('node-fetch');

          let url = 'http://localhost:8080/api/v1/teams/322346f9-54b4-497d-bc9a-c54b5aaa4400/modules/322346f9-54b4-497d-bc9a-c54b5aaa4400/runs/322346f9-54b4-497d-bc9a-c54b5aaa4400/plan';

          let options = {
            method: 'POST',
            headers: {
              Authorization: 'Bearer REPLACE_BEARER_TOKEN',
              'content-type': 'application/json'
            },
            body: '{"plan_json":"string","plan_pretty":"string"}'
          };

          fetch(url, options)
            .then(res => res.json())
            .then(json => console.log(json))
            .catch(err => console.error('error:' + err));
      - lang: Ruby
        source: |-
          require 'uri'
          require 'net/http'

          url = URI("http://localhost:8080/api/v1/teams/322346f9-54b4-497d-bc9a-c54b5aaa4400/modules/322346f9-54b4-497d-bc9a-c54b5aaa4400/runs/322346f9-54b4-497d-bc9a-c54b5aaa4400/plan")

          http = Net::HTTP.new(url.host, url.port)

          request = Net::HTTP::Post.new(url)
          request["Authorization"] = 'Bearer REPLACE_BEARER_TOKEN'
          request["content-type"] = 'application/json'
          request.body = "{\"plan_json\":\"string\",\"plan_pretty\":\"string\"}"

          response = http.request(request)
          puts response.read_body
      - lang: Python
        source: |-
          import requests

          url = "http://localhost:8080/api/v1/teams/322346f9-54b4-497d-bc9a-c54b5aaa4400/modules/322346f9-54b4-497d-bc9a-c54b5aaa4400/runs/322346f9-54b4-497d-bc9a-c54b5aaa4400/plan"

          payload = {
              "plan_json": "string",
              "plan_pretty": "string"
          }
          headers = {
              "Authorization": "Bearer REPLACE_BEARER_TOKEN",
              "content-type": "application/json"
          }

          response = requests.request("POST", url, json=payload, headers=headers)

          print(response.text)
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\
          \n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"http://localhost:8080/api/v1/teams/322346f9-54b4-497d-bc9a-c54b5aaa4400/modules/322346f9-54b4-497d-bc9a-c54b5aaa4400/runs/322346f9-54b4-497d-bc9a-c54b5aaa4400/plan\"\
          \n\n\tpayload := strings.NewReader(\"{\\\"plan_json\\\":\\\"string\\\",\\\
          \"plan_pretty\\\":\\\"string\\\"}\")\n\n\treq, _ := http.NewRequest(\"POST\"\
          , url, payload)\n\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\"\
          )\n\treq.Header.Add(\"content-type\", \"application/json\")\n\n\tres, _\
          \ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ :=\
          \ ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\
          \n}"
      x-codegen-request-body-name: CreateTerraformPlanRequest
  /api/v1/teams/{team_id}/modules/{module_id}/runs/{module_run_id}/plan_summary:
    get:
      tags:
      - Modules
      summary: Get plan summary
      description: Gets the plan summary for a module run.
      operationId: getModuleRunPlanSummary
      responses:
        "200":
          description: Successfully got the plan summary
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetModulePlanSummaryResponse'
        "400":
          description: A malformed or bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorBadRequestExample'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorForbiddenExample'
        "423":
          description: Locked
          content: {}
      x-codeSamples:
      - lang: Shell
        source: |-
          curl --request GET \
            --url http://localhost:8080/api/v1/teams/{team_id}/modules/{module_id}/runs/{module_run_id}/plan_summary \
            --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'
      - lang: Node
        source: |-
          const fetch = require('node-fetch');

          let url = 'http://localhost:8080/api/v1/teams/{team_id}/modules/{module_id}/runs/{module_run_id}/plan_summary';

          let options = {method: 'GET', headers: {Authorization: 'Bearer REPLACE_BEARER_TOKEN'}};

          fetch(url, options)
            .then(res => res.json())
            .then(json => console.log(json))
            .catch(err => console.error('error:' + err));
      - lang: Ruby
        source: |-
          require 'uri'
          require 'net/http'

          url = URI("http://localhost:8080/api/v1/teams/{team_id}/modules/{module_id}/runs/{module_run_id}/plan_summary")

          http = Net::HTTP.new(url.host, url.port)

          request = Net::HTTP::Get.new(url)
          request["Authorization"] = 'Bearer REPLACE_BEARER_TOKEN'

          response = http.request(request)
          puts response.read_body
      - lang: Python
        source: |-
          import requests

          url = "http://localhost:8080/api/v1/teams/{team_id}/modules/{module_id}/runs/{module_run_id}/plan_summary"

          headers = {"Authorization": "Bearer REPLACE_BEARER_TOKEN"}

          response = requests.request("GET", url, headers=headers)

          print(response.text)
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\
          \n)\n\nfunc main() {\n\n\turl := \"http://localhost:8080/api/v1/teams/{team_id}/modules/{module_id}/runs/{module_run_id}/plan_summary\"\
          \n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"\
          Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
  /api/v1/teams/{team_id}/modules/{module_id}/runs/{module_run_id}/tfstate:
    get:
      tags:
      - Modules
      summary: Create or Update Terraform State
      description: Creates a `GET` request for Terraform state. **Should only be called
        by Terraform in automation.**
      operationId: getTerraformState
      parameters:
      - name: team_id
        in: path
        description: The team id
        required: true
        style: simple
        explode: false
        schema:
          type: string
          x-go-name: Team
        x-go-name: Team
      - name: module_id
        in: path
        description: The module id
        required: true
        style: simple
        explode: false
        schema:
          type: string
          x-go-name: Module
        x-go-name: Module
      - name: module_run_id
        in: path
        description: The module run id
        required: true
        style: simple
        explode: false
        schema:
          type: string
          x-go-name: Run
        x-go-name: Run
      responses:
        "200":
          description: Successfully got the TF state
          content: {}
        "400":
          description: A malformed or bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorBadRequestExample'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorForbiddenExample'
      x-codeSamples:
      - lang: Shell
        source: |-
          curl --request GET \
            --url http://localhost:8080/api/v1/teams/322346f9-54b4-497d-bc9a-c54b5aaa4400/modules/322346f9-54b4-497d-bc9a-c54b5aaa4400/runs/322346f9-54b4-497d-bc9a-c54b5aaa4400/tfstate \
            --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'
      - lang: Node
        source: |-
          const fetch = require('node-fetch');

          let url = 'http://localhost:8080/api/v1/teams/322346f9-54b4-497d-bc9a-c54b5aaa4400/modules/322346f9-54b4-497d-bc9a-c54b5aaa4400/runs/322346f9-54b4-497d-bc9a-c54b5aaa4400/tfstate';

          let options = {method: 'GET', headers: {Authorization: 'Bearer REPLACE_BEARER_TOKEN'}};

          fetch(url, options)
            .then(res => res.json())
            .then(json => console.log(json))
            .catch(err => console.error('error:' + err));
      - lang: Ruby
        source: |-
          require 'uri'
          require 'net/http'

          url = URI("http://localhost:8080/api/v1/teams/322346f9-54b4-497d-bc9a-c54b5aaa4400/modules/322346f9-54b4-497d-bc9a-c54b5aaa4400/runs/322346f9-54b4-497d-bc9a-c54b5aaa4400/tfstate")

          http = Net::HTTP.new(url.host, url.port)

          request = Net::HTTP::Get.new(url)
          request["Authorization"] = 'Bearer REPLACE_BEARER_TOKEN'

          response = http.request(request)
          puts response.read_body
      - lang: Python
        source: |-
          import requests

          url = "http://localhost:8080/api/v1/teams/322346f9-54b4-497d-bc9a-c54b5aaa4400/modules/322346f9-54b4-497d-bc9a-c54b5aaa4400/runs/322346f9-54b4-497d-bc9a-c54b5aaa4400/tfstate"

          headers = {"Authorization": "Bearer REPLACE_BEARER_TOKEN"}

          response = requests.request("GET", url, headers=headers)

          print(response.text)
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\
          \n)\n\nfunc main() {\n\n\turl := \"http://localhost:8080/api/v1/teams/322346f9-54b4-497d-bc9a-c54b5aaa4400/modules/322346f9-54b4-497d-bc9a-c54b5aaa4400/runs/322346f9-54b4-497d-bc9a-c54b5aaa4400/tfstate\"\
          \n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"\
          Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
    post:
      tags:
      - Modules
      summary: Create or Update Terraform State
      description: Creates a `POST` request for Terraform state. **Should only be
        called by Terraform in automation.**
      operationId: createTerraformState
      parameters:
      - name: team_id
        in: path
        description: The team id
        required: true
        style: simple
        explode: false
        schema:
          type: string
          x-go-name: Team
        x-go-name: Team
      - name: module_id
        in: path
        description: The module id
        required: true
        style: simple
        explode: false
        schema:
          type: string
          x-go-name: Module
        x-go-name: Module
      - name: module_run_id
        in: path
        description: The module run id
        required: true
        style: simple
        explode: false
        schema:
          type: string
          x-go-name: Run
        x-go-name: Run
      responses:
        "200":
          description: Successfully got the TF state
          content: {}
        "400":
          description: A malformed or bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorBadRequestExample'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorForbiddenExample'
        "423":
          description: Locked
          content: {}
      x-codeSamples:
      - lang: Shell
        source: |-
          curl --request POST \
            --url http://localhost:8080/api/v1/teams/322346f9-54b4-497d-bc9a-c54b5aaa4400/modules/322346f9-54b4-497d-bc9a-c54b5aaa4400/runs/322346f9-54b4-497d-bc9a-c54b5aaa4400/tfstate \
            --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'
      - lang: Node
        source: |-
          const fetch = require('node-fetch');

          let url = 'http://localhost:8080/api/v1/teams/322346f9-54b4-497d-bc9a-c54b5aaa4400/modules/322346f9-54b4-497d-bc9a-c54b5aaa4400/runs/322346f9-54b4-497d-bc9a-c54b5aaa4400/tfstate';

          let options = {method: 'POST', headers: {Authorization: 'Bearer REPLACE_BEARER_TOKEN'}};

          fetch(url, options)
            .then(res => res.json())
            .then(json => console.log(json))
            .catch(err => console.error('error:' + err));
      - lang: Ruby
        source: |-
          require 'uri'
          require 'net/http'

          url = URI("http://localhost:8080/api/v1/teams/322346f9-54b4-497d-bc9a-c54b5aaa4400/modules/322346f9-54b4-497d-bc9a-c54b5aaa4400/runs/322346f9-54b4-497d-bc9a-c54b5aaa4400/tfstate")

          http = Net::HTTP.new(url.host, url.port)

          request = Net::HTTP::Post.new(url)
          request["Authorization"] = 'Bearer REPLACE_BEARER_TOKEN'

          response = http.request(request)
          puts response.read_body
      - lang: Python
        source: |-
          import requests

          url = "http://localhost:8080/api/v1/teams/322346f9-54b4-497d-bc9a-c54b5aaa4400/modules/322346f9-54b4-497d-bc9a-c54b5aaa4400/runs/322346f9-54b4-497d-bc9a-c54b5aaa4400/tfstate"

          headers = {"Authorization": "Bearer REPLACE_BEARER_TOKEN"}

          response = requests.request("POST", url, headers=headers)

          print(response.text)
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\
          \n)\n\nfunc main() {\n\n\turl := \"http://localhost:8080/api/v1/teams/322346f9-54b4-497d-bc9a-c54b5aaa4400/modules/322346f9-54b4-497d-bc9a-c54b5aaa4400/runs/322346f9-54b4-497d-bc9a-c54b5aaa4400/tfstate\"\
          \n\n\treq, _ := http.NewRequest(\"POST\", url, nil)\n\n\treq.Header.Add(\"\
          Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
  /api/v1/teams/{team_id}/modules/{module_id}/tarball_url:
    get:
      tags:
      - Modules
      summary: Get Module Tarball URL
      description: Gets the Github tarball URL for the module.
      operationId: getModuleTarballURL
      parameters:
      - name: github_sha
        in: query
        description: |-
          the SHA to get the tarball from
          name: github_sha
        required: false
        style: form
        explode: true
        schema:
          type: string
          x-go-name: GithubSHA
        x-go-name: GithubSHA
      - name: team_id
        in: path
        description: The team id
        required: true
        style: simple
        explode: false
        schema:
          type: string
          x-go-name: Team
        x-go-name: Team
      - name: module_id
        in: path
        description: The module id
        required: true
        style: simple
        explode: false
        schema:
          type: string
          x-go-name: Module
        x-go-name: Module
      responses:
        "200":
          description: Successfully got tarball url
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetModuleTarballURLResponse'
        "400":
          description: A malformed or bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorBadRequestExample'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorForbiddenExample'
      x-codeSamples:
      - lang: Shell
        source: |-
          curl --request GET \
            --url 'http://localhost:8080/api/v1/teams/322346f9-54b4-497d-bc9a-c54b5aaa4400/modules/322346f9-54b4-497d-bc9a-c54b5aaa4400/tarball_url?github_sha=SOME_STRING_VALUE' \
            --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'
      - lang: Node
        source: |-
          const fetch = require('node-fetch');

          let url = 'http://localhost:8080/api/v1/teams/322346f9-54b4-497d-bc9a-c54b5aaa4400/modules/322346f9-54b4-497d-bc9a-c54b5aaa4400/tarball_url?github_sha=SOME_STRING_VALUE';

          let options = {method: 'GET', headers: {Authorization: 'Bearer REPLACE_BEARER_TOKEN'}};

          fetch(url, options)
            .then(res => res.json())
            .then(json => console.log(json))
            .catch(err => console.error('error:' + err));
      - lang: Ruby
        source: |-
          require 'uri'
          require 'net/http'

          url = URI("http://localhost:8080/api/v1/teams/322346f9-54b4-497d-bc9a-c54b5aaa4400/modules/322346f9-54b4-497d-bc9a-c54b5aaa4400/tarball_url?github_sha=SOME_STRING_VALUE")

          http = Net::HTTP.new(url.host, url.port)

          request = Net::HTTP::Get.new(url)
          request["Authorization"] = 'Bearer REPLACE_BEARER_TOKEN'

          response = http.request(request)
          puts response.read_body
      - lang: Python
        source: |-
          import requests

          url = "http://localhost:8080/api/v1/teams/322346f9-54b4-497d-bc9a-c54b5aaa4400/modules/322346f9-54b4-497d-bc9a-c54b5aaa4400/tarball_url"

          querystring = {"github_sha":"SOME_STRING_VALUE"}

          headers = {"Authorization": "Bearer REPLACE_BEARER_TOKEN"}

          response = requests.request("GET", url, headers=headers, params=querystring)

          print(response.text)
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\
          \n)\n\nfunc main() {\n\n\turl := \"http://localhost:8080/api/v1/teams/322346f9-54b4-497d-bc9a-c54b5aaa4400/modules/322346f9-54b4-497d-bc9a-c54b5aaa4400/tarball_url?github_sha=SOME_STRING_VALUE\"\
          \n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"\
          Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
  /api/v1/teams/{team_id}/modules/{module_id}/values/{module_values_id}:
    get:
      tags:
      - Modules
      summary: Get Module Values
      description: Gets the current module values by ID.
      operationId: getModuleValues
      responses:
        "200":
          description: Successfully got module values
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetModuleValuesResponse'
        "400":
          description: A malformed or bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorBadRequestExample'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorForbiddenExample'
      x-codeSamples:
      - lang: Shell
        source: |-
          curl --request GET \
            --url http://localhost:8080/api/v1/teams/{team_id}/modules/{module_id}/values/{module_values_id} \
            --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'
      - lang: Node
        source: |-
          const fetch = require('node-fetch');

          let url = 'http://localhost:8080/api/v1/teams/{team_id}/modules/{module_id}/values/{module_values_id}';

          let options = {method: 'GET', headers: {Authorization: 'Bearer REPLACE_BEARER_TOKEN'}};

          fetch(url, options)
            .then(res => res.json())
            .then(json => console.log(json))
            .catch(err => console.error('error:' + err));
      - lang: Ruby
        source: |-
          require 'uri'
          require 'net/http'

          url = URI("http://localhost:8080/api/v1/teams/{team_id}/modules/{module_id}/values/{module_values_id}")

          http = Net::HTTP.new(url.host, url.port)

          request = Net::HTTP::Get.new(url)
          request["Authorization"] = 'Bearer REPLACE_BEARER_TOKEN'

          response = http.request(request)
          puts response.read_body
      - lang: Python
        source: |-
          import requests

          url = "http://localhost:8080/api/v1/teams/{team_id}/modules/{module_id}/values/{module_values_id}"

          headers = {"Authorization": "Bearer REPLACE_BEARER_TOKEN"}

          response = requests.request("GET", url, headers=headers)

          print(response.text)
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\
          \n)\n\nfunc main() {\n\n\turl := \"http://localhost:8080/api/v1/teams/{team_id}/modules/{module_id}/values/{module_values_id}\"\
          \n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"\
          Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
  /api/v1/teams/{team_id}/modules/{module_id}/values/current:
    get:
      tags:
      - Modules
      summary: Get Current Module Values
      description: "Gets the current module values for the given module, by github\
        \ reference or SHA."
      operationId: getCurrentModuleValues
      parameters:
      - name: github_sha
        in: query
        description: |-
          the SHA to get the module values file from
          name: github_sha
        required: false
        style: form
        explode: true
        schema:
          type: string
          x-go-name: GithubSHA
        x-go-name: GithubSHA
      - name: team_id
        in: path
        description: The team id
        required: true
        style: simple
        explode: false
        schema:
          type: string
          x-go-name: Team
        x-go-name: Team
      - name: module_id
        in: path
        description: The module id
        required: true
        style: simple
        explode: false
        schema:
          type: string
          x-go-name: Module
        x-go-name: Module
      responses:
        "200":
          description: Successfully got module values
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetModuleValuesCurrentResponse'
        "400":
          description: A malformed or bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorBadRequestExample'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorForbiddenExample'
      x-codeSamples:
      - lang: Shell
        source: |-
          curl --request GET \
            --url 'http://localhost:8080/api/v1/teams/322346f9-54b4-497d-bc9a-c54b5aaa4400/modules/322346f9-54b4-497d-bc9a-c54b5aaa4400/values/current?github_sha=SOME_STRING_VALUE' \
            --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'
      - lang: Node
        source: |-
          const fetch = require('node-fetch');

          let url = 'http://localhost:8080/api/v1/teams/322346f9-54b4-497d-bc9a-c54b5aaa4400/modules/322346f9-54b4-497d-bc9a-c54b5aaa4400/values/current?github_sha=SOME_STRING_VALUE';

          let options = {method: 'GET', headers: {Authorization: 'Bearer REPLACE_BEARER_TOKEN'}};

          fetch(url, options)
            .then(res => res.json())
            .then(json => console.log(json))
            .catch(err => console.error('error:' + err));
      - lang: Ruby
        source: |-
          require 'uri'
          require 'net/http'

          url = URI("http://localhost:8080/api/v1/teams/322346f9-54b4-497d-bc9a-c54b5aaa4400/modules/322346f9-54b4-497d-bc9a-c54b5aaa4400/values/current?github_sha=SOME_STRING_VALUE")

          http = Net::HTTP.new(url.host, url.port)

          request = Net::HTTP::Get.new(url)
          request["Authorization"] = 'Bearer REPLACE_BEARER_TOKEN'

          response = http.request(request)
          puts response.read_body
      - lang: Python
        source: |-
          import requests

          url = "http://localhost:8080/api/v1/teams/322346f9-54b4-497d-bc9a-c54b5aaa4400/modules/322346f9-54b4-497d-bc9a-c54b5aaa4400/values/current"

          querystring = {"github_sha":"SOME_STRING_VALUE"}

          headers = {"Authorization": "Bearer REPLACE_BEARER_TOKEN"}

          response = requests.request("GET", url, headers=headers, params=querystring)

          print(response.text)
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\
          \n)\n\nfunc main() {\n\n\turl := \"http://localhost:8080/api/v1/teams/322346f9-54b4-497d-bc9a-c54b5aaa4400/modules/322346f9-54b4-497d-bc9a-c54b5aaa4400/values/current?github_sha=SOME_STRING_VALUE\"\
          \n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"\
          Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
  /api/v1/teams/{team_id}/monitor_results:
    get:
      tags:
      - Monitors
      summary: List Monitor Results
      description: "Lists monitor results for a given team, optionally filtered by\
        \ module or monitor id."
      operationId: listMonitorResults
      parameters:
      - name: page
        in: query
        description: The page to query for
        required: false
        style: form
        explode: true
        schema:
          type: integer
          format: int64
          x-go-name: Page
        x-go-name: Page
      - name: module_monitor_id
        in: query
        description: The monitor id to filter by
        required: false
        style: form
        explode: true
        schema:
          type: string
          x-go-name: ModuleMonitorID
        x-go-name: ModuleMonitorID
      - name: module_id
        in: query
        description: The module id to filter by
        required: false
        style: form
        explode: true
        schema:
          type: string
          x-go-name: ModuleID
        x-go-name: ModuleID
      responses:
        "200":
          description: Successfully listed monitor results
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListMonitorResultsResponse'
        "400":
          description: A malformed or bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorBadRequestExample'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorForbiddenExample'
      x-codeSamples:
      - lang: Shell
        source: |-
          curl --request GET \
            --url 'http://localhost:8080/api/v1/teams/{team_id}/monitor_results?page=2&module_monitor_id=322346f9-54b4-497d-bc9a-c54b5aaa4400&module_id=322346f9-54b4-497d-bc9a-c54b5aaa4400' \
            --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'
      - lang: Node
        source: |-
          const fetch = require('node-fetch');

          let url = 'http://localhost:8080/api/v1/teams/{team_id}/monitor_results?page=2&module_monitor_id=322346f9-54b4-497d-bc9a-c54b5aaa4400&module_id=322346f9-54b4-497d-bc9a-c54b5aaa4400';

          let options = {method: 'GET', headers: {Authorization: 'Bearer REPLACE_BEARER_TOKEN'}};

          fetch(url, options)
            .then(res => res.json())
            .then(json => console.log(json))
            .catch(err => console.error('error:' + err));
      - lang: Ruby
        source: |-
          require 'uri'
          require 'net/http'

          url = URI("http://localhost:8080/api/v1/teams/{team_id}/monitor_results?page=2&module_monitor_id=322346f9-54b4-497d-bc9a-c54b5aaa4400&module_id=322346f9-54b4-497d-bc9a-c54b5aaa4400")

          http = Net::HTTP.new(url.host, url.port)

          request = Net::HTTP::Get.new(url)
          request["Authorization"] = 'Bearer REPLACE_BEARER_TOKEN'

          response = http.request(request)
          puts response.read_body
      - lang: Python
        source: |-
          import requests

          url = "http://localhost:8080/api/v1/teams/{team_id}/monitor_results"

          querystring = {"page":"2","module_monitor_id":"322346f9-54b4-497d-bc9a-c54b5aaa4400","module_id":"322346f9-54b4-497d-bc9a-c54b5aaa4400"}

          headers = {"Authorization": "Bearer REPLACE_BEARER_TOKEN"}

          response = requests.request("GET", url, headers=headers, params=querystring)

          print(response.text)
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\
          \n)\n\nfunc main() {\n\n\turl := \"http://localhost:8080/api/v1/teams/{team_id}/monitor_results?page=2&module_monitor_id=322346f9-54b4-497d-bc9a-c54b5aaa4400&module_id=322346f9-54b4-497d-bc9a-c54b5aaa4400\"\
          \n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"\
          Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
  /api/v1/teams/{team_id}/monitors:
    get:
      tags:
      - Monitors
      summary: List Monitors
      description: Lists monitors for a given team.
      operationId: listMonitors
      parameters:
      - name: page
        in: query
        description: The page to query for
        required: false
        style: form
        explode: true
        schema:
          type: integer
          format: int64
          x-go-name: Page
        x-go-name: Page
      - name: team_id
        in: path
        description: The team id
        required: true
        style: simple
        explode: false
        schema:
          type: string
          x-go-name: Team
        x-go-name: Team
      responses:
        "200":
          description: Successfully listed monitors
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListMonitorsResponse'
        "400":
          description: A malformed or bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorBadRequestExample'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorForbiddenExample'
      x-codeSamples:
      - lang: Shell
        source: |-
          curl --request GET \
            --url 'http://localhost:8080/api/v1/teams/322346f9-54b4-497d-bc9a-c54b5aaa4400/monitors?page=2' \
            --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'
      - lang: Node
        source: |-
          const fetch = require('node-fetch');

          let url = 'http://localhost:8080/api/v1/teams/322346f9-54b4-497d-bc9a-c54b5aaa4400/monitors?page=2';

          let options = {method: 'GET', headers: {Authorization: 'Bearer REPLACE_BEARER_TOKEN'}};

          fetch(url, options)
            .then(res => res.json())
            .then(json => console.log(json))
            .catch(err => console.error('error:' + err));
      - lang: Ruby
        source: |-
          require 'uri'
          require 'net/http'

          url = URI("http://localhost:8080/api/v1/teams/322346f9-54b4-497d-bc9a-c54b5aaa4400/monitors?page=2")

          http = Net::HTTP.new(url.host, url.port)

          request = Net::HTTP::Get.new(url)
          request["Authorization"] = 'Bearer REPLACE_BEARER_TOKEN'

          response = http.request(request)
          puts response.read_body
      - lang: Python
        source: |-
          import requests

          url = "http://localhost:8080/api/v1/teams/322346f9-54b4-497d-bc9a-c54b5aaa4400/monitors"

          querystring = {"page":"2"}

          headers = {"Authorization": "Bearer REPLACE_BEARER_TOKEN"}

          response = requests.request("GET", url, headers=headers, params=querystring)

          print(response.text)
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\
          \n)\n\nfunc main() {\n\n\turl := \"http://localhost:8080/api/v1/teams/322346f9-54b4-497d-bc9a-c54b5aaa4400/monitors?page=2\"\
          \n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"\
          Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
    post:
      tags:
      - Monitors
      summary: Create Monitor
      description: Creates a new monitor.
      operationId: createMonitor
      parameters:
      - name: team_id
        in: path
        description: The team id
        required: true
        style: simple
        explode: false
        schema:
          type: string
          x-go-name: Team
        x-go-name: Team
      requestBody:
        description: The monitor to create
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/createMonitor_request'
        required: false
      responses:
        "200":
          description: Successfully created the monitor
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateMonitorResponse'
        "400":
          description: A malformed or bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorBadRequestExample'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorForbiddenExample'
      x-codeSamples:
      - lang: Shell
        source: |-
          curl --request POST \
            --url http://localhost:8080/api/v1/teams/322346f9-54b4-497d-bc9a-c54b5aaa4400/monitors \
            --header 'Authorization: Bearer REPLACE_BEARER_TOKEN' \
            --header 'content-type: application/json' \
            --data '{"cron_schedule":"string","description":"string","disabled":true,"kind":"string","modules":["string"],"name":"string","policy_bytes":"string"}'
      - lang: Node
        source: |-
          const fetch = require('node-fetch');

          let url = 'http://localhost:8080/api/v1/teams/322346f9-54b4-497d-bc9a-c54b5aaa4400/monitors';

          let options = {
            method: 'POST',
            headers: {
              Authorization: 'Bearer REPLACE_BEARER_TOKEN',
              'content-type': 'application/json'
            },
            body: '{"cron_schedule":"string","description":"string","disabled":true,"kind":"string","modules":["string"],"name":"string","policy_bytes":"string"}'
          };

          fetch(url, options)
            .then(res => res.json())
            .then(json => console.log(json))
            .catch(err => console.error('error:' + err));
      - lang: Ruby
        source: |-
          require 'uri'
          require 'net/http'

          url = URI("http://localhost:8080/api/v1/teams/322346f9-54b4-497d-bc9a-c54b5aaa4400/monitors")

          http = Net::HTTP.new(url.host, url.port)

          request = Net::HTTP::Post.new(url)
          request["Authorization"] = 'Bearer REPLACE_BEARER_TOKEN'
          request["content-type"] = 'application/json'
          request.body = "{\"cron_schedule\":\"string\",\"description\":\"string\",\"disabled\":true,\"kind\":\"string\",\"modules\":[\"string\"],\"name\":\"string\",\"policy_bytes\":\"string\"}"

          response = http.request(request)
          puts response.read_body
      - lang: Python
        source: |-
          import requests

          url = "http://localhost:8080/api/v1/teams/322346f9-54b4-497d-bc9a-c54b5aaa4400/monitors"

          payload = {
              "cron_schedule": "string",
              "description": "string",
              "disabled": True,
              "kind": "string",
              "modules": ["string"],
              "name": "string",
              "policy_bytes": "string"
          }
          headers = {
              "Authorization": "Bearer REPLACE_BEARER_TOKEN",
              "content-type": "application/json"
          }

          response = requests.request("POST", url, json=payload, headers=headers)

          print(response.text)
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\
          \n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"http://localhost:8080/api/v1/teams/322346f9-54b4-497d-bc9a-c54b5aaa4400/monitors\"\
          \n\n\tpayload := strings.NewReader(\"{\\\"cron_schedule\\\":\\\"string\\\
          \",\\\"description\\\":\\\"string\\\",\\\"disabled\\\":true,\\\"kind\\\"\
          :\\\"string\\\",\\\"modules\\\":[\\\"string\\\"],\\\"name\\\":\\\"string\\\
          \",\\\"policy_bytes\\\":\\\"string\\\"}\")\n\n\treq, _ := http.NewRequest(\"\
          POST\", url, payload)\n\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\"\
          )\n\treq.Header.Add(\"content-type\", \"application/json\")\n\n\tres, _\
          \ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ :=\
          \ ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\
          \n}"
      x-codegen-request-body-name: CreateMonitorRequest
  /api/v1/teams/{team_id}/monitors/{monitor_id}:
    get:
      tags:
      - Monitors
      summary: Get Monitor
      description: Gets a monitor by id.
      operationId: getMonitor
      parameters:
      - name: team_id
        in: path
        description: The team id
        required: true
        style: simple
        explode: false
        schema:
          type: string
          x-go-name: Team
        x-go-name: Team
      - name: monitor_id
        in: path
        description: The monitor id
        required: true
        style: simple
        explode: false
        schema:
          type: string
          x-go-name: Monitor
        x-go-name: Monitor
      responses:
        "200":
          description: Successfully got the monitor
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetMonitorResponse'
        "400":
          description: A malformed or bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorBadRequestExample'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorForbiddenExample'
      x-codeSamples:
      - lang: Shell
        source: |-
          curl --request GET \
            --url http://localhost:8080/api/v1/teams/322346f9-54b4-497d-bc9a-c54b5aaa4400/monitors/322346f9-54b4-497d-bc9a-c54b5aaa4400 \
            --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'
      - lang: Node
        source: |-
          const fetch = require('node-fetch');

          let url = 'http://localhost:8080/api/v1/teams/322346f9-54b4-497d-bc9a-c54b5aaa4400/monitors/322346f9-54b4-497d-bc9a-c54b5aaa4400';

          let options = {method: 'GET', headers: {Authorization: 'Bearer REPLACE_BEARER_TOKEN'}};

          fetch(url, options)
            .then(res => res.json())
            .then(json => console.log(json))
            .catch(err => console.error('error:' + err));
      - lang: Ruby
        source: |-
          require 'uri'
          require 'net/http'

          url = URI("http://localhost:8080/api/v1/teams/322346f9-54b4-497d-bc9a-c54b5aaa4400/monitors/322346f9-54b4-497d-bc9a-c54b5aaa4400")

          http = Net::HTTP.new(url.host, url.port)

          request = Net::HTTP::Get.new(url)
          request["Authorization"] = 'Bearer REPLACE_BEARER_TOKEN'

          response = http.request(request)
          puts response.read_body
      - lang: Python
        source: |-
          import requests

          url = "http://localhost:8080/api/v1/teams/322346f9-54b4-497d-bc9a-c54b5aaa4400/monitors/322346f9-54b4-497d-bc9a-c54b5aaa4400"

          headers = {"Authorization": "Bearer REPLACE_BEARER_TOKEN"}

          response = requests.request("GET", url, headers=headers)

          print(response.text)
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\
          \n)\n\nfunc main() {\n\n\turl := \"http://localhost:8080/api/v1/teams/322346f9-54b4-497d-bc9a-c54b5aaa4400/monitors/322346f9-54b4-497d-bc9a-c54b5aaa4400\"\
          \n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"\
          Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
    post:
      tags:
      - Monitors
      summary: Update Monitor
      description: Updates a monitor.
      operationId: updateMonitor
      parameters:
      - name: team_id
        in: path
        description: The team id
        required: true
        style: simple
        explode: false
        schema:
          type: string
          x-go-name: Team
        x-go-name: Team
      - name: monitor_id
        in: path
        description: The monitor id
        required: true
        style: simple
        explode: false
        schema:
          type: string
          x-go-name: Monitor
        x-go-name: Monitor
      requestBody:
        description: The monitor to update
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/createMonitor_request'
        required: false
      responses:
        "200":
          description: Successfully updated the monitor
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateMonitorResponse'
        "400":
          description: A malformed or bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorBadRequestExample'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorForbiddenExample'
      x-codeSamples:
      - lang: Shell
        source: |-
          curl --request POST \
            --url http://localhost:8080/api/v1/teams/322346f9-54b4-497d-bc9a-c54b5aaa4400/monitors/322346f9-54b4-497d-bc9a-c54b5aaa4400 \
            --header 'Authorization: Bearer REPLACE_BEARER_TOKEN' \
            --header 'content-type: application/json' \
            --data '{"cron_schedule":"string","description":"string","disabled":true,"kind":"string","modules":["string"],"name":"string","policy_bytes":"string"}'
      - lang: Node
        source: |-
          const fetch = require('node-fetch');

          let url = 'http://localhost:8080/api/v1/teams/322346f9-54b4-497d-bc9a-c54b5aaa4400/monitors/322346f9-54b4-497d-bc9a-c54b5aaa4400';

          let options = {
            method: 'POST',
            headers: {
              Authorization: 'Bearer REPLACE_BEARER_TOKEN',
              'content-type': 'application/json'
            },
            body: '{"cron_schedule":"string","description":"string","disabled":true,"kind":"string","modules":["string"],"name":"string","policy_bytes":"string"}'
          };

          fetch(url, options)
            .then(res => res.json())
            .then(json => console.log(json))
            .catch(err => console.error('error:' + err));
      - lang: Ruby
        source: |-
          require 'uri'
          require 'net/http'

          url = URI("http://localhost:8080/api/v1/teams/322346f9-54b4-497d-bc9a-c54b5aaa4400/monitors/322346f9-54b4-497d-bc9a-c54b5aaa4400")

          http = Net::HTTP.new(url.host, url.port)

          request = Net::HTTP::Post.new(url)
          request["Authorization"] = 'Bearer REPLACE_BEARER_TOKEN'
          request["content-type"] = 'application/json'
          request.body = "{\"cron_schedule\":\"string\",\"description\":\"string\",\"disabled\":true,\"kind\":\"string\",\"modules\":[\"string\"],\"name\":\"string\",\"policy_bytes\":\"string\"}"

          response = http.request(request)
          puts response.read_body
      - lang: Python
        source: |-
          import requests

          url = "http://localhost:8080/api/v1/teams/322346f9-54b4-497d-bc9a-c54b5aaa4400/monitors/322346f9-54b4-497d-bc9a-c54b5aaa4400"

          payload = {
              "cron_schedule": "string",
              "description": "string",
              "disabled": True,
              "kind": "string",
              "modules": ["string"],
              "name": "string",
              "policy_bytes": "string"
          }
          headers = {
              "Authorization": "Bearer REPLACE_BEARER_TOKEN",
              "content-type": "application/json"
          }

          response = requests.request("POST", url, json=payload, headers=headers)

          print(response.text)
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\
          \n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"http://localhost:8080/api/v1/teams/322346f9-54b4-497d-bc9a-c54b5aaa4400/monitors/322346f9-54b4-497d-bc9a-c54b5aaa4400\"\
          \n\n\tpayload := strings.NewReader(\"{\\\"cron_schedule\\\":\\\"string\\\
          \",\\\"description\\\":\\\"string\\\",\\\"disabled\\\":true,\\\"kind\\\"\
          :\\\"string\\\",\\\"modules\\\":[\\\"string\\\"],\\\"name\\\":\\\"string\\\
          \",\\\"policy_bytes\\\":\\\"string\\\"}\")\n\n\treq, _ := http.NewRequest(\"\
          POST\", url, payload)\n\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\"\
          )\n\treq.Header.Add(\"content-type\", \"application/json\")\n\n\tres, _\
          \ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ :=\
          \ ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\
          \n}"
      x-codegen-request-body-name: UpdateMonitorRequest
    delete:
      tags:
      - Monitors
      summary: Delete Monitor
      description: Deletes a monitor.
      operationId: deleteMonitor
      parameters:
      - name: team_id
        in: path
        description: The team id
        required: true
        style: simple
        explode: false
        schema:
          type: string
          x-go-name: Team
        x-go-name: Team
      - name: monitor_id
        in: path
        description: The monitor id
        required: true
        style: simple
        explode: false
        schema:
          type: string
          x-go-name: Monitor
        x-go-name: Monitor
      responses:
        "200":
          description: Successfully delete the monitor
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteMonitorResponse'
        "400":
          description: A malformed or bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorBadRequestExample'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorForbiddenExample'
      x-codeSamples:
      - lang: Shell
        source: |-
          curl --request DELETE \
            --url http://localhost:8080/api/v1/teams/322346f9-54b4-497d-bc9a-c54b5aaa4400/monitors/322346f9-54b4-497d-bc9a-c54b5aaa4400 \
            --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'
      - lang: Node
        source: |-
          const fetch = require('node-fetch');

          let url = 'http://localhost:8080/api/v1/teams/322346f9-54b4-497d-bc9a-c54b5aaa4400/monitors/322346f9-54b4-497d-bc9a-c54b5aaa4400';

          let options = {method: 'DELETE', headers: {Authorization: 'Bearer REPLACE_BEARER_TOKEN'}};

          fetch(url, options)
            .then(res => res.json())
            .then(json => console.log(json))
            .catch(err => console.error('error:' + err));
      - lang: Ruby
        source: |-
          require 'uri'
          require 'net/http'

          url = URI("http://localhost:8080/api/v1/teams/322346f9-54b4-497d-bc9a-c54b5aaa4400/monitors/322346f9-54b4-497d-bc9a-c54b5aaa4400")

          http = Net::HTTP.new(url.host, url.port)

          request = Net::HTTP::Delete.new(url)
          request["Authorization"] = 'Bearer REPLACE_BEARER_TOKEN'

          response = http.request(request)
          puts response.read_body
      - lang: Python
        source: |-
          import requests

          url = "http://localhost:8080/api/v1/teams/322346f9-54b4-497d-bc9a-c54b5aaa4400/monitors/322346f9-54b4-497d-bc9a-c54b5aaa4400"

          headers = {"Authorization": "Bearer REPLACE_BEARER_TOKEN"}

          response = requests.request("DELETE", url, headers=headers)

          print(response.text)
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\
          \n)\n\nfunc main() {\n\n\turl := \"http://localhost:8080/api/v1/teams/322346f9-54b4-497d-bc9a-c54b5aaa4400/monitors/322346f9-54b4-497d-bc9a-c54b5aaa4400\"\
          \n\n\treq, _ := http.NewRequest(\"DELETE\", url, nil)\n\n\treq.Header.Add(\"\
          Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
  /api/v1/users:
    post:
      tags:
      - Users
      summary: Create a new user
      description: |-
        Creates a new user via email and password-based authentication. This endpoint is only registered if the
        environment variable `BASIC_AUTH_ENABLED` is set.
      operationId: createUser
      requestBody:
        description: The user to create
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/createUser_request'
        required: false
      responses:
        "201":
          description: Successfully created the user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateUserResponse'
        "400":
          description: A malformed or bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorBadRequestExample'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorForbiddenExample'
        "405":
          description: This endpoint is not supported on this Hatchet instance.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorNotSupportedExample'
      x-codeSamples:
      - lang: Shell
        source: |-
          curl --request POST \
            --url http://localhost:8080/api/v1/users \
            --header 'Authorization: Bearer REPLACE_BEARER_TOKEN' \
            --header 'content-type: application/json' \
            --data '{"display_name":"User 1","email":"user1@gmail.com","password":"Securepassword123"}'
      - lang: Node
        source: |-
          const fetch = require('node-fetch');

          let url = 'http://localhost:8080/api/v1/users';

          let options = {
            method: 'POST',
            headers: {
              Authorization: 'Bearer REPLACE_BEARER_TOKEN',
              'content-type': 'application/json'
            },
            body: '{"display_name":"User 1","email":"user1@gmail.com","password":"Securepassword123"}'
          };

          fetch(url, options)
            .then(res => res.json())
            .then(json => console.log(json))
            .catch(err => console.error('error:' + err));
      - lang: Ruby
        source: |-
          require 'uri'
          require 'net/http'

          url = URI("http://localhost:8080/api/v1/users")

          http = Net::HTTP.new(url.host, url.port)

          request = Net::HTTP::Post.new(url)
          request["Authorization"] = 'Bearer REPLACE_BEARER_TOKEN'
          request["content-type"] = 'application/json'
          request.body = "{\"display_name\":\"User 1\",\"email\":\"user1@gmail.com\",\"password\":\"Securepassword123\"}"

          response = http.request(request)
          puts response.read_body
      - lang: Python
        source: |-
          import requests

          url = "http://localhost:8080/api/v1/users"

          payload = {
              "display_name": "User 1",
              "email": "user1@gmail.com",
              "password": "Securepassword123"
          }
          headers = {
              "Authorization": "Bearer REPLACE_BEARER_TOKEN",
              "content-type": "application/json"
          }

          response = requests.request("POST", url, json=payload, headers=headers)

          print(response.text)
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\
          \n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"http://localhost:8080/api/v1/users\"\
          \n\n\tpayload := strings.NewReader(\"{\\\"display_name\\\":\\\"User 1\\\"\
          ,\\\"email\\\":\\\"user1@gmail.com\\\",\\\"password\\\":\\\"Securepassword123\\\
          \"}\")\n\n\treq, _ := http.NewRequest(\"POST\", url, payload)\n\n\treq.Header.Add(\"\
          Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\treq.Header.Add(\"content-type\"\
          , \"application/json\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\t\
          defer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\
          \tfmt.Println(string(body))\n\n}"
      x-codegen-request-body-name: CreateUserRequest
  /api/v1/users/current:
    get:
      tags:
      - Users
      summary: Retrieve the current user.
      description: Retrieves the current user object based on the data passed in auth.
      operationId: getCurrentUser
      responses:
        "200":
          description: Successfully got the user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetUserResponse'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorForbiddenExample'
      x-codeSamples:
      - lang: Shell
        source: |-
          curl --request GET \
            --url http://localhost:8080/api/v1/users/current \
            --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'
      - lang: Node
        source: |-
          const fetch = require('node-fetch');

          let url = 'http://localhost:8080/api/v1/users/current';

          let options = {method: 'GET', headers: {Authorization: 'Bearer REPLACE_BEARER_TOKEN'}};

          fetch(url, options)
            .then(res => res.json())
            .then(json => console.log(json))
            .catch(err => console.error('error:' + err));
      - lang: Ruby
        source: |-
          require 'uri'
          require 'net/http'

          url = URI("http://localhost:8080/api/v1/users/current")

          http = Net::HTTP.new(url.host, url.port)

          request = Net::HTTP::Get.new(url)
          request["Authorization"] = 'Bearer REPLACE_BEARER_TOKEN'

          response = http.request(request)
          puts response.read_body
      - lang: Python
        source: |-
          import requests

          url = "http://localhost:8080/api/v1/users/current"

          headers = {"Authorization": "Bearer REPLACE_BEARER_TOKEN"}

          response = requests.request("GET", url, headers=headers)

          print(response.text)
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\
          \n)\n\nfunc main() {\n\n\turl := \"http://localhost:8080/api/v1/users/current\"\
          \n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"\
          Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
    post:
      tags:
      - Users
      summary: Update the current user.
      description: Updates the current user.
      operationId: updateCurrentUser
      requestBody:
        description: The user parameters to update
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/updateOrganization_request'
        required: false
      responses:
        "200":
          description: Successfully updated the user.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateUserResponse'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorForbiddenExample'
      x-codeSamples:
      - lang: Shell
        source: |-
          curl --request POST \
            --url http://localhost:8080/api/v1/users/current \
            --header 'Authorization: Bearer REPLACE_BEARER_TOKEN' \
            --header 'content-type: application/json' \
            --data '{"display_name":"User 1"}'
      - lang: Node
        source: |-
          const fetch = require('node-fetch');

          let url = 'http://localhost:8080/api/v1/users/current';

          let options = {
            method: 'POST',
            headers: {
              Authorization: 'Bearer REPLACE_BEARER_TOKEN',
              'content-type': 'application/json'
            },
            body: '{"display_name":"User 1"}'
          };

          fetch(url, options)
            .then(res => res.json())
            .then(json => console.log(json))
            .catch(err => console.error('error:' + err));
      - lang: Ruby
        source: |-
          require 'uri'
          require 'net/http'

          url = URI("http://localhost:8080/api/v1/users/current")

          http = Net::HTTP.new(url.host, url.port)

          request = Net::HTTP::Post.new(url)
          request["Authorization"] = 'Bearer REPLACE_BEARER_TOKEN'
          request["content-type"] = 'application/json'
          request.body = "{\"display_name\":\"User 1\"}"

          response = http.request(request)
          puts response.read_body
      - lang: Python
        source: |-
          import requests

          url = "http://localhost:8080/api/v1/users/current"

          payload = {"display_name": "User 1"}
          headers = {
              "Authorization": "Bearer REPLACE_BEARER_TOKEN",
              "content-type": "application/json"
          }

          response = requests.request("POST", url, json=payload, headers=headers)

          print(response.text)
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\
          \n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"http://localhost:8080/api/v1/users/current\"\
          \n\n\tpayload := strings.NewReader(\"{\\\"display_name\\\":\\\"User 1\\\"\
          }\")\n\n\treq, _ := http.NewRequest(\"POST\", url, payload)\n\n\treq.Header.Add(\"\
          Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\treq.Header.Add(\"content-type\"\
          , \"application/json\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\t\
          defer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\
          \tfmt.Println(string(body))\n\n}"
      x-codegen-request-body-name: UpdateUserRequest
    delete:
      tags:
      - Users
      summary: Delete the current user.
      description: Deletes the current user.
      operationId: deleteCurrentUser
      responses:
        "202":
          description: Successfully triggered user deletion
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmptyResponse'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorForbiddenExample'
      x-codeSamples:
      - lang: Shell
        source: |-
          curl --request DELETE \
            --url http://localhost:8080/api/v1/users/current \
            --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'
      - lang: Node
        source: |-
          const fetch = require('node-fetch');

          let url = 'http://localhost:8080/api/v1/users/current';

          let options = {method: 'DELETE', headers: {Authorization: 'Bearer REPLACE_BEARER_TOKEN'}};

          fetch(url, options)
            .then(res => res.json())
            .then(json => console.log(json))
            .catch(err => console.error('error:' + err));
      - lang: Ruby
        source: |-
          require 'uri'
          require 'net/http'

          url = URI("http://localhost:8080/api/v1/users/current")

          http = Net::HTTP.new(url.host, url.port)

          request = Net::HTTP::Delete.new(url)
          request["Authorization"] = 'Bearer REPLACE_BEARER_TOKEN'

          response = http.request(request)
          puts response.read_body
      - lang: Python
        source: |-
          import requests

          url = "http://localhost:8080/api/v1/users/current"

          headers = {"Authorization": "Bearer REPLACE_BEARER_TOKEN"}

          response = requests.request("DELETE", url, headers=headers)

          print(response.text)
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\
          \n)\n\nfunc main() {\n\n\turl := \"http://localhost:8080/api/v1/users/current\"\
          \n\n\treq, _ := http.NewRequest(\"DELETE\", url, nil)\n\n\treq.Header.Add(\"\
          Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
  /api/v1/users/current/github_app/installations:
    get:
      tags:
      - Users
      summary: List Github App installations
      description: Lists the github app installations for the currently authenticated
        user.
      operationId: listGithubAppInstallations
      parameters:
      - name: page
        in: query
        description: The page to query for
        required: false
        style: form
        explode: true
        schema:
          type: integer
          format: int64
          x-go-name: Page
        x-go-name: Page
      responses:
        "200":
          description: Successfully got Github app installations
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListGithubAppInstallationsResponse'
        "400":
          description: A malformed or bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorBadRequestExample'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorForbiddenExample'
        "405":
          description: This endpoint is not supported on this Hatchet instance.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorNotSupportedExample'
      x-codeSamples:
      - lang: Shell
        source: |-
          curl --request GET \
            --url 'http://localhost:8080/api/v1/users/current/github_app/installations?page=2' \
            --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'
      - lang: Node
        source: |-
          const fetch = require('node-fetch');

          let url = 'http://localhost:8080/api/v1/users/current/github_app/installations?page=2';

          let options = {method: 'GET', headers: {Authorization: 'Bearer REPLACE_BEARER_TOKEN'}};

          fetch(url, options)
            .then(res => res.json())
            .then(json => console.log(json))
            .catch(err => console.error('error:' + err));
      - lang: Ruby
        source: |-
          require 'uri'
          require 'net/http'

          url = URI("http://localhost:8080/api/v1/users/current/github_app/installations?page=2")

          http = Net::HTTP.new(url.host, url.port)

          request = Net::HTTP::Get.new(url)
          request["Authorization"] = 'Bearer REPLACE_BEARER_TOKEN'

          response = http.request(request)
          puts response.read_body
      - lang: Python
        source: |-
          import requests

          url = "http://localhost:8080/api/v1/users/current/github_app/installations"

          querystring = {"page":"2"}

          headers = {"Authorization": "Bearer REPLACE_BEARER_TOKEN"}

          response = requests.request("GET", url, headers=headers, params=querystring)

          print(response.text)
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\
          \n)\n\nfunc main() {\n\n\turl := \"http://localhost:8080/api/v1/users/current/github_app/installations?page=2\"\
          \n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"\
          Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
  /api/v1/users/current/organizations:
    get:
      tags:
      - Users
      summary: List user organizations
      description: Lists organizations for a user.
      operationId: listUserOrganizations
      parameters:
      - name: page
        in: query
        description: The page to query for
        required: false
        style: form
        explode: true
        schema:
          type: integer
          format: int64
          x-go-name: Page
        x-go-name: Page
      responses:
        "200":
          description: Successfully listed organizations
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListUserOrgsResponse'
        "400":
          description: A malformed or bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorBadRequestExample'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorForbiddenExample'
      x-codeSamples:
      - lang: Shell
        source: |-
          curl --request GET \
            --url 'http://localhost:8080/api/v1/users/current/organizations?page=2' \
            --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'
      - lang: Node
        source: |-
          const fetch = require('node-fetch');

          let url = 'http://localhost:8080/api/v1/users/current/organizations?page=2';

          let options = {method: 'GET', headers: {Authorization: 'Bearer REPLACE_BEARER_TOKEN'}};

          fetch(url, options)
            .then(res => res.json())
            .then(json => console.log(json))
            .catch(err => console.error('error:' + err));
      - lang: Ruby
        source: |-
          require 'uri'
          require 'net/http'

          url = URI("http://localhost:8080/api/v1/users/current/organizations?page=2")

          http = Net::HTTP.new(url.host, url.port)

          request = Net::HTTP::Get.new(url)
          request["Authorization"] = 'Bearer REPLACE_BEARER_TOKEN'

          response = http.request(request)
          puts response.read_body
      - lang: Python
        source: |-
          import requests

          url = "http://localhost:8080/api/v1/users/current/organizations"

          querystring = {"page":"2"}

          headers = {"Authorization": "Bearer REPLACE_BEARER_TOKEN"}

          response = requests.request("GET", url, headers=headers, params=querystring)

          print(response.text)
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\
          \n)\n\nfunc main() {\n\n\turl := \"http://localhost:8080/api/v1/users/current/organizations?page=2\"\
          \n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"\
          Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
  /api/v1/users/current/reset_password_manual:
    post:
      tags:
      - Users
      summary: Reset password (manual)
      description: Resets a password for a user using the old password as validation.
      operationId: resetPasswordManual
      requestBody:
        description: The old password and new password
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/resetPasswordManual_request'
        required: false
      responses:
        "200":
          description: Successfully reset password
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmptyResponse'
        "400":
          description: A malformed or bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorBadRequestExample'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorForbiddenExample'
      x-codeSamples:
      - lang: Shell
        source: |-
          curl --request POST \
            --url http://localhost:8080/api/v1/users/current/reset_password_manual \
            --header 'Authorization: Bearer REPLACE_BEARER_TOKEN' \
            --header 'content-type: application/json' \
            --data '{"new_password":"Newpassword123","old_password":"Securepassword123"}'
      - lang: Node
        source: |-
          const fetch = require('node-fetch');

          let url = 'http://localhost:8080/api/v1/users/current/reset_password_manual';

          let options = {
            method: 'POST',
            headers: {
              Authorization: 'Bearer REPLACE_BEARER_TOKEN',
              'content-type': 'application/json'
            },
            body: '{"new_password":"Newpassword123","old_password":"Securepassword123"}'
          };

          fetch(url, options)
            .then(res => res.json())
            .then(json => console.log(json))
            .catch(err => console.error('error:' + err));
      - lang: Ruby
        source: |-
          require 'uri'
          require 'net/http'

          url = URI("http://localhost:8080/api/v1/users/current/reset_password_manual")

          http = Net::HTTP.new(url.host, url.port)

          request = Net::HTTP::Post.new(url)
          request["Authorization"] = 'Bearer REPLACE_BEARER_TOKEN'
          request["content-type"] = 'application/json'
          request.body = "{\"new_password\":\"Newpassword123\",\"old_password\":\"Securepassword123\"}"

          response = http.request(request)
          puts response.read_body
      - lang: Python
        source: |-
          import requests

          url = "http://localhost:8080/api/v1/users/current/reset_password_manual"

          payload = {
              "new_password": "Newpassword123",
              "old_password": "Securepassword123"
          }
          headers = {
              "Authorization": "Bearer REPLACE_BEARER_TOKEN",
              "content-type": "application/json"
          }

          response = requests.request("POST", url, json=payload, headers=headers)

          print(response.text)
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\
          \n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"http://localhost:8080/api/v1/users/current/reset_password_manual\"\
          \n\n\tpayload := strings.NewReader(\"{\\\"new_password\\\":\\\"Newpassword123\\\
          \",\\\"old_password\\\":\\\"Securepassword123\\\"}\")\n\n\treq, _ := http.NewRequest(\"\
          POST\", url, payload)\n\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\"\
          )\n\treq.Header.Add(\"content-type\", \"application/json\")\n\n\tres, _\
          \ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ :=\
          \ ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\
          \n}"
      x-codegen-request-body-name: ResetPasswordManualRequest
  /api/v1/users/current/settings/pats:
    get:
      tags:
      - Users
      summary: List personal access tokens.
      description: Lists personal access token for a user.
      operationId: listPersonalAccessTokens
      parameters:
      - name: page
        in: query
        description: The page to query for
        required: false
        style: form
        explode: true
        schema:
          type: integer
          format: int64
          x-go-name: Page
        x-go-name: Page
      responses:
        "200":
          description: Successfully listed personal access tokens
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListPATsResponse'
        "400":
          description: A malformed or bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorBadRequestExample'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorForbiddenExample'
        "405":
          description: This endpoint is not supported on this Hatchet instance.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorNotSupportedExample'
      x-codeSamples:
      - lang: Shell
        source: |-
          curl --request GET \
            --url 'http://localhost:8080/api/v1/users/current/settings/pats?page=2' \
            --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'
      - lang: Node
        source: |-
          const fetch = require('node-fetch');

          let url = 'http://localhost:8080/api/v1/users/current/settings/pats?page=2';

          let options = {method: 'GET', headers: {Authorization: 'Bearer REPLACE_BEARER_TOKEN'}};

          fetch(url, options)
            .then(res => res.json())
            .then(json => console.log(json))
            .catch(err => console.error('error:' + err));
      - lang: Ruby
        source: |-
          require 'uri'
          require 'net/http'

          url = URI("http://localhost:8080/api/v1/users/current/settings/pats?page=2")

          http = Net::HTTP.new(url.host, url.port)

          request = Net::HTTP::Get.new(url)
          request["Authorization"] = 'Bearer REPLACE_BEARER_TOKEN'

          response = http.request(request)
          puts response.read_body
      - lang: Python
        source: |-
          import requests

          url = "http://localhost:8080/api/v1/users/current/settings/pats"

          querystring = {"page":"2"}

          headers = {"Authorization": "Bearer REPLACE_BEARER_TOKEN"}

          response = requests.request("GET", url, headers=headers, params=querystring)

          print(response.text)
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\
          \n)\n\nfunc main() {\n\n\turl := \"http://localhost:8080/api/v1/users/current/settings/pats?page=2\"\
          \n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"\
          Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
    post:
      tags:
      - Users
      summary: Create a new personal access token
      description: Creates a new personal access token for a user.
      operationId: createPersonalAccessToken
      requestBody:
        description: The personal access token to create
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/createPersonalAccessToken_request'
        required: false
      responses:
        "201":
          description: Successfully created the personal access token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreatePATResponse'
        "400":
          description: A malformed or bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorBadRequestExample'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorForbiddenExample'
        "405":
          description: This endpoint is not supported on this Hatchet instance.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorNotSupportedExample'
      x-codeSamples:
      - lang: Shell
        source: |-
          curl --request POST \
            --url http://localhost:8080/api/v1/users/current/settings/pats \
            --header 'Authorization: Bearer REPLACE_BEARER_TOKEN' \
            --header 'content-type: application/json' \
            --data '{"display_name":"cli-token-1234"}'
      - lang: Node
        source: |-
          const fetch = require('node-fetch');

          let url = 'http://localhost:8080/api/v1/users/current/settings/pats';

          let options = {
            method: 'POST',
            headers: {
              Authorization: 'Bearer REPLACE_BEARER_TOKEN',
              'content-type': 'application/json'
            },
            body: '{"display_name":"cli-token-1234"}'
          };

          fetch(url, options)
            .then(res => res.json())
            .then(json => console.log(json))
            .catch(err => console.error('error:' + err));
      - lang: Ruby
        source: |-
          require 'uri'
          require 'net/http'

          url = URI("http://localhost:8080/api/v1/users/current/settings/pats")

          http = Net::HTTP.new(url.host, url.port)

          request = Net::HTTP::Post.new(url)
          request["Authorization"] = 'Bearer REPLACE_BEARER_TOKEN'
          request["content-type"] = 'application/json'
          request.body = "{\"display_name\":\"cli-token-1234\"}"

          response = http.request(request)
          puts response.read_body
      - lang: Python
        source: |-
          import requests

          url = "http://localhost:8080/api/v1/users/current/settings/pats"

          payload = {"display_name": "cli-token-1234"}
          headers = {
              "Authorization": "Bearer REPLACE_BEARER_TOKEN",
              "content-type": "application/json"
          }

          response = requests.request("POST", url, json=payload, headers=headers)

          print(response.text)
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\
          \n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"http://localhost:8080/api/v1/users/current/settings/pats\"\
          \n\n\tpayload := strings.NewReader(\"{\\\"display_name\\\":\\\"cli-token-1234\\\
          \"}\")\n\n\treq, _ := http.NewRequest(\"POST\", url, payload)\n\n\treq.Header.Add(\"\
          Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\treq.Header.Add(\"content-type\"\
          , \"application/json\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\t\
          defer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\
          \tfmt.Println(string(body))\n\n}"
      x-codegen-request-body-name: CreatePATRequest
  /api/v1/users/current/settings/pats/{pat_id}:
    get:
      tags:
      - Users
      summary: Get a personal access token
      description: "Gets a personal access token for a user, specified by the path\
        \ param `pat_id`."
      operationId: getPersonalAccessToken
      parameters:
      - name: pat_id
        in: path
        description: The personal access token id
        required: true
        style: simple
        explode: false
        schema:
          type: string
          x-go-name: PAT
        x-go-name: PAT
      responses:
        "200":
          description: Successfully got the personal access token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetPATResponse'
        "400":
          description: A malformed or bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorBadRequestExample'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorForbiddenExample'
        "405":
          description: This endpoint is not supported on this Hatchet instance.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorNotSupportedExample'
      x-codeSamples:
      - lang: Shell
        source: |-
          curl --request GET \
            --url http://localhost:8080/api/v1/users/current/settings/pats/322346f9-54b4-497d-bc9a-c54b5aaa4400 \
            --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'
      - lang: Node
        source: |-
          const fetch = require('node-fetch');

          let url = 'http://localhost:8080/api/v1/users/current/settings/pats/322346f9-54b4-497d-bc9a-c54b5aaa4400';

          let options = {method: 'GET', headers: {Authorization: 'Bearer REPLACE_BEARER_TOKEN'}};

          fetch(url, options)
            .then(res => res.json())
            .then(json => console.log(json))
            .catch(err => console.error('error:' + err));
      - lang: Ruby
        source: |-
          require 'uri'
          require 'net/http'

          url = URI("http://localhost:8080/api/v1/users/current/settings/pats/322346f9-54b4-497d-bc9a-c54b5aaa4400")

          http = Net::HTTP.new(url.host, url.port)

          request = Net::HTTP::Get.new(url)
          request["Authorization"] = 'Bearer REPLACE_BEARER_TOKEN'

          response = http.request(request)
          puts response.read_body
      - lang: Python
        source: |-
          import requests

          url = "http://localhost:8080/api/v1/users/current/settings/pats/322346f9-54b4-497d-bc9a-c54b5aaa4400"

          headers = {"Authorization": "Bearer REPLACE_BEARER_TOKEN"}

          response = requests.request("GET", url, headers=headers)

          print(response.text)
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\
          \n)\n\nfunc main() {\n\n\turl := \"http://localhost:8080/api/v1/users/current/settings/pats/322346f9-54b4-497d-bc9a-c54b5aaa4400\"\
          \n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"\
          Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
    delete:
      tags:
      - Users
      summary: Delete the personal access token.
      description: Deletes the personal access token for the user
      operationId: deletePersonalAccessToken
      parameters:
      - name: pat_id
        in: path
        description: The personal access token id
        required: true
        style: simple
        explode: false
        schema:
          type: string
          x-go-name: PAT
        x-go-name: PAT
      responses:
        "200":
          description: Successfully deleted the personal access token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeletePATResponse'
        "400":
          description: A malformed or bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorBadRequestExample'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorForbiddenExample'
        "405":
          description: This endpoint is not supported on this Hatchet instance.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorNotSupportedExample'
      x-codeSamples:
      - lang: Shell
        source: |-
          curl --request DELETE \
            --url http://localhost:8080/api/v1/users/current/settings/pats/322346f9-54b4-497d-bc9a-c54b5aaa4400 \
            --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'
      - lang: Node
        source: |-
          const fetch = require('node-fetch');

          let url = 'http://localhost:8080/api/v1/users/current/settings/pats/322346f9-54b4-497d-bc9a-c54b5aaa4400';

          let options = {method: 'DELETE', headers: {Authorization: 'Bearer REPLACE_BEARER_TOKEN'}};

          fetch(url, options)
            .then(res => res.json())
            .then(json => console.log(json))
            .catch(err => console.error('error:' + err));
      - lang: Ruby
        source: |-
          require 'uri'
          require 'net/http'

          url = URI("http://localhost:8080/api/v1/users/current/settings/pats/322346f9-54b4-497d-bc9a-c54b5aaa4400")

          http = Net::HTTP.new(url.host, url.port)

          request = Net::HTTP::Delete.new(url)
          request["Authorization"] = 'Bearer REPLACE_BEARER_TOKEN'

          response = http.request(request)
          puts response.read_body
      - lang: Python
        source: |-
          import requests

          url = "http://localhost:8080/api/v1/users/current/settings/pats/322346f9-54b4-497d-bc9a-c54b5aaa4400"

          headers = {"Authorization": "Bearer REPLACE_BEARER_TOKEN"}

          response = requests.request("DELETE", url, headers=headers)

          print(response.text)
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\
          \n)\n\nfunc main() {\n\n\turl := \"http://localhost:8080/api/v1/users/current/settings/pats/322346f9-54b4-497d-bc9a-c54b5aaa4400\"\
          \n\n\treq, _ := http.NewRequest(\"DELETE\", url, nil)\n\n\treq.Header.Add(\"\
          Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
  /api/v1/users/current/settings/pats/{pat_id}/revoke:
    post:
      tags:
      - Users
      summary: Revoke the personal access token.
      description: Revokes the personal access token for the user
      operationId: revokePersonalAccessToken
      parameters:
      - name: pat_id
        in: path
        description: The personal access token id
        required: true
        style: simple
        explode: false
        schema:
          type: string
          x-go-name: PAT
        x-go-name: PAT
      responses:
        "200":
          description: Successfully revoked the personal access token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RevokePATResponseExample'
        "400":
          description: A malformed or bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorBadRequestExample'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorForbiddenExample'
        "405":
          description: This endpoint is not supported on this Hatchet instance.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorNotSupportedExample'
      x-codeSamples:
      - lang: Shell
        source: |-
          curl --request POST \
            --url http://localhost:8080/api/v1/users/current/settings/pats/322346f9-54b4-497d-bc9a-c54b5aaa4400/revoke \
            --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'
      - lang: Node
        source: |-
          const fetch = require('node-fetch');

          let url = 'http://localhost:8080/api/v1/users/current/settings/pats/322346f9-54b4-497d-bc9a-c54b5aaa4400/revoke';

          let options = {method: 'POST', headers: {Authorization: 'Bearer REPLACE_BEARER_TOKEN'}};

          fetch(url, options)
            .then(res => res.json())
            .then(json => console.log(json))
            .catch(err => console.error('error:' + err));
      - lang: Ruby
        source: |-
          require 'uri'
          require 'net/http'

          url = URI("http://localhost:8080/api/v1/users/current/settings/pats/322346f9-54b4-497d-bc9a-c54b5aaa4400/revoke")

          http = Net::HTTP.new(url.host, url.port)

          request = Net::HTTP::Post.new(url)
          request["Authorization"] = 'Bearer REPLACE_BEARER_TOKEN'

          response = http.request(request)
          puts response.read_body
      - lang: Python
        source: |-
          import requests

          url = "http://localhost:8080/api/v1/users/current/settings/pats/322346f9-54b4-497d-bc9a-c54b5aaa4400/revoke"

          headers = {"Authorization": "Bearer REPLACE_BEARER_TOKEN"}

          response = requests.request("POST", url, headers=headers)

          print(response.text)
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\
          \n)\n\nfunc main() {\n\n\turl := \"http://localhost:8080/api/v1/users/current/settings/pats/322346f9-54b4-497d-bc9a-c54b5aaa4400/revoke\"\
          \n\n\treq, _ := http.NewRequest(\"POST\", url, nil)\n\n\treq.Header.Add(\"\
          Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
  /api/v1/users/current/teams:
    get:
      tags:
      - Users
      summary: List user teams
      description: "Lists teams for a user, optionally filtered by organization id."
      operationId: listUserTeams
      parameters:
      - name: page
        in: query
        description: The page to query for
        required: false
        style: form
        explode: true
        schema:
          type: integer
          format: int64
          x-go-name: Page
        x-go-name: Page
      - name: organization_id
        in: query
        description: the id of the organization to filter by (optional)
        required: false
        style: form
        explode: true
        schema:
          type: string
      responses:
        "200":
          description: Successfully listed teams
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListUserTeamsResponse'
        "400":
          description: A malformed or bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorBadRequestExample'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorForbiddenExample'
      x-codeSamples:
      - lang: Shell
        source: |-
          curl --request GET \
            --url 'http://localhost:8080/api/v1/users/current/teams?page=2&organization_id=bb214807-246e-43a5-a25d-41761d1cff9e' \
            --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'
      - lang: Node
        source: |-
          const fetch = require('node-fetch');

          let url = 'http://localhost:8080/api/v1/users/current/teams?page=2&organization_id=bb214807-246e-43a5-a25d-41761d1cff9e';

          let options = {method: 'GET', headers: {Authorization: 'Bearer REPLACE_BEARER_TOKEN'}};

          fetch(url, options)
            .then(res => res.json())
            .then(json => console.log(json))
            .catch(err => console.error('error:' + err));
      - lang: Ruby
        source: |-
          require 'uri'
          require 'net/http'

          url = URI("http://localhost:8080/api/v1/users/current/teams?page=2&organization_id=bb214807-246e-43a5-a25d-41761d1cff9e")

          http = Net::HTTP.new(url.host, url.port)

          request = Net::HTTP::Get.new(url)
          request["Authorization"] = 'Bearer REPLACE_BEARER_TOKEN'

          response = http.request(request)
          puts response.read_body
      - lang: Python
        source: |-
          import requests

          url = "http://localhost:8080/api/v1/users/current/teams"

          querystring = {"page":"2","organization_id":"bb214807-246e-43a5-a25d-41761d1cff9e"}

          headers = {"Authorization": "Bearer REPLACE_BEARER_TOKEN"}

          response = requests.request("GET", url, headers=headers, params=querystring)

          print(response.text)
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\
          \n)\n\nfunc main() {\n\n\turl := \"http://localhost:8080/api/v1/users/current/teams?page=2&organization_id=bb214807-246e-43a5-a25d-41761d1cff9e\"\
          \n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"\
          Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
  /api/v1/users/current/verify_email/finalize:
    post:
      tags:
      - Users
      summary: Verify email
      description: Verifies a user's email via a token-based mechanism.
      operationId: verifyEmail
      requestBody:
        description: Reset password data
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/verifyEmail_request'
        required: false
      responses:
        "200":
          description: Email verified successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmptyResponse'
        "400":
          description: A malformed or bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorBadRequestExample'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorForbiddenExample'
      x-codeSamples:
      - lang: Shell
        source: |-
          curl --request POST \
            --url http://localhost:8080/api/v1/users/current/verify_email/finalize \
            --header 'Authorization: Bearer REPLACE_BEARER_TOKEN' \
            --header 'content-type: application/json' \
            --data '{"token":"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9....","token_id":"bb214807-246e-43a5-a25d-41761d1cff9e"}'
      - lang: Node
        source: |-
          const fetch = require('node-fetch');

          let url = 'http://localhost:8080/api/v1/users/current/verify_email/finalize';

          let options = {
            method: 'POST',
            headers: {
              Authorization: 'Bearer REPLACE_BEARER_TOKEN',
              'content-type': 'application/json'
            },
            body: '{"token":"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9....","token_id":"bb214807-246e-43a5-a25d-41761d1cff9e"}'
          };

          fetch(url, options)
            .then(res => res.json())
            .then(json => console.log(json))
            .catch(err => console.error('error:' + err));
      - lang: Ruby
        source: |-
          require 'uri'
          require 'net/http'

          url = URI("http://localhost:8080/api/v1/users/current/verify_email/finalize")

          http = Net::HTTP.new(url.host, url.port)

          request = Net::HTTP::Post.new(url)
          request["Authorization"] = 'Bearer REPLACE_BEARER_TOKEN'
          request["content-type"] = 'application/json'
          request.body = "{\"token\":\"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9....\",\"token_id\":\"bb214807-246e-43a5-a25d-41761d1cff9e\"}"

          response = http.request(request)
          puts response.read_body
      - lang: Python
        source: |-
          import requests

          url = "http://localhost:8080/api/v1/users/current/verify_email/finalize"

          payload = {
              "token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9....",
              "token_id": "bb214807-246e-43a5-a25d-41761d1cff9e"
          }
          headers = {
              "Authorization": "Bearer REPLACE_BEARER_TOKEN",
              "content-type": "application/json"
          }

          response = requests.request("POST", url, json=payload, headers=headers)

          print(response.text)
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\
          \n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"http://localhost:8080/api/v1/users/current/verify_email/finalize\"\
          \n\n\tpayload := strings.NewReader(\"{\\\"token\\\":\\\"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9....\\\
          \",\\\"token_id\\\":\\\"bb214807-246e-43a5-a25d-41761d1cff9e\\\"}\")\n\n\
          \treq, _ := http.NewRequest(\"POST\", url, payload)\n\n\treq.Header.Add(\"\
          Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\treq.Header.Add(\"content-type\"\
          , \"application/json\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\t\
          defer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\
          \tfmt.Println(string(body))\n\n}"
      x-codegen-request-body-name: VerifyEmailRequest
  /api/v1/users/current/verify_email/resend:
    post:
      tags:
      - Users
      summary: Resend verification email.
      description: Resends a verification email for the user.
      operationId: resendVerificationEmail
      responses:
        "200":
          description: Verification email resent successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmptyResponse'
        "400":
          description: A malformed or bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorBadRequestExample'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorForbiddenExample'
      x-codeSamples:
      - lang: Shell
        source: |-
          curl --request POST \
            --url http://localhost:8080/api/v1/users/current/verify_email/resend \
            --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'
      - lang: Node
        source: |-
          const fetch = require('node-fetch');

          let url = 'http://localhost:8080/api/v1/users/current/verify_email/resend';

          let options = {method: 'POST', headers: {Authorization: 'Bearer REPLACE_BEARER_TOKEN'}};

          fetch(url, options)
            .then(res => res.json())
            .then(json => console.log(json))
            .catch(err => console.error('error:' + err));
      - lang: Ruby
        source: |-
          require 'uri'
          require 'net/http'

          url = URI("http://localhost:8080/api/v1/users/current/verify_email/resend")

          http = Net::HTTP.new(url.host, url.port)

          request = Net::HTTP::Post.new(url)
          request["Authorization"] = 'Bearer REPLACE_BEARER_TOKEN'

          response = http.request(request)
          puts response.read_body
      - lang: Python
        source: |-
          import requests

          url = "http://localhost:8080/api/v1/users/current/verify_email/resend"

          headers = {"Authorization": "Bearer REPLACE_BEARER_TOKEN"}

          response = requests.request("POST", url, headers=headers)

          print(response.text)
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\
          \n)\n\nfunc main() {\n\n\turl := \"http://localhost:8080/api/v1/users/current/verify_email/resend\"\
          \n\n\treq, _ := http.NewRequest(\"POST\", url, nil)\n\n\treq.Header.Add(\"\
          Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
  /api/v1/users/login:
    post:
      tags:
      - Users
      summary: Login user
      description: |-
        Logs a user in via email and password-based authentication. This endpoint is only registered if the
        environment variable `BASIC_AUTH_ENABLED` is set.
      operationId: loginUser
      requestBody:
        description: The credentials for basic login
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/loginUser_request'
        required: false
      responses:
        "200":
          description: Successfully logged in
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginUserResponse'
        "400":
          description: A malformed or bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorBadRequestExample'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorForbiddenExample'
        "405":
          description: This endpoint is not supported on this Hatchet instance.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorNotSupportedExample'
      x-codeSamples:
      - lang: Shell
        source: |-
          curl --request POST \
            --url http://localhost:8080/api/v1/users/login \
            --header 'Authorization: Bearer REPLACE_BEARER_TOKEN' \
            --header 'content-type: application/json' \
            --data '{"email":"user1@gmail.com","password":"Securepassword123"}'
      - lang: Node
        source: |-
          const fetch = require('node-fetch');

          let url = 'http://localhost:8080/api/v1/users/login';

          let options = {
            method: 'POST',
            headers: {
              Authorization: 'Bearer REPLACE_BEARER_TOKEN',
              'content-type': 'application/json'
            },
            body: '{"email":"user1@gmail.com","password":"Securepassword123"}'
          };

          fetch(url, options)
            .then(res => res.json())
            .then(json => console.log(json))
            .catch(err => console.error('error:' + err));
      - lang: Ruby
        source: |-
          require 'uri'
          require 'net/http'

          url = URI("http://localhost:8080/api/v1/users/login")

          http = Net::HTTP.new(url.host, url.port)

          request = Net::HTTP::Post.new(url)
          request["Authorization"] = 'Bearer REPLACE_BEARER_TOKEN'
          request["content-type"] = 'application/json'
          request.body = "{\"email\":\"user1@gmail.com\",\"password\":\"Securepassword123\"}"

          response = http.request(request)
          puts response.read_body
      - lang: Python
        source: |-
          import requests

          url = "http://localhost:8080/api/v1/users/login"

          payload = {
              "email": "user1@gmail.com",
              "password": "Securepassword123"
          }
          headers = {
              "Authorization": "Bearer REPLACE_BEARER_TOKEN",
              "content-type": "application/json"
          }

          response = requests.request("POST", url, json=payload, headers=headers)

          print(response.text)
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\
          \n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"http://localhost:8080/api/v1/users/login\"\
          \n\n\tpayload := strings.NewReader(\"{\\\"email\\\":\\\"user1@gmail.com\\\
          \",\\\"password\\\":\\\"Securepassword123\\\"}\")\n\n\treq, _ := http.NewRequest(\"\
          POST\", url, payload)\n\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\"\
          )\n\treq.Header.Add(\"content-type\", \"application/json\")\n\n\tres, _\
          \ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ :=\
          \ ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\
          \n}"
      x-codegen-request-body-name: LoginUserRequest
  /api/v1/users/logout:
    post:
      tags:
      - Users
      summary: Logout user
      description: Logs a user out. This endpoint only performs an action if it's
        called with cookie-based authentication.
      operationId: logoutUser
      responses:
        "200":
          description: Successfully logged out
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmptyResponse'
        "400":
          description: A malformed or bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorBadRequestExample'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorForbiddenExample'
      x-codeSamples:
      - lang: Shell
        source: |-
          curl --request POST \
            --url http://localhost:8080/api/v1/users/logout \
            --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'
      - lang: Node
        source: |-
          const fetch = require('node-fetch');

          let url = 'http://localhost:8080/api/v1/users/logout';

          let options = {method: 'POST', headers: {Authorization: 'Bearer REPLACE_BEARER_TOKEN'}};

          fetch(url, options)
            .then(res => res.json())
            .then(json => console.log(json))
            .catch(err => console.error('error:' + err));
      - lang: Ruby
        source: |-
          require 'uri'
          require 'net/http'

          url = URI("http://localhost:8080/api/v1/users/logout")

          http = Net::HTTP.new(url.host, url.port)

          request = Net::HTTP::Post.new(url)
          request["Authorization"] = 'Bearer REPLACE_BEARER_TOKEN'

          response = http.request(request)
          puts response.read_body
      - lang: Python
        source: |-
          import requests

          url = "http://localhost:8080/api/v1/users/logout"

          headers = {"Authorization": "Bearer REPLACE_BEARER_TOKEN"}

          response = requests.request("POST", url, headers=headers)

          print(response.text)
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\
          \n)\n\nfunc main() {\n\n\turl := \"http://localhost:8080/api/v1/users/logout\"\
          \n\n\treq, _ := http.NewRequest(\"POST\", url, nil)\n\n\treq.Header.Add(\"\
          Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
  /api/v1/users/reset_password_email:
    post:
      tags:
      - Users
      summary: Reset password (email)
      description: Resets a password for a user by sending them a verification email.
      operationId: resetPasswordEmail
      requestBody:
        description: Request for resetting a password over email
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/resetPasswordEmail_request'
        required: false
      responses:
        "200":
          description: Successfully triggered password reset
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmptyResponse'
        "400":
          description: A malformed or bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorBadRequestExample'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorForbiddenExample'
      x-codeSamples:
      - lang: Shell
        source: |-
          curl --request POST \
            --url http://localhost:8080/api/v1/users/reset_password_email \
            --header 'Authorization: Bearer REPLACE_BEARER_TOKEN' \
            --header 'content-type: application/json' \
            --data '{"email":"user1@gmail.com"}'
      - lang: Node
        source: |-
          const fetch = require('node-fetch');

          let url = 'http://localhost:8080/api/v1/users/reset_password_email';

          let options = {
            method: 'POST',
            headers: {
              Authorization: 'Bearer REPLACE_BEARER_TOKEN',
              'content-type': 'application/json'
            },
            body: '{"email":"user1@gmail.com"}'
          };

          fetch(url, options)
            .then(res => res.json())
            .then(json => console.log(json))
            .catch(err => console.error('error:' + err));
      - lang: Ruby
        source: |-
          require 'uri'
          require 'net/http'

          url = URI("http://localhost:8080/api/v1/users/reset_password_email")

          http = Net::HTTP.new(url.host, url.port)

          request = Net::HTTP::Post.new(url)
          request["Authorization"] = 'Bearer REPLACE_BEARER_TOKEN'
          request["content-type"] = 'application/json'
          request.body = "{\"email\":\"user1@gmail.com\"}"

          response = http.request(request)
          puts response.read_body
      - lang: Python
        source: |-
          import requests

          url = "http://localhost:8080/api/v1/users/reset_password_email"

          payload = {"email": "user1@gmail.com"}
          headers = {
              "Authorization": "Bearer REPLACE_BEARER_TOKEN",
              "content-type": "application/json"
          }

          response = requests.request("POST", url, json=payload, headers=headers)

          print(response.text)
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\
          \n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"http://localhost:8080/api/v1/users/reset_password_email\"\
          \n\n\tpayload := strings.NewReader(\"{\\\"email\\\":\\\"user1@gmail.com\\\
          \"}\")\n\n\treq, _ := http.NewRequest(\"POST\", url, payload)\n\n\treq.Header.Add(\"\
          Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\treq.Header.Add(\"content-type\"\
          , \"application/json\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\t\
          defer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\
          \tfmt.Println(string(body))\n\n}"
      x-codegen-request-body-name: ResetPasswordEmailRequest
  /api/v1/users/reset_password_email/finalize:
    post:
      tags:
      - Users
      summary: Reset password
      description: Resets a user's password given a token-based reset password mechanism.
      operationId: resetPasswordEmailFinalize
      requestBody:
        description: Reset password data
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/resetPasswordEmailFinalize_request'
        required: false
      responses:
        "200":
          description: Password reset successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmptyResponse'
        "400":
          description: A malformed or bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorBadRequestExample'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorForbiddenExample'
      x-codeSamples:
      - lang: Shell
        source: |-
          curl --request POST \
            --url http://localhost:8080/api/v1/users/reset_password_email/finalize \
            --header 'Authorization: Bearer REPLACE_BEARER_TOKEN' \
            --header 'content-type: application/json' \
            --data '{"email":"user1@gmail.com","new_password":"Newpassword123","token":"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9....","token_id":"bb214807-246e-43a5-a25d-41761d1cff9e"}'
      - lang: Node
        source: |-
          const fetch = require('node-fetch');

          let url = 'http://localhost:8080/api/v1/users/reset_password_email/finalize';

          let options = {
            method: 'POST',
            headers: {
              Authorization: 'Bearer REPLACE_BEARER_TOKEN',
              'content-type': 'application/json'
            },
            body: '{"email":"user1@gmail.com","new_password":"Newpassword123","token":"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9....","token_id":"bb214807-246e-43a5-a25d-41761d1cff9e"}'
          };

          fetch(url, options)
            .then(res => res.json())
            .then(json => console.log(json))
            .catch(err => console.error('error:' + err));
      - lang: Ruby
        source: |-
          require 'uri'
          require 'net/http'

          url = URI("http://localhost:8080/api/v1/users/reset_password_email/finalize")

          http = Net::HTTP.new(url.host, url.port)

          request = Net::HTTP::Post.new(url)
          request["Authorization"] = 'Bearer REPLACE_BEARER_TOKEN'
          request["content-type"] = 'application/json'
          request.body = "{\"email\":\"user1@gmail.com\",\"new_password\":\"Newpassword123\",\"token\":\"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9....\",\"token_id\":\"bb214807-246e-43a5-a25d-41761d1cff9e\"}"

          response = http.request(request)
          puts response.read_body
      - lang: Python
        source: |-
          import requests

          url = "http://localhost:8080/api/v1/users/reset_password_email/finalize"

          payload = {
              "email": "user1@gmail.com",
              "new_password": "Newpassword123",
              "token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9....",
              "token_id": "bb214807-246e-43a5-a25d-41761d1cff9e"
          }
          headers = {
              "Authorization": "Bearer REPLACE_BEARER_TOKEN",
              "content-type": "application/json"
          }

          response = requests.request("POST", url, json=payload, headers=headers)

          print(response.text)
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\
          \n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"http://localhost:8080/api/v1/users/reset_password_email/finalize\"\
          \n\n\tpayload := strings.NewReader(\"{\\\"email\\\":\\\"user1@gmail.com\\\
          \",\\\"new_password\\\":\\\"Newpassword123\\\",\\\"token\\\":\\\"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9....\\\
          \",\\\"token_id\\\":\\\"bb214807-246e-43a5-a25d-41761d1cff9e\\\"}\")\n\n\
          \treq, _ := http.NewRequest(\"POST\", url, payload)\n\n\treq.Header.Add(\"\
          Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\treq.Header.Add(\"content-type\"\
          , \"application/json\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\t\
          defer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\
          \tfmt.Println(string(body))\n\n}"
      x-codegen-request-body-name: ResetPasswordEmailFinalizeRequest
  /api/v1/users/reset_password_email/verify:
    post:
      tags:
      - Users
      summary: Verify password reset data
      description: Verifies that the token id and token are valid for a given reset
        password request.
      operationId: resetPasswordEmailVerify
      requestBody:
        description: Token verification data
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/resetPasswordEmailVerify_request'
        required: false
      responses:
        "200":
          description: Token is valid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmptyResponse'
        "400":
          description: A malformed or bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorBadRequestExample'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorForbiddenExample'
      x-codeSamples:
      - lang: Shell
        source: |-
          curl --request POST \
            --url http://localhost:8080/api/v1/users/reset_password_email/verify \
            --header 'Authorization: Bearer REPLACE_BEARER_TOKEN' \
            --header 'content-type: application/json' \
            --data '{"email":"user1@gmail.com","token":"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9....","token_id":"bb214807-246e-43a5-a25d-41761d1cff9e"}'
      - lang: Node
        source: |-
          const fetch = require('node-fetch');

          let url = 'http://localhost:8080/api/v1/users/reset_password_email/verify';

          let options = {
            method: 'POST',
            headers: {
              Authorization: 'Bearer REPLACE_BEARER_TOKEN',
              'content-type': 'application/json'
            },
            body: '{"email":"user1@gmail.com","token":"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9....","token_id":"bb214807-246e-43a5-a25d-41761d1cff9e"}'
          };

          fetch(url, options)
            .then(res => res.json())
            .then(json => console.log(json))
            .catch(err => console.error('error:' + err));
      - lang: Ruby
        source: |-
          require 'uri'
          require 'net/http'

          url = URI("http://localhost:8080/api/v1/users/reset_password_email/verify")

          http = Net::HTTP.new(url.host, url.port)

          request = Net::HTTP::Post.new(url)
          request["Authorization"] = 'Bearer REPLACE_BEARER_TOKEN'
          request["content-type"] = 'application/json'
          request.body = "{\"email\":\"user1@gmail.com\",\"token\":\"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9....\",\"token_id\":\"bb214807-246e-43a5-a25d-41761d1cff9e\"}"

          response = http.request(request)
          puts response.read_body
      - lang: Python
        source: |-
          import requests

          url = "http://localhost:8080/api/v1/users/reset_password_email/verify"

          payload = {
              "email": "user1@gmail.com",
              "token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9....",
              "token_id": "bb214807-246e-43a5-a25d-41761d1cff9e"
          }
          headers = {
              "Authorization": "Bearer REPLACE_BEARER_TOKEN",
              "content-type": "application/json"
          }

          response = requests.request("POST", url, json=payload, headers=headers)

          print(response.text)
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\
          \n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"http://localhost:8080/api/v1/users/reset_password_email/verify\"\
          \n\n\tpayload := strings.NewReader(\"{\\\"email\\\":\\\"user1@gmail.com\\\
          \",\\\"token\\\":\\\"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9....\\\",\\\"token_id\\\
          \":\\\"bb214807-246e-43a5-a25d-41761d1cff9e\\\"}\")\n\n\treq, _ := http.NewRequest(\"\
          POST\", url, payload)\n\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\"\
          )\n\treq.Header.Add(\"content-type\", \"application/json\")\n\n\tres, _\
          \ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ :=\
          \ ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\
          \n}"
      x-codegen-request-body-name: ResetPasswordEmailVerifyTokenRequest
  /api/v1/webhooks/github_app:
    post:
      tags:
      - Github Apps
      summary: Github App Webhook
      description: Implements a Github App webhook.
      operationId: githubAppWebhook
      responses:
        "200":
          description: Successfully processed app webhook
          content: {}
        "400":
          description: A malformed or bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorBadRequestExample'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorForbiddenExample'
        "405":
          description: This endpoint is not supported on this Hatchet instance.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorNotSupportedExample'
      x-codeSamples:
      - lang: Shell
        source: |-
          curl --request POST \
            --url http://localhost:8080/api/v1/webhooks/github_app \
            --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'
      - lang: Node
        source: |-
          const fetch = require('node-fetch');

          let url = 'http://localhost:8080/api/v1/webhooks/github_app';

          let options = {method: 'POST', headers: {Authorization: 'Bearer REPLACE_BEARER_TOKEN'}};

          fetch(url, options)
            .then(res => res.json())
            .then(json => console.log(json))
            .catch(err => console.error('error:' + err));
      - lang: Ruby
        source: |-
          require 'uri'
          require 'net/http'

          url = URI("http://localhost:8080/api/v1/webhooks/github_app")

          http = Net::HTTP.new(url.host, url.port)

          request = Net::HTTP::Post.new(url)
          request["Authorization"] = 'Bearer REPLACE_BEARER_TOKEN'

          response = http.request(request)
          puts response.read_body
      - lang: Python
        source: |-
          import requests

          url = "http://localhost:8080/api/v1/webhooks/github_app"

          headers = {"Authorization": "Bearer REPLACE_BEARER_TOKEN"}

          response = requests.request("POST", url, headers=headers)

          print(response.text)
      - lang: Go
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\
          \n)\n\nfunc main() {\n\n\turl := \"http://localhost:8080/api/v1/webhooks/github_app\"\
          \n\n\treq, _ := http.NewRequest(\"POST\", url, nil)\n\n\treq.Header.Add(\"\
          Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
components:
  schemas:
    APIError:
      type: object
      properties:
        code:
          type: integer
          description: a custom Hatchet error code
          format: uint64
          example: 1400
          x-go-name: Code
        description:
          type: string
          description: a description for this error
          example: A descriptive error message
          x-go-name: Description
        docs_link:
          type: string
          description: "a link to the documentation for this error, if it exists"
          example: github.com/hatchet-dev/hatchet
          x-go-name: DocsLink
      x-go-package: github.com/hatchet-dev/hatchet/api/v1/types
    APIErrorBadRequestExample:
      type: object
      properties:
        code:
          type: integer
          description: a custom Hatchet error code
          format: uint64
          example: 1400
          x-go-name: Code
        description:
          type: string
          description: a description for this error
          example: Bad request (detailed error)
          x-go-name: Description
        docs_link:
          type: string
          description: "a link to the documentation for this error, if it exists"
          example: github.com/hatchet-dev/hatchet
          x-go-name: DocsLink
      x-go-package: github.com/hatchet-dev/hatchet/api/v1/types
    APIErrorForbiddenExample:
      type: object
      properties:
        code:
          type: integer
          description: a custom Hatchet error code
          format: uint64
          example: 1403
          x-go-name: Code
        description:
          type: string
          description: a description for this error
          example: Forbidden
          x-go-name: Description
        docs_link:
          type: string
          description: "a link to the documentation for this error, if it exists"
          example: github.com/hatchet-dev/hatchet
          x-go-name: DocsLink
      x-go-package: github.com/hatchet-dev/hatchet/api/v1/types
    APIErrorNotSupportedExample:
      type: object
      properties:
        code:
          type: integer
          description: a custom Hatchet error code
          format: uint64
          example: 1405
          x-go-name: Code
        description:
          type: string
          description: a description for this error
          example: This endpoint is not supported on this Hatchet instance.
          x-go-name: Description
        docs_link:
          type: string
          description: "a link to the documentation for this error, if it exists"
          example: github.com/hatchet-dev/hatchet
          x-go-name: DocsLink
      x-go-package: github.com/hatchet-dev/hatchet/api/v1/types
    APIErrors:
      type: object
      properties:
        errors:
          type: array
          items:
            $ref: '#/components/schemas/APIError'
          x-go-name: Errors
      x-go-package: github.com/hatchet-dev/hatchet/api/v1/types
    APIResourceMeta:
      type: object
      properties:
        created_at:
          type: string
          description: the time that this resource was created
          format: date-time
          example: 2022-12-13T15:06:48.888358-05:00
          x-go-name: CreatedAt
        id:
          type: string
          description: "the id of this resource, in UUID format"
          example: bb214807-246e-43a5-a25d-41761d1cff9e
          x-go-name: ID
        updated_at:
          type: string
          description: the time that this resource was last updated
          format: date-time
          example: 2022-12-13T15:06:48.888358-05:00
          x-go-name: UpdatedAt
      x-go-package: github.com/hatchet-dev/hatchet/api/v1/types
    APIServerMetadata:
      type: object
      properties:
        auth:
          $ref: '#/components/schemas/APIServerMetadataAuth'
      example:
        auth:
          require_email_verification: true
      x-go-package: github.com/hatchet-dev/hatchet/api/v1/types
    APIServerMetadataAuth:
      type: object
      properties:
        require_email_verification:
          type: boolean
          description: whether email verification is required in order to use the
            api/dashboard
          x-go-name: RequireEmailVerification
      example:
        require_email_verification: true
      x-go-package: github.com/hatchet-dev/hatchet/api/v1/types
    CreateModuleRequest:
      type: object
      properties:
        env_vars:
          type: object
          additionalProperties:
            type: string
          x-go-name: EnvVars
        github:
          $ref: '#/components/schemas/CreateModuleRequestGithub'
        name:
          type: string
          x-go-name: Name
        values_github:
          $ref: '#/components/schemas/CreateModuleValuesRequestGithub'
        values_raw:
          type: object
          additionalProperties:
            type: object
            properties: {}
          x-go-name: ValuesRaw
      example:
        values_raw:
          key: "{}"
        github:
          github_repository_branch: main
          path: ./staging/eks
          github_app_installation_id: bb214807-246e-43a5-a25d-41761d1cff9e
          github_repository_owner: hatchet-dev
          github_repository_name: infra
        name: name
        values_github:
          github_repository_branch: main
          path: ./staging/eks
          github_app_installation_id: bb214807-246e-43a5-a25d-41761d1cff9e
          github_repository_owner: hatchet-dev
          github_repository_name: infra
        env_vars:
          key: env_vars
      x-go-package: github.com/hatchet-dev/hatchet/api/v1/types
    CreateModuleRequestGithub:
      required:
      - github_app_installation_id
      - github_repository_branch
      - github_repository_name
      - github_repository_owner
      - path
      type: object
      properties:
        github_app_installation_id:
          type: string
          description: "this refers to the Hatchet app installation id, **not** the\
            \ installation id stored on Github"
          example: bb214807-246e-43a5-a25d-41761d1cff9e
          x-go-name: GithubAppInstallationID
        github_repository_branch:
          type: string
          description: the repository branch on Github
          example: main
          x-go-name: GithubRepositoryBranch
        github_repository_name:
          type: string
          description: the repository name on Github
          example: infra
          x-go-name: GithubRepositoryName
        github_repository_owner:
          type: string
          description: the repository owner on Github
          example: hatchet-dev
          x-go-name: GithubRepositoryOwner
        path:
          type: string
          description: path to the module in the github repository
          example: ./staging/eks
          x-go-name: Path
      example:
        github_repository_branch: main
        path: ./staging/eks
        github_app_installation_id: bb214807-246e-43a5-a25d-41761d1cff9e
        github_repository_owner: hatchet-dev
        github_repository_name: infra
      x-go-package: github.com/hatchet-dev/hatchet/api/v1/types
    CreateModuleResponse:
      $ref: '#/components/schemas/Module'
    CreateModuleValuesRequestGithub:
      required:
      - github_app_installation_id
      - github_repository_branch
      - github_repository_name
      - github_repository_owner
      - path
      type: object
      properties:
        github_app_installation_id:
          type: string
          description: "this refers to the Hatchet app installation id, **not** the\
            \ installation id stored on Github"
          example: bb214807-246e-43a5-a25d-41761d1cff9e
          x-go-name: GithubAppInstallationID
        github_repository_branch:
          type: string
          description: the repository branch on Github
          example: main
          x-go-name: GithubRepositoryBranch
        github_repository_name:
          type: string
          description: the repository name on Github
          example: infra
          x-go-name: GithubRepositoryName
        github_repository_owner:
          type: string
          description: the repository owner on Github
          example: hatchet-dev
          x-go-name: GithubRepositoryOwner
        path:
          type: string
          description: path to the module values in the github repository (including
            file name)
          example: ./staging/eks
          x-go-name: Path
      example:
        github_repository_branch: main
        path: ./staging/eks
        github_app_installation_id: bb214807-246e-43a5-a25d-41761d1cff9e
        github_repository_owner: hatchet-dev
        github_repository_name: infra
      x-go-package: github.com/hatchet-dev/hatchet/api/v1/types
    CreateMonitorRequest:
      type: object
      properties:
        cron_schedule:
          type: string
          x-go-name: CronSchedule
        description:
          type: string
          x-go-name: Description
        disabled:
          type: boolean
          description: |-
            Whether the monitor is disabled. In order to turn the monitor off for all modules, set
            disabled=true. Passing in an empty module list will trigger this monitor for all modules.
          x-go-name: Disabled
        kind:
          type: string
          x-go-package: github.com/hatchet-dev/hatchet/api/v1/types
        modules:
          type: array
          description: "A list of module ids. If empty or omitted, this monitor targets\
            \ all modules."
          items:
            type: string
          x-go-name: Modules
        name:
          type: string
          x-go-name: Name
        policy_bytes:
          type: string
          x-go-name: PolicyBytes
      example:
        policy_bytes: policy_bytes
        cron_schedule: cron_schedule
        kind: kind
        name: name
        description: description
        disabled: true
        modules:
        - modules
        - modules
      x-go-package: github.com/hatchet-dev/hatchet/api/v1/types
    CreateMonitorResponse:
      $ref: '#/components/schemas/ModuleMonitor'
    CreateMonitorResultRequest:
      type: object
      properties:
        failure_messages:
          type: array
          items:
            type: string
          x-go-name: FailureMessages
        monitor_id:
          type: string
          x-go-name: MonitorID
        severity:
          type: string
          x-go-name: Severity
        status:
          type: string
          x-go-name: Status
        success_message:
          type: string
          x-go-name: SuccessMessage
        title:
          type: string
          x-go-name: Title
      example:
        severity: severity
        monitor_id: monitor_id
        success_message: success_message
        title: title
        failure_messages:
        - failure_messages
        - failure_messages
        status: status
      x-go-package: github.com/hatchet-dev/hatchet/api/v1/types
    CreateOrgMemberInviteRequest:
      required:
      - invitee_email
      - invitee_policies
      type: object
      properties:
        invitee_email:
          type: string
          description: the email address to use for the invite
          example: user1@gmail.com
          x-go-name: InviteeEmail
        invitee_policies:
          type: array
          description: the set of policies for this user
          items:
            $ref: '#/components/schemas/OrganizationPolicyReference'
          x-go-name: InviteePolicies
      example:
        invitee_email: user1@gmail.com
        invitee_policies:
        - name: name
          id: id
        - name: name
          id: id
      x-go-package: github.com/hatchet-dev/hatchet/api/v1/types
    CreateOrgMemberInviteResponse:
      $ref: '#/components/schemas/OrganizationMember'
    CreateOrganizationRequest:
      required:
      - display_name
      type: object
      properties:
        display_name:
          type: string
          description: the display name for the organization
          example: Organization 1
          x-go-name: DisplayName
      example:
        display_name: Organization 1
      x-go-package: github.com/hatchet-dev/hatchet/api/v1/types
    CreateOrganizationResponse:
      $ref: '#/components/schemas/Organization'
    CreatePATRequest:
      required:
      - display_name
      type: object
      properties:
        display_name:
          type: string
          description: the display name for the personal access token
          example: cli-token-1234
          x-go-name: DisplayName
      x-go-package: github.com/hatchet-dev/hatchet/api/v1/types
    CreatePATResponse:
      type: object
      properties:
        pat:
          $ref: '#/components/schemas/PersonalAccessToken'
        token:
          type: string
          description: the raw JWT token. see API documentation for details
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9....
          x-go-name: Token
      example:
        pat:
          expires: 2023-01-12T17:09:28.35059-05:00
          updated_at: 2022-12-13T15:06:48.888358-05:00
          created_at: 2022-12-13T15:06:48.888358-05:00
          id: bb214807-246e-43a5-a25d-41761d1cff9e
          display_name: cli-token-1234
          revoked: false
        token: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9....
      x-go-package: github.com/hatchet-dev/hatchet/api/v1/types
    CreateTeamRequest:
      required:
      - display_name
      type: object
      properties:
        display_name:
          type: string
          description: the display name for the team
          example: Team 1
          x-go-name: DisplayName
      example:
        display_name: Team 1
      x-go-package: github.com/hatchet-dev/hatchet/api/v1/types
    CreateTeamResponse:
      $ref: '#/components/schemas/Team'
    CreateTerraformPlanRequest:
      required:
      - plan_json
      - plan_pretty
      type: object
      properties:
        plan_json:
          type: string
          description: the JSON contents of the plan
          x-go-name: PlanJSON
        plan_pretty:
          type: string
          description: the prettified contents of the plan
          x-go-name: PlanPretty
      example:
        plan_pretty: plan_pretty
        plan_json: plan_json
      x-go-package: github.com/hatchet-dev/hatchet/api/v1/types
    CreateTerraformStateRequest:
      type: object
      properties:
        ID:
          type: string
      x-go-package: github.com/hatchet-dev/hatchet/api/v1/types
    CreateUserRequest:
      required:
      - display_name
      - email
      - password
      type: object
      properties:
        display_name:
          type: string
          description: the display name for this user
          example: User 1
          x-go-name: DisplayName
        email:
          type: string
          description: the email address for this user
          example: user1@gmail.com
          x-go-name: Email
        password:
          type: string
          description: the password for this user
          example: Securepassword123
          x-go-name: Password
      example:
        password: Securepassword123
        display_name: User 1
        email: user1@gmail.com
      x-go-package: github.com/hatchet-dev/hatchet/api/v1/types
    CreateUserResponse:
      $ref: '#/components/schemas/User'
    DeleteModuleResponse:
      $ref: '#/components/schemas/Module'
    DeleteMonitorResponse:
      $ref: '#/components/schemas/ModuleMonitor'
    DeleteOrganizationResponse:
      $ref: '#/components/schemas/Organization'
    DeletePATResponse:
      $ref: '#/components/schemas/PersonalAccessToken'
    DeleteTeamResponse:
      $ref: '#/components/schemas/Team'
    EmptyResponse:
      type: object
      x-go-package: github.com/hatchet-dev/hatchet/api/v1/types
    FinalizeModuleRunRequest:
      required:
      - description
      - status
      type: object
      properties:
        description:
          type: string
          description: the description for the module run status
          x-go-name: Description
        status:
          type: string
          x-go-package: github.com/hatchet-dev/hatchet/api/v1/types
      example:
        description: description
        status: status
      x-go-package: github.com/hatchet-dev/hatchet/api/v1/types
    FinalizeModuleRunResponse:
      $ref: '#/components/schemas/ModuleRunOverview'
    ForceUnlockModuleResponse:
      $ref: '#/components/schemas/Module'
    GetLogsResponse:
      type: object
      properties:
        logs:
          type: array
          items:
            type: string
          x-go-name: Logs
      example:
        logs:
        - logs
        - logs
      x-go-package: github.com/hatchet-dev/hatchet/api/v1/types
    GetModuleEnvVarsVersionResponse:
      $ref: '#/components/schemas/ModuleEnvVarsVersion'
    GetModulePlanSummaryResponse:
      type: array
      items:
        $ref: '#/components/schemas/ModulePlannedChangeSummary'
      x-go-package: github.com/hatchet-dev/hatchet/api/v1/types
      x-schema-name: GetModulePlanSummaryResponse
    GetModuleResponse:
      $ref: '#/components/schemas/Module'
    GetModuleRunResponse:
      $ref: '#/components/schemas/ModuleRun'
    GetModuleTarballURLResponse:
      type: object
      properties:
        url:
          type: string
          x-go-name: URL
      example:
        url: url
      x-go-package: github.com/hatchet-dev/hatchet/api/v1/types
    GetModuleValuesCurrentResponse:
      type: object
      additionalProperties:
        type: object
        properties: {}
        example: {}
      x-go-package: github.com/hatchet-dev/hatchet/api/v1/types
      x-schema-name: GetModuleValuesCurrentResponse
    GetModuleValuesResponse:
      $ref: '#/components/schemas/ModuleValues'
    GetMonitorResponse:
      $ref: '#/components/schemas/ModuleMonitor'
    GetOrgMemberResponse:
      $ref: '#/components/schemas/OrganizationMember'
    GetOrganizationResponse:
      $ref: '#/components/schemas/Organization'
    GetPATResponse:
      $ref: '#/components/schemas/PersonalAccessToken'
    GetUserResponse:
      $ref: '#/components/schemas/User'
    GithubAppInstallation:
      type: object
      properties:
        account_avatar_url:
          type: string
          x-go-name: AccountAvatarURL
        account_name:
          type: string
          x-go-name: AccountName
        created_at:
          type: string
          description: the time that this resource was created
          format: date-time
          example: 2022-12-13T15:06:48.888358-05:00
          x-go-name: CreatedAt
        id:
          type: string
          description: "the id of this resource, in UUID format"
          example: bb214807-246e-43a5-a25d-41761d1cff9e
          x-go-name: ID
        installation_id:
          type: integer
          format: int64
          x-go-name: InstallationID
        installation_settings_url:
          type: string
          x-go-name: InstallationSettingsURL
        updated_at:
          type: string
          description: the time that this resource was last updated
          format: date-time
          example: 2022-12-13T15:06:48.888358-05:00
          x-go-name: UpdatedAt
      example:
        installation_settings_url: installation_settings_url
        updated_at: 2022-12-13T15:06:48.888358-05:00
        account_name: account_name
        created_at: 2022-12-13T15:06:48.888358-05:00
        installation_id: 0
        id: bb214807-246e-43a5-a25d-41761d1cff9e
        account_avatar_url: account_avatar_url
      x-go-package: github.com/hatchet-dev/hatchet/api/v1/types
    GithubBranch:
      type: object
      properties:
        branch_name:
          type: string
          x-go-name: BranchName
        is_default:
          type: boolean
          x-go-name: IsDefault
      example:
        branch_name: branch_name
        is_default: true
      x-go-package: github.com/hatchet-dev/hatchet/api/v1/types
    GithubPullRequest:
      type: object
      properties:
        github_pull_request_base_branch:
          type: string
          x-go-name: GithubPullRequestBaseBranch
        github_pull_request_head_branch:
          type: string
          x-go-name: GithubPullRequestHeadBranch
        github_pull_request_id:
          type: integer
          format: int64
          x-go-name: GithubPullRequestID
        github_pull_request_number:
          type: integer
          format: int64
          x-go-name: GithubPullRequestNumber
        github_pull_request_state:
          type: string
          x-go-name: GithubPullRequestState
        github_pull_request_title:
          type: string
          x-go-name: GithubPullRequestTitle
        github_repository_name:
          type: string
          x-go-name: GithubRepositoryName
        github_repository_owner:
          type: string
          x-go-name: GithubRepositoryOwner
      example:
        github_pull_request_base_branch: github_pull_request_base_branch
        github_pull_request_state: github_pull_request_state
        github_pull_request_head_branch: github_pull_request_head_branch
        github_pull_request_title: github_pull_request_title
        github_repository_owner: github_repository_owner
        github_pull_request_id: 0
        github_pull_request_number: 6
        github_repository_name: github_repository_name
      x-go-package: github.com/hatchet-dev/hatchet/api/v1/types
    GithubRepo:
      type: object
      properties:
        repo_name:
          type: string
          x-go-name: RepoName
        repo_owner:
          type: string
          x-go-name: RepoOwner
      example:
        repo_name: repo_name
        repo_owner: repo_owner
      x-go-package: github.com/hatchet-dev/hatchet/api/v1/types
    ListGithubAppInstallationsResponse:
      type: object
      properties:
        pagination:
          $ref: '#/components/schemas/PaginationResponse'
        rows:
          type: array
          items:
            $ref: '#/components/schemas/GithubAppInstallation'
          x-go-name: Rows
      example:
        pagination:
          next_page: 3
          num_pages: 10
          current_page: 2
        rows:
        - installation_settings_url: installation_settings_url
          updated_at: 2022-12-13T15:06:48.888358-05:00
          account_name: account_name
          created_at: 2022-12-13T15:06:48.888358-05:00
          installation_id: 0
          id: bb214807-246e-43a5-a25d-41761d1cff9e
          account_avatar_url: account_avatar_url
        - installation_settings_url: installation_settings_url
          updated_at: 2022-12-13T15:06:48.888358-05:00
          account_name: account_name
          created_at: 2022-12-13T15:06:48.888358-05:00
          installation_id: 0
          id: bb214807-246e-43a5-a25d-41761d1cff9e
          account_avatar_url: account_avatar_url
      x-go-package: github.com/hatchet-dev/hatchet/api/v1/types
    ListGithubRepoBranchesResponse:
      type: array
      items:
        $ref: '#/components/schemas/GithubBranch'
      x-go-package: github.com/hatchet-dev/hatchet/api/v1/types
      x-schema-name: ListGithubRepoBranchesResponse
    ListGithubReposResponse:
      type: array
      items:
        $ref: '#/components/schemas/GithubRepo'
      x-go-package: github.com/hatchet-dev/hatchet/api/v1/types
      x-schema-name: ListGithubReposResponse
    ListModuleRunsResponse:
      type: object
      properties:
        pagination:
          $ref: '#/components/schemas/PaginationResponse'
        rows:
          type: array
          items:
            $ref: '#/components/schemas/ModuleRunOverview'
          x-go-name: Rows
      example:
        pagination:
          next_page: 3
          num_pages: 10
          current_page: 2
        rows:
        - status_description: status_description
          updated_at: 2022-12-13T15:06:48.888358-05:00
          kind: kind
          created_at: 2022-12-13T15:06:48.888358-05:00
          id: bb214807-246e-43a5-a25d-41761d1cff9e
          status: status
        - status_description: status_description
          updated_at: 2022-12-13T15:06:48.888358-05:00
          kind: kind
          created_at: 2022-12-13T15:06:48.888358-05:00
          id: bb214807-246e-43a5-a25d-41761d1cff9e
          status: status
      x-go-package: github.com/hatchet-dev/hatchet/api/v1/types
    ListModulesResponse:
      type: object
      properties:
        pagination:
          $ref: '#/components/schemas/PaginationResponse'
        rows:
          type: array
          items:
            $ref: '#/components/schemas/Module'
          x-go-name: Rows
      example:
        pagination:
          next_page: 3
          num_pages: 10
          current_page: 2
        rows:
        - updated_at: 2022-12-13T15:06:48.888358-05:00
          lock_kind: lock_kind
          current_env_vars_version_id: current_env_vars_version_id
          name: eks
          created_at: 2022-12-13T15:06:48.888358-05:00
          id: bb214807-246e-43a5-a25d-41761d1cff9e
          current_values_version_id: current_values_version_id
          deployment:
            path: path
            github_app_installation_id: github_app_installation_id
            github_repo_name: github_repo_name
            github_repo_branch: github_repo_branch
            github_repo_owner: github_repo_owner
          lock_id: lock_id
        - updated_at: 2022-12-13T15:06:48.888358-05:00
          lock_kind: lock_kind
          current_env_vars_version_id: current_env_vars_version_id
          name: eks
          created_at: 2022-12-13T15:06:48.888358-05:00
          id: bb214807-246e-43a5-a25d-41761d1cff9e
          current_values_version_id: current_values_version_id
          deployment:
            path: path
            github_app_installation_id: github_app_installation_id
            github_repo_name: github_repo_name
            github_repo_branch: github_repo_branch
            github_repo_owner: github_repo_owner
          lock_id: lock_id
      x-go-package: github.com/hatchet-dev/hatchet/api/v1/types
    ListMonitorResultsResponse:
      type: object
      properties:
        pagination:
          $ref: '#/components/schemas/PaginationResponse'
        rows:
          type: array
          items:
            $ref: '#/components/schemas/ModuleMonitorResult'
          x-go-name: Rows
      example:
        pagination:
          next_page: 3
          num_pages: 10
          current_page: 2
        rows:
        - severity: severity
          module_id: module_id
          updated_at: 2022-12-13T15:06:48.888358-05:00
          module_monitor_id: module_monitor_id
          created_at: 2022-12-13T15:06:48.888358-05:00
          id: bb214807-246e-43a5-a25d-41761d1cff9e
          module_name: module_name
          module_run_id: module_run_id
          message: message
          title: title
          status: status
        - severity: severity
          module_id: module_id
          updated_at: 2022-12-13T15:06:48.888358-05:00
          module_monitor_id: module_monitor_id
          created_at: 2022-12-13T15:06:48.888358-05:00
          id: bb214807-246e-43a5-a25d-41761d1cff9e
          module_name: module_name
          module_run_id: module_run_id
          message: message
          title: title
          status: status
      x-go-package: github.com/hatchet-dev/hatchet/api/v1/types
    ListMonitorsResponse:
      type: object
      properties:
        pagination:
          $ref: '#/components/schemas/PaginationResponse'
        rows:
          type: array
          items:
            $ref: '#/components/schemas/ModuleMonitorMeta'
          x-go-name: Rows
      example:
        pagination:
          next_page: 3
          num_pages: 10
          current_page: 2
        rows:
        - cron_schedule: cron_schedule
          updated_at: 2022-12-13T15:06:48.888358-05:00
          kind: kind
          name: drift
          created_at: 2022-12-13T15:06:48.888358-05:00
          description: detects drift
          disabled: true
          id: bb214807-246e-43a5-a25d-41761d1cff9e
          is_default: true
        - cron_schedule: cron_schedule
          updated_at: 2022-12-13T15:06:48.888358-05:00
          kind: kind
          name: drift
          created_at: 2022-12-13T15:06:48.888358-05:00
          description: detects drift
          disabled: true
          id: bb214807-246e-43a5-a25d-41761d1cff9e
          is_default: true
      x-go-package: github.com/hatchet-dev/hatchet/api/v1/types
    ListOrgMembersResponse:
      type: object
      properties:
        pagination:
          $ref: '#/components/schemas/PaginationResponse'
        rows:
          type: array
          items:
            $ref: '#/components/schemas/OrganizationMemberSanitized'
          x-go-name: Rows
      example:
        pagination:
          next_page: 3
          num_pages: 10
          current_page: 2
        rows:
        - updated_at: 2022-12-13T15:06:48.888358-05:00
          invite_accepted: true
          created_at: 2022-12-13T15:06:48.888358-05:00
          organization_policies:
          - updated_at: 2022-12-13T15:06:48.888358-05:00
            name: name
            created_at: 2022-12-13T15:06:48.888358-05:00
            id: bb214807-246e-43a5-a25d-41761d1cff9e
          - updated_at: 2022-12-13T15:06:48.888358-05:00
            name: name
            created_at: 2022-12-13T15:06:48.888358-05:00
            id: bb214807-246e-43a5-a25d-41761d1cff9e
          id: bb214807-246e-43a5-a25d-41761d1cff9e
          invite:
            invitee_email: invitee_email
            expires: 2000-01-23T04:56:07.000+00:00
            updated_at: 2022-12-13T15:06:48.888358-05:00
            created_at: 2022-12-13T15:06:48.888358-05:00
            id: bb214807-246e-43a5-a25d-41761d1cff9e
          user:
            display_name: User 1
            email: user1@gmail.com
        - updated_at: 2022-12-13T15:06:48.888358-05:00
          invite_accepted: true
          created_at: 2022-12-13T15:06:48.888358-05:00
          organization_policies:
          - updated_at: 2022-12-13T15:06:48.888358-05:00
            name: name
            created_at: 2022-12-13T15:06:48.888358-05:00
            id: bb214807-246e-43a5-a25d-41761d1cff9e
          - updated_at: 2022-12-13T15:06:48.888358-05:00
            name: name
            created_at: 2022-12-13T15:06:48.888358-05:00
            id: bb214807-246e-43a5-a25d-41761d1cff9e
          id: bb214807-246e-43a5-a25d-41761d1cff9e
          invite:
            invitee_email: invitee_email
            expires: 2000-01-23T04:56:07.000+00:00
            updated_at: 2022-12-13T15:06:48.888358-05:00
            created_at: 2022-12-13T15:06:48.888358-05:00
            id: bb214807-246e-43a5-a25d-41761d1cff9e
          user:
            display_name: User 1
            email: user1@gmail.com
      x-go-package: github.com/hatchet-dev/hatchet/api/v1/types
    ListPATsResponse:
      type: object
      properties:
        pagination:
          $ref: '#/components/schemas/PaginationResponse'
        rows:
          type: array
          items:
            $ref: '#/components/schemas/PersonalAccessToken'
          x-go-name: Rows
      example:
        pagination:
          next_page: 3
          num_pages: 10
          current_page: 2
        rows:
        - expires: 2023-01-12T17:09:28.35059-05:00
          updated_at: 2022-12-13T15:06:48.888358-05:00
          created_at: 2022-12-13T15:06:48.888358-05:00
          id: bb214807-246e-43a5-a25d-41761d1cff9e
          display_name: cli-token-1234
          revoked: false
        - expires: 2023-01-12T17:09:28.35059-05:00
          updated_at: 2022-12-13T15:06:48.888358-05:00
          created_at: 2022-12-13T15:06:48.888358-05:00
          id: bb214807-246e-43a5-a25d-41761d1cff9e
          display_name: cli-token-1234
          revoked: false
      x-go-package: github.com/hatchet-dev/hatchet/api/v1/types
    ListTeamMembersResponse:
      type: object
      properties:
        pagination:
          $ref: '#/components/schemas/PaginationResponse'
        rows:
          type: array
          items:
            $ref: '#/components/schemas/TeamMember'
          x-go-name: Rows
      example:
        pagination:
          next_page: 3
          num_pages: 10
          current_page: 2
        rows:
        - team_policies:
          - updated_at: 2022-12-13T15:06:48.888358-05:00
            name: name
            created_at: 2022-12-13T15:06:48.888358-05:00
            id: bb214807-246e-43a5-a25d-41761d1cff9e
          - updated_at: 2022-12-13T15:06:48.888358-05:00
            name: name
            created_at: 2022-12-13T15:06:48.888358-05:00
            id: bb214807-246e-43a5-a25d-41761d1cff9e
          updated_at: 2022-12-13T15:06:48.888358-05:00
          org_member:
            updated_at: 2022-12-13T15:06:48.888358-05:00
            invite_accepted: true
            created_at: 2022-12-13T15:06:48.888358-05:00
            organization_policies:
            - updated_at: 2022-12-13T15:06:48.888358-05:00
              name: name
              created_at: 2022-12-13T15:06:48.888358-05:00
              id: bb214807-246e-43a5-a25d-41761d1cff9e
            - updated_at: 2022-12-13T15:06:48.888358-05:00
              name: name
              created_at: 2022-12-13T15:06:48.888358-05:00
              id: bb214807-246e-43a5-a25d-41761d1cff9e
            id: bb214807-246e-43a5-a25d-41761d1cff9e
            invite:
              invitee_email: invitee_email
              expires: 2000-01-23T04:56:07.000+00:00
              updated_at: 2022-12-13T15:06:48.888358-05:00
              created_at: 2022-12-13T15:06:48.888358-05:00
              id: bb214807-246e-43a5-a25d-41761d1cff9e
            user:
              display_name: User 1
              email: user1@gmail.com
          created_at: 2022-12-13T15:06:48.888358-05:00
          id: bb214807-246e-43a5-a25d-41761d1cff9e
        - team_policies:
          - updated_at: 2022-12-13T15:06:48.888358-05:00
            name: name
            created_at: 2022-12-13T15:06:48.888358-05:00
            id: bb214807-246e-43a5-a25d-41761d1cff9e
          - updated_at: 2022-12-13T15:06:48.888358-05:00
            name: name
            created_at: 2022-12-13T15:06:48.888358-05:00
            id: bb214807-246e-43a5-a25d-41761d1cff9e
          updated_at: 2022-12-13T15:06:48.888358-05:00
          org_member:
            updated_at: 2022-12-13T15:06:48.888358-05:00
            invite_accepted: true
            created_at: 2022-12-13T15:06:48.888358-05:00
            organization_policies:
            - updated_at: 2022-12-13T15:06:48.888358-05:00
              name: name
              created_at: 2022-12-13T15:06:48.888358-05:00
              id: bb214807-246e-43a5-a25d-41761d1cff9e
            - updated_at: 2022-12-13T15:06:48.888358-05:00
              name: name
              created_at: 2022-12-13T15:06:48.888358-05:00
              id: bb214807-246e-43a5-a25d-41761d1cff9e
            id: bb214807-246e-43a5-a25d-41761d1cff9e
            invite:
              invitee_email: invitee_email
              expires: 2000-01-23T04:56:07.000+00:00
              updated_at: 2022-12-13T15:06:48.888358-05:00
              created_at: 2022-12-13T15:06:48.888358-05:00
              id: bb214807-246e-43a5-a25d-41761d1cff9e
            user:
              display_name: User 1
              email: user1@gmail.com
          created_at: 2022-12-13T15:06:48.888358-05:00
          id: bb214807-246e-43a5-a25d-41761d1cff9e
      x-go-package: github.com/hatchet-dev/hatchet/api/v1/types
    ListTeamsResponse:
      type: object
      properties:
        pagination:
          $ref: '#/components/schemas/PaginationResponse'
        rows:
          type: array
          items:
            $ref: '#/components/schemas/Team'
          x-go-name: Rows
      example:
        pagination:
          next_page: 3
          num_pages: 10
          current_page: 2
        rows:
        - updated_at: 2022-12-13T15:06:48.888358-05:00
          created_at: 2022-12-13T15:06:48.888358-05:00
          id: bb214807-246e-43a5-a25d-41761d1cff9e
          display_name: Team 1
        - updated_at: 2022-12-13T15:06:48.888358-05:00
          created_at: 2022-12-13T15:06:48.888358-05:00
          id: bb214807-246e-43a5-a25d-41761d1cff9e
          display_name: Team 1
      x-go-package: github.com/hatchet-dev/hatchet/api/v1/types
    ListUserOrgsResponse:
      type: object
      properties:
        pagination:
          $ref: '#/components/schemas/PaginationResponse'
        rows:
          type: array
          items:
            $ref: '#/components/schemas/Organization'
          x-go-name: Rows
      example:
        pagination:
          next_page: 3
          num_pages: 10
          current_page: 2
        rows:
        - owner:
            display_name: User 1
            email: user1@gmail.com
          updated_at: 2022-12-13T15:06:48.888358-05:00
          created_at: 2022-12-13T15:06:48.888358-05:00
          id: bb214807-246e-43a5-a25d-41761d1cff9e
          display_name: Organization 1
        - owner:
            display_name: User 1
            email: user1@gmail.com
          updated_at: 2022-12-13T15:06:48.888358-05:00
          created_at: 2022-12-13T15:06:48.888358-05:00
          id: bb214807-246e-43a5-a25d-41761d1cff9e
          display_name: Organization 1
      x-go-package: github.com/hatchet-dev/hatchet/api/v1/types
    ListUserTeamsResponse:
      type: object
      properties:
        pagination:
          $ref: '#/components/schemas/PaginationResponse'
        rows:
          type: array
          items:
            $ref: '#/components/schemas/Team'
          x-go-name: Rows
      example:
        pagination:
          next_page: 3
          num_pages: 10
          current_page: 2
        rows:
        - updated_at: 2022-12-13T15:06:48.888358-05:00
          created_at: 2022-12-13T15:06:48.888358-05:00
          id: bb214807-246e-43a5-a25d-41761d1cff9e
          display_name: Team 1
        - updated_at: 2022-12-13T15:06:48.888358-05:00
          created_at: 2022-12-13T15:06:48.888358-05:00
          id: bb214807-246e-43a5-a25d-41761d1cff9e
          display_name: Team 1
      x-go-package: github.com/hatchet-dev/hatchet/api/v1/types
    LockTerraformStateRequest:
      type: object
      properties:
        Created:
          type: string
        ID:
          type: string
        Info:
          type: string
        Operation:
          type: string
        Path:
          type: string
        Version:
          type: string
        Who:
          type: string
      x-go-package: github.com/hatchet-dev/hatchet/api/v1/types
    LockTerraformStateResponse:
      type: object
      properties:
        Created:
          type: string
        ID:
          type: string
        Info:
          type: string
        Operation:
          type: string
        Path:
          type: string
        Version:
          type: string
        Who:
          type: string
      x-go-package: github.com/hatchet-dev/hatchet/api/v1/types
    LoginUserRequest:
      required:
      - email
      - password
      type: object
      properties:
        email:
          type: string
          description: the email address for this user
          example: user1@gmail.com
          x-go-name: Email
        password:
          type: string
          description: the password for this user
          example: Securepassword123
          x-go-name: Password
      example:
        password: Securepassword123
        email: user1@gmail.com
      x-go-package: github.com/hatchet-dev/hatchet/api/v1/types
    LoginUserResponse:
      $ref: '#/components/schemas/User'
    Module:
      type: object
      properties:
        created_at:
          type: string
          description: the time that this resource was created
          format: date-time
          example: 2022-12-13T15:06:48.888358-05:00
          x-go-name: CreatedAt
        current_env_vars_version_id:
          type: string
          x-go-name: CurrentEnvVarsVersionID
        current_values_version_id:
          type: string
          x-go-name: CurrentValuesVersionID
        deployment:
          $ref: '#/components/schemas/ModuleDeploymentConfig'
        id:
          type: string
          description: "the id of this resource, in UUID format"
          example: bb214807-246e-43a5-a25d-41761d1cff9e
          x-go-name: ID
        lock_id:
          type: string
          x-go-name: LockID
        lock_kind:
          type: string
          x-go-package: github.com/hatchet-dev/hatchet/api/v1/types
        name:
          type: string
          description: the name for the module
          example: eks
          x-go-name: Name
        updated_at:
          type: string
          description: the time that this resource was last updated
          format: date-time
          example: 2022-12-13T15:06:48.888358-05:00
          x-go-name: UpdatedAt
      example:
        updated_at: 2022-12-13T15:06:48.888358-05:00
        lock_kind: lock_kind
        current_env_vars_version_id: current_env_vars_version_id
        name: eks
        created_at: 2022-12-13T15:06:48.888358-05:00
        id: bb214807-246e-43a5-a25d-41761d1cff9e
        current_values_version_id: current_values_version_id
        deployment:
          path: path
          github_app_installation_id: github_app_installation_id
          github_repo_name: github_repo_name
          github_repo_branch: github_repo_branch
          github_repo_owner: github_repo_owner
        lock_id: lock_id
      x-go-package: github.com/hatchet-dev/hatchet/api/v1/types
    ModuleDeploymentConfig:
      type: object
      properties:
        github_app_installation_id:
          type: string
          x-go-name: GithubAppInstallationID
        github_repo_branch:
          type: string
          x-go-name: GithubRepoBranch
        github_repo_name:
          type: string
          x-go-name: GithubRepoName
        github_repo_owner:
          type: string
          x-go-name: GithubRepoOwner
        path:
          type: string
          x-go-name: Path
      example:
        path: path
        github_app_installation_id: github_app_installation_id
        github_repo_name: github_repo_name
        github_repo_branch: github_repo_branch
        github_repo_owner: github_repo_owner
      x-go-package: github.com/hatchet-dev/hatchet/api/v1/types
    ModuleEnvVar:
      type: object
      properties:
        key:
          type: string
          x-go-name: Key
        val:
          type: string
          x-go-name: Val
      example:
        val: val
        key: key
      x-go-package: github.com/hatchet-dev/hatchet/api/v1/types
    ModuleEnvVarsVersion:
      type: object
      properties:
        created_at:
          type: string
          description: the time that this resource was created
          format: date-time
          example: 2022-12-13T15:06:48.888358-05:00
          x-go-name: CreatedAt
        env_vars:
          type: array
          items:
            $ref: '#/components/schemas/ModuleEnvVar'
          x-go-name: EnvVars
        id:
          type: string
          description: "the id of this resource, in UUID format"
          example: bb214807-246e-43a5-a25d-41761d1cff9e
          x-go-name: ID
        updated_at:
          type: string
          description: the time that this resource was last updated
          format: date-time
          example: 2022-12-13T15:06:48.888358-05:00
          x-go-name: UpdatedAt
        version:
          type: integer
          format: uint64
          x-go-name: Version
      example:
        updated_at: 2022-12-13T15:06:48.888358-05:00
        created_at: 2022-12-13T15:06:48.888358-05:00
        id: bb214807-246e-43a5-a25d-41761d1cff9e
        version: 0
        env_vars:
        - val: val
          key: key
        - val: val
          key: key
      x-go-package: github.com/hatchet-dev/hatchet/api/v1/types
    ModuleLockKind:
      type: string
      x-go-package: github.com/hatchet-dev/hatchet/api/v1/types
    ModuleMonitor:
      type: object
      properties:
        created_at:
          type: string
          description: the time that this resource was created
          format: date-time
          example: 2022-12-13T15:06:48.888358-05:00
          x-go-name: CreatedAt
        cron_schedule:
          type: string
          description: the cron schedule for the monitor
          x-go-name: CronSchedule
        description:
          type: string
          description: the description for the monitor
          example: detects drift
          x-go-name: Description
        disabled:
          type: boolean
          description: whether the monitor is currently disabled
          x-go-name: Disabled
        id:
          type: string
          description: "the id of this resource, in UUID format"
          example: bb214807-246e-43a5-a25d-41761d1cff9e
          x-go-name: ID
        is_default:
          type: boolean
          description: whether this monitor is a default for all modules in the team
          x-go-name: IsDefault
        kind:
          type: string
          x-go-package: github.com/hatchet-dev/hatchet/api/v1/types
        modules:
          type: array
          description: The list of modules that this monitor filters for
          items:
            type: string
          x-go-name: Modules
        name:
          type: string
          description: the name for the monitor
          example: drift
          x-go-name: Name
        policy_bytes:
          type: string
          description: the policy bytes for the monitor
          x-go-name: PolicyBytes
        updated_at:
          type: string
          description: the time that this resource was last updated
          format: date-time
          example: 2022-12-13T15:06:48.888358-05:00
          x-go-name: UpdatedAt
      example:
        policy_bytes: policy_bytes
        cron_schedule: cron_schedule
        updated_at: 2022-12-13T15:06:48.888358-05:00
        kind: kind
        name: drift
        created_at: 2022-12-13T15:06:48.888358-05:00
        description: detects drift
        disabled: true
        id: bb214807-246e-43a5-a25d-41761d1cff9e
        is_default: true
        modules:
        - modules
        - modules
      x-go-package: github.com/hatchet-dev/hatchet/api/v1/types
    ModuleMonitorKind:
      type: string
      x-go-package: github.com/hatchet-dev/hatchet/api/v1/types
    ModuleMonitorMeta:
      type: object
      properties:
        created_at:
          type: string
          description: the time that this resource was created
          format: date-time
          example: 2022-12-13T15:06:48.888358-05:00
          x-go-name: CreatedAt
        cron_schedule:
          type: string
          description: the cron schedule for the monitor
          x-go-name: CronSchedule
        description:
          type: string
          description: the description for the monitor
          example: detects drift
          x-go-name: Description
        disabled:
          type: boolean
          description: whether the monitor is currently disabled
          x-go-name: Disabled
        id:
          type: string
          description: "the id of this resource, in UUID format"
          example: bb214807-246e-43a5-a25d-41761d1cff9e
          x-go-name: ID
        is_default:
          type: boolean
          description: whether this monitor is a default for all modules in the team
          x-go-name: IsDefault
        kind:
          type: string
          x-go-package: github.com/hatchet-dev/hatchet/api/v1/types
        name:
          type: string
          description: the name for the monitor
          example: drift
          x-go-name: Name
        updated_at:
          type: string
          description: the time that this resource was last updated
          format: date-time
          example: 2022-12-13T15:06:48.888358-05:00
          x-go-name: UpdatedAt
      example:
        cron_schedule: cron_schedule
        updated_at: 2022-12-13T15:06:48.888358-05:00
        kind: kind
        name: drift
        created_at: 2022-12-13T15:06:48.888358-05:00
        description: detects drift
        disabled: true
        id: bb214807-246e-43a5-a25d-41761d1cff9e
        is_default: true
      x-go-package: github.com/hatchet-dev/hatchet/api/v1/types
    ModuleMonitorResult:
      type: object
      properties:
        created_at:
          type: string
          description: the time that this resource was created
          format: date-time
          example: 2022-12-13T15:06:48.888358-05:00
          x-go-name: CreatedAt
        id:
          type: string
          description: "the id of this resource, in UUID format"
          example: bb214807-246e-43a5-a25d-41761d1cff9e
          x-go-name: ID
        message:
          type: string
          x-go-name: Message
        module_id:
          type: string
          x-go-name: ModuleID
        module_monitor_id:
          type: string
          x-go-name: ModuleMonitorID
        module_name:
          type: string
          x-go-name: ModuleName
        module_run_id:
          type: string
          x-go-name: ModuleRunID
        severity:
          type: string
          x-go-package: github.com/hatchet-dev/hatchet/api/v1/types
        status:
          type: string
          x-go-package: github.com/hatchet-dev/hatchet/api/v1/types
        title:
          type: string
          x-go-name: Title
        updated_at:
          type: string
          description: the time that this resource was last updated
          format: date-time
          example: 2022-12-13T15:06:48.888358-05:00
          x-go-name: UpdatedAt
      example:
        severity: severity
        module_id: module_id
        updated_at: 2022-12-13T15:06:48.888358-05:00
        module_monitor_id: module_monitor_id
        created_at: 2022-12-13T15:06:48.888358-05:00
        id: bb214807-246e-43a5-a25d-41761d1cff9e
        module_name: module_name
        module_run_id: module_run_id
        message: message
        title: title
        status: status
      x-go-package: github.com/hatchet-dev/hatchet/api/v1/types
    ModulePlanSummary:
      type: array
      items:
        $ref: '#/components/schemas/ModulePlannedChangeSummary'
      x-go-package: github.com/hatchet-dev/hatchet/api/v1/types
    ModulePlannedChangeSummary:
      type: object
      properties:
        actions:
          type: array
          items:
            type: string
          x-go-name: Actions
        address:
          type: string
          x-go-name: Address
      example:
        address: address
        actions:
        - actions
        - actions
      x-go-package: github.com/hatchet-dev/hatchet/api/v1/types
    ModuleRun:
      type: object
      properties:
        config:
          $ref: '#/components/schemas/ModuleRunConfig'
        created_at:
          type: string
          description: the time that this resource was created
          format: date-time
          example: 2022-12-13T15:06:48.888358-05:00
          x-go-name: CreatedAt
        github_pull_request:
          $ref: '#/components/schemas/GithubPullRequest'
        id:
          type: string
          description: "the id of this resource, in UUID format"
          example: bb214807-246e-43a5-a25d-41761d1cff9e
          x-go-name: ID
        kind:
          type: string
          x-go-package: github.com/hatchet-dev/hatchet/api/v1/types
        monitor_results:
          type: array
          items:
            $ref: '#/components/schemas/ModuleMonitorResult'
          x-go-name: MonitorResults
        monitors:
          type: array
          items:
            $ref: '#/components/schemas/ModuleMonitor'
          x-go-name: Monitors
        status:
          type: string
          x-go-package: github.com/hatchet-dev/hatchet/api/v1/types
        status_description:
          type: string
          x-go-name: StatusDescription
        updated_at:
          type: string
          description: the time that this resource was last updated
          format: date-time
          example: 2022-12-13T15:06:48.888358-05:00
          x-go-name: UpdatedAt
      example:
        github_pull_request:
          github_pull_request_base_branch: github_pull_request_base_branch
          github_pull_request_state: github_pull_request_state
          github_pull_request_head_branch: github_pull_request_head_branch
          github_pull_request_title: github_pull_request_title
          github_repository_owner: github_repository_owner
          github_pull_request_id: 0
          github_pull_request_number: 6
          github_repository_name: github_repository_name
        status_description: status_description
        updated_at: 2022-12-13T15:06:48.888358-05:00
        kind: kind
        created_at: 2022-12-13T15:06:48.888358-05:00
        id: bb214807-246e-43a5-a25d-41761d1cff9e
        monitor_results:
        - severity: severity
          module_id: module_id
          updated_at: 2022-12-13T15:06:48.888358-05:00
          module_monitor_id: module_monitor_id
          created_at: 2022-12-13T15:06:48.888358-05:00
          id: bb214807-246e-43a5-a25d-41761d1cff9e
          module_name: module_name
          module_run_id: module_run_id
          message: message
          title: title
          status: status
        - severity: severity
          module_id: module_id
          updated_at: 2022-12-13T15:06:48.888358-05:00
          module_monitor_id: module_monitor_id
          created_at: 2022-12-13T15:06:48.888358-05:00
          id: bb214807-246e-43a5-a25d-41761d1cff9e
          module_name: module_name
          module_run_id: module_run_id
          message: message
          title: title
          status: status
        config:
          trigger_kind: trigger_kind
          github_commit_sha: github_commit_sha
          values_version_id: values_version_id
          env_var_version_id: env_var_version_id
        monitors:
        - policy_bytes: policy_bytes
          cron_schedule: cron_schedule
          updated_at: 2022-12-13T15:06:48.888358-05:00
          kind: kind
          name: drift
          created_at: 2022-12-13T15:06:48.888358-05:00
          description: detects drift
          disabled: true
          id: bb214807-246e-43a5-a25d-41761d1cff9e
          is_default: true
          modules:
          - modules
          - modules
        - policy_bytes: policy_bytes
          cron_schedule: cron_schedule
          updated_at: 2022-12-13T15:06:48.888358-05:00
          kind: kind
          name: drift
          created_at: 2022-12-13T15:06:48.888358-05:00
          description: detects drift
          disabled: true
          id: bb214807-246e-43a5-a25d-41761d1cff9e
          is_default: true
          modules:
          - modules
          - modules
        status: status
      x-go-package: github.com/hatchet-dev/hatchet/api/v1/types
    ModuleRunConfig:
      type: object
      properties:
        env_var_version_id:
          type: string
          x-go-name: EnvVarVersionID
        github_commit_sha:
          type: string
          x-go-name: GithubCommitSHA
        trigger_kind:
          type: string
          x-go-package: github.com/hatchet-dev/hatchet/api/v1/types
        values_version_id:
          type: string
          x-go-name: ValuesVersionID
      example:
        trigger_kind: trigger_kind
        github_commit_sha: github_commit_sha
        values_version_id: values_version_id
        env_var_version_id: env_var_version_id
      x-go-package: github.com/hatchet-dev/hatchet/api/v1/types
    ModuleRunKind:
      type: string
      x-go-package: github.com/hatchet-dev/hatchet/api/v1/types
    ModuleRunOverview:
      type: object
      properties:
        created_at:
          type: string
          description: the time that this resource was created
          format: date-time
          example: 2022-12-13T15:06:48.888358-05:00
          x-go-name: CreatedAt
        id:
          type: string
          description: "the id of this resource, in UUID format"
          example: bb214807-246e-43a5-a25d-41761d1cff9e
          x-go-name: ID
        kind:
          type: string
          x-go-package: github.com/hatchet-dev/hatchet/api/v1/types
        status:
          type: string
          x-go-package: github.com/hatchet-dev/hatchet/api/v1/types
        status_description:
          type: string
          x-go-name: StatusDescription
        updated_at:
          type: string
          description: the time that this resource was last updated
          format: date-time
          example: 2022-12-13T15:06:48.888358-05:00
          x-go-name: UpdatedAt
      example:
        status_description: status_description
        updated_at: 2022-12-13T15:06:48.888358-05:00
        kind: kind
        created_at: 2022-12-13T15:06:48.888358-05:00
        id: bb214807-246e-43a5-a25d-41761d1cff9e
        status: status
      x-go-package: github.com/hatchet-dev/hatchet/api/v1/types
    ModuleRunStatus:
      type: string
      x-go-package: github.com/hatchet-dev/hatchet/api/v1/types
    ModuleRunTriggerKind:
      type: string
      x-go-package: github.com/hatchet-dev/hatchet/api/v1/types
    ModuleValues:
      type: object
      properties:
        created_at:
          type: string
          description: the time that this resource was created
          format: date-time
          example: 2022-12-13T15:06:48.888358-05:00
          x-go-name: CreatedAt
        github:
          $ref: '#/components/schemas/ModuleValuesGithubConfig'
        id:
          type: string
          description: "the id of this resource, in UUID format"
          example: bb214807-246e-43a5-a25d-41761d1cff9e
          x-go-name: ID
        raw_values:
          type: object
          additionalProperties:
            type: object
            properties: {}
          description: Raw values (may be omitted)
          x-go-name: Values
        updated_at:
          type: string
          description: the time that this resource was last updated
          format: date-time
          example: 2022-12-13T15:06:48.888358-05:00
          x-go-name: UpdatedAt
        version:
          type: integer
          format: uint64
          x-go-name: Version
      example:
        github:
          path: path
          github_app_installation_id: github_app_installation_id
          github_repo_name: github_repo_name
          github_repo_branch: github_repo_branch
          github_repo_owner: github_repo_owner
        updated_at: 2022-12-13T15:06:48.888358-05:00
        created_at: 2022-12-13T15:06:48.888358-05:00
        raw_values:
          key: "{}"
        id: bb214807-246e-43a5-a25d-41761d1cff9e
        version: 0
      x-go-package: github.com/hatchet-dev/hatchet/api/v1/types
    ModuleValuesGithubConfig:
      type: object
      properties:
        github_app_installation_id:
          type: string
          x-go-name: GithubAppInstallationID
        github_repo_branch:
          type: string
          x-go-name: GithubRepoBranch
        github_repo_name:
          type: string
          x-go-name: GithubRepoName
        github_repo_owner:
          type: string
          x-go-name: GithubRepoOwner
        path:
          type: string
          x-go-name: Path
      example:
        path: path
        github_app_installation_id: github_app_installation_id
        github_repo_name: github_repo_name
        github_repo_branch: github_repo_branch
        github_repo_owner: github_repo_owner
      x-go-package: github.com/hatchet-dev/hatchet/api/v1/types
    MonitorResultSeverity:
      type: string
      x-go-package: github.com/hatchet-dev/hatchet/api/v1/types
    MonitorResultStatus:
      type: string
      x-go-package: github.com/hatchet-dev/hatchet/api/v1/types
    Organization:
      type: object
      properties:
        created_at:
          type: string
          description: the time that this resource was created
          format: date-time
          example: 2022-12-13T15:06:48.888358-05:00
          x-go-name: CreatedAt
        display_name:
          type: string
          description: the display name for the team
          example: Organization 1
          x-go-name: DisplayName
        id:
          type: string
          description: "the id of this resource, in UUID format"
          example: bb214807-246e-43a5-a25d-41761d1cff9e
          x-go-name: ID
        owner:
          $ref: '#/components/schemas/UserOrgPublishedData'
        updated_at:
          type: string
          description: the time that this resource was last updated
          format: date-time
          example: 2022-12-13T15:06:48.888358-05:00
          x-go-name: UpdatedAt
      example:
        owner:
          display_name: User 1
          email: user1@gmail.com
        updated_at: 2022-12-13T15:06:48.888358-05:00
        created_at: 2022-12-13T15:06:48.888358-05:00
        id: bb214807-246e-43a5-a25d-41761d1cff9e
        display_name: Organization 1
      x-go-package: github.com/hatchet-dev/hatchet/api/v1/types
    OrganizationInvite:
      type: object
      properties:
        created_at:
          type: string
          description: the time that this resource was created
          format: date-time
          example: 2022-12-13T15:06:48.888358-05:00
          x-go-name: CreatedAt
        expires:
          type: string
          format: date-time
          x-go-name: Expires
        id:
          type: string
          description: "the id of this resource, in UUID format"
          example: bb214807-246e-43a5-a25d-41761d1cff9e
          x-go-name: ID
        invite_link_url:
          type: string
          x-go-name: InviteLinkURL
        invitee_email:
          type: string
          x-go-name: InviteeEmail
        updated_at:
          type: string
          description: the time that this resource was last updated
          format: date-time
          example: 2022-12-13T15:06:48.888358-05:00
          x-go-name: UpdatedAt
      example:
        invitee_email: invitee_email
        expires: 2000-01-23T04:56:07.000+00:00
        updated_at: 2022-12-13T15:06:48.888358-05:00
        created_at: 2022-12-13T15:06:48.888358-05:00
        id: bb214807-246e-43a5-a25d-41761d1cff9e
        invite_link_url: invite_link_url
      x-go-package: github.com/hatchet-dev/hatchet/api/v1/types
    OrganizationInviteSanitized:
      type: object
      properties:
        created_at:
          type: string
          description: the time that this resource was created
          format: date-time
          example: 2022-12-13T15:06:48.888358-05:00
          x-go-name: CreatedAt
        expires:
          type: string
          format: date-time
          x-go-name: Expires
        id:
          type: string
          description: "the id of this resource, in UUID format"
          example: bb214807-246e-43a5-a25d-41761d1cff9e
          x-go-name: ID
        invitee_email:
          type: string
          x-go-name: InviteeEmail
        updated_at:
          type: string
          description: the time that this resource was last updated
          format: date-time
          example: 2022-12-13T15:06:48.888358-05:00
          x-go-name: UpdatedAt
      example:
        invitee_email: invitee_email
        expires: 2000-01-23T04:56:07.000+00:00
        updated_at: 2022-12-13T15:06:48.888358-05:00
        created_at: 2022-12-13T15:06:48.888358-05:00
        id: bb214807-246e-43a5-a25d-41761d1cff9e
      x-go-package: github.com/hatchet-dev/hatchet/api/v1/types
    OrganizationMember:
      type: object
      properties:
        created_at:
          type: string
          description: the time that this resource was created
          format: date-time
          example: 2022-12-13T15:06:48.888358-05:00
          x-go-name: CreatedAt
        id:
          type: string
          description: "the id of this resource, in UUID format"
          example: bb214807-246e-43a5-a25d-41761d1cff9e
          x-go-name: ID
        invite:
          $ref: '#/components/schemas/OrganizationInvite'
        invite_accepted:
          type: boolean
          x-go-name: InviteAccepted
        organization_policies:
          type: array
          items:
            $ref: '#/components/schemas/OrganizationPolicyMeta'
          x-go-name: OrgPolicies
        updated_at:
          type: string
          description: the time that this resource was last updated
          format: date-time
          example: 2022-12-13T15:06:48.888358-05:00
          x-go-name: UpdatedAt
        user:
          $ref: '#/components/schemas/UserOrgPublishedData'
      example:
        updated_at: 2022-12-13T15:06:48.888358-05:00
        invite_accepted: true
        created_at: 2022-12-13T15:06:48.888358-05:00
        organization_policies:
        - updated_at: 2022-12-13T15:06:48.888358-05:00
          name: name
          created_at: 2022-12-13T15:06:48.888358-05:00
          id: bb214807-246e-43a5-a25d-41761d1cff9e
        - updated_at: 2022-12-13T15:06:48.888358-05:00
          name: name
          created_at: 2022-12-13T15:06:48.888358-05:00
          id: bb214807-246e-43a5-a25d-41761d1cff9e
        id: bb214807-246e-43a5-a25d-41761d1cff9e
        invite:
          invitee_email: invitee_email
          expires: 2000-01-23T04:56:07.000+00:00
          updated_at: 2022-12-13T15:06:48.888358-05:00
          created_at: 2022-12-13T15:06:48.888358-05:00
          id: bb214807-246e-43a5-a25d-41761d1cff9e
          invite_link_url: invite_link_url
        user:
          display_name: User 1
          email: user1@gmail.com
      x-go-package: github.com/hatchet-dev/hatchet/api/v1/types
    OrganizationMemberSanitized:
      type: object
      properties:
        created_at:
          type: string
          description: the time that this resource was created
          format: date-time
          example: 2022-12-13T15:06:48.888358-05:00
          x-go-name: CreatedAt
        id:
          type: string
          description: "the id of this resource, in UUID format"
          example: bb214807-246e-43a5-a25d-41761d1cff9e
          x-go-name: ID
        invite:
          $ref: '#/components/schemas/OrganizationInviteSanitized'
        invite_accepted:
          type: boolean
          x-go-name: InviteAccepted
        organization_policies:
          type: array
          items:
            $ref: '#/components/schemas/OrganizationPolicyMeta'
          x-go-name: OrgPolicies
        updated_at:
          type: string
          description: the time that this resource was last updated
          format: date-time
          example: 2022-12-13T15:06:48.888358-05:00
          x-go-name: UpdatedAt
        user:
          $ref: '#/components/schemas/UserOrgPublishedData'
      description: |-
        OrganizationMemberSanitized represents an organization member without a sensitive invite
        link exposed.
      example:
        updated_at: 2022-12-13T15:06:48.888358-05:00
        invite_accepted: true
        created_at: 2022-12-13T15:06:48.888358-05:00
        organization_policies:
        - updated_at: 2022-12-13T15:06:48.888358-05:00
          name: name
          created_at: 2022-12-13T15:06:48.888358-05:00
          id: bb214807-246e-43a5-a25d-41761d1cff9e
        - updated_at: 2022-12-13T15:06:48.888358-05:00
          name: name
          created_at: 2022-12-13T15:06:48.888358-05:00
          id: bb214807-246e-43a5-a25d-41761d1cff9e
        id: bb214807-246e-43a5-a25d-41761d1cff9e
        invite:
          invitee_email: invitee_email
          expires: 2000-01-23T04:56:07.000+00:00
          updated_at: 2022-12-13T15:06:48.888358-05:00
          created_at: 2022-12-13T15:06:48.888358-05:00
          id: bb214807-246e-43a5-a25d-41761d1cff9e
        user:
          display_name: User 1
          email: user1@gmail.com
      x-go-package: github.com/hatchet-dev/hatchet/api/v1/types
    OrganizationPolicyMeta:
      type: object
      properties:
        created_at:
          type: string
          description: the time that this resource was created
          format: date-time
          example: 2022-12-13T15:06:48.888358-05:00
          x-go-name: CreatedAt
        id:
          type: string
          description: "the id of this resource, in UUID format"
          example: bb214807-246e-43a5-a25d-41761d1cff9e
          x-go-name: ID
        name:
          type: string
          x-go-name: Name
        updated_at:
          type: string
          description: the time that this resource was last updated
          format: date-time
          example: 2022-12-13T15:06:48.888358-05:00
          x-go-name: UpdatedAt
      example:
        updated_at: 2022-12-13T15:06:48.888358-05:00
        name: name
        created_at: 2022-12-13T15:06:48.888358-05:00
        id: bb214807-246e-43a5-a25d-41761d1cff9e
      x-go-package: github.com/hatchet-dev/hatchet/api/v1/types
    OrganizationPolicyReference:
      type: object
      properties:
        id:
          type: string
          x-go-name: ID
        name:
          type: string
          x-go-name: Name
      example:
        name: name
        id: id
      x-go-package: github.com/hatchet-dev/hatchet/api/v1/types
    PaginationResponse:
      type: object
      properties:
        current_page:
          type: integer
          description: the current page
          format: int64
          example: 2
          x-go-name: CurrentPage
        next_page:
          type: integer
          description: the next page
          format: int64
          example: 3
          x-go-name: NextPage
        num_pages:
          type: integer
          description: the total number of pages for listing
          format: int64
          example: 10
          x-go-name: NumPages
      example:
        next_page: 3
        num_pages: 10
        current_page: 2
      x-go-package: github.com/hatchet-dev/hatchet/api/v1/types
    PersonalAccessToken:
      type: object
      properties:
        created_at:
          type: string
          description: the time that this resource was created
          format: date-time
          example: 2022-12-13T15:06:48.888358-05:00
          x-go-name: CreatedAt
        display_name:
          type: string
          description: the display name for the personal access token
          example: cli-token-1234
          x-go-name: DisplayName
        expires:
          type: string
          description: when the token expires
          format: date-time
          example: 2023-01-12T17:09:28.35059-05:00
          x-go-name: Expires
        id:
          type: string
          description: "the id of this resource, in UUID format"
          example: bb214807-246e-43a5-a25d-41761d1cff9e
          x-go-name: ID
        revoked:
          type: boolean
          description: whether the token has been revoked
          example: false
          x-go-name: Revoked
        updated_at:
          type: string
          description: the time that this resource was last updated
          format: date-time
          example: 2022-12-13T15:06:48.888358-05:00
          x-go-name: UpdatedAt
      example:
        expires: 2023-01-12T17:09:28.35059-05:00
        updated_at: 2022-12-13T15:06:48.888358-05:00
        created_at: 2022-12-13T15:06:48.888358-05:00
        id: bb214807-246e-43a5-a25d-41761d1cff9e
        display_name: cli-token-1234
        revoked: false
      x-go-package: github.com/hatchet-dev/hatchet/api/v1/types
    ResetPasswordEmailFinalizeRequest:
      required:
      - email
      - new_password
      - token
      - token_id
      type: object
      properties:
        email:
          type: string
          description: the email address for this user
          example: user1@gmail.com
          x-go-name: Email
        new_password:
          type: string
          description: the new password for this user
          example: Newpassword123
          x-go-name: NewPassword
        token:
          type: string
          description: the token
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9....
          x-go-name: Token
        token_id:
          type: string
          description: the token id
          example: bb214807-246e-43a5-a25d-41761d1cff9e
          x-go-name: TokenID
      example:
        token_id: bb214807-246e-43a5-a25d-41761d1cff9e
        new_password: Newpassword123
        email: user1@gmail.com
        token: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9....
      x-go-package: github.com/hatchet-dev/hatchet/api/v1/types
    ResetPasswordEmailRequest:
      required:
      - email
      type: object
      properties:
        email:
          type: string
          description: the email address for this user
          example: user1@gmail.com
          x-go-name: Email
      example:
        email: user1@gmail.com
      x-go-package: github.com/hatchet-dev/hatchet/api/v1/types
    ResetPasswordEmailVerifyTokenRequest:
      required:
      - email
      - token
      - token_id
      type: object
      properties:
        email:
          type: string
          description: the email address for this user
          example: user1@gmail.com
          x-go-name: Email
        token:
          type: string
          description: the token
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9....
          x-go-name: Token
        token_id:
          type: string
          description: the token id
          example: bb214807-246e-43a5-a25d-41761d1cff9e
          x-go-name: TokenID
      x-go-package: github.com/hatchet-dev/hatchet/api/v1/types
    ResetPasswordManualRequest:
      required:
      - new_password
      - old_password
      type: object
      properties:
        new_password:
          type: string
          description: the new password for this user
          example: Newpassword123
          x-go-name: NewPassword
        old_password:
          type: string
          description: the old password for this user
          example: Securepassword123
          x-go-name: OldPassword
      example:
        old_password: Securepassword123
        new_password: Newpassword123
      x-go-package: github.com/hatchet-dev/hatchet/api/v1/types
    RevokePATResponse:
      $ref: '#/components/schemas/PersonalAccessToken'
    RevokePATResponseExample:
      type: object
      properties:
        created_at:
          type: string
          description: the time that this resource was created
          format: date-time
          example: 2022-12-13T15:06:48.888358-05:00
          x-go-name: CreatedAt
        display_name:
          type: string
          description: the display name for the personal access token
          example: cli-token-1234
          x-go-name: DisplayName
        expires:
          type: string
          description: when the token expires
          format: date-time
          example: 2023-01-12T17:09:28.35059-05:00
          x-go-name: Expires
        id:
          type: string
          description: "the id of this resource, in UUID format"
          example: bb214807-246e-43a5-a25d-41761d1cff9e
          x-go-name: ID
        revoked:
          type: boolean
          description: whether the token is revoked
          example: true
          x-go-name: Revoked
        updated_at:
          type: string
          description: the time that this resource was last updated
          format: date-time
          example: 2022-12-13T15:06:48.888358-05:00
          x-go-name: UpdatedAt
      example:
        expires: 2023-01-12T17:09:28.35059-05:00
        updated_at: 2022-12-13T15:06:48.888358-05:00
        created_at: 2022-12-13T15:06:48.888358-05:00
        id: bb214807-246e-43a5-a25d-41761d1cff9e
        display_name: cli-token-1234
        revoked: true
      x-go-package: github.com/hatchet-dev/hatchet/api/v1/types
    Team:
      type: object
      properties:
        created_at:
          type: string
          description: the time that this resource was created
          format: date-time
          example: 2022-12-13T15:06:48.888358-05:00
          x-go-name: CreatedAt
        display_name:
          type: string
          description: the display name for the team
          example: Team 1
          x-go-name: DisplayName
        id:
          type: string
          description: "the id of this resource, in UUID format"
          example: bb214807-246e-43a5-a25d-41761d1cff9e
          x-go-name: ID
        updated_at:
          type: string
          description: the time that this resource was last updated
          format: date-time
          example: 2022-12-13T15:06:48.888358-05:00
          x-go-name: UpdatedAt
      example:
        updated_at: 2022-12-13T15:06:48.888358-05:00
        created_at: 2022-12-13T15:06:48.888358-05:00
        id: bb214807-246e-43a5-a25d-41761d1cff9e
        display_name: Team 1
      x-go-package: github.com/hatchet-dev/hatchet/api/v1/types
    TeamAddMemberRequest:
      required:
      - policies
      type: object
      properties:
        org_member_id:
          type: string
          description: the organization member id of the new team member
          x-go-name: OrgMemberID
        policies:
          type: array
          description: the set of policies for this user
          items:
            $ref: '#/components/schemas/TeamPolicyReference'
          x-go-name: Policies
      x-go-package: github.com/hatchet-dev/hatchet/api/v1/types
    TeamAddMemberResponse:
      $ref: '#/components/schemas/TeamMember'
    TeamMember:
      type: object
      properties:
        created_at:
          type: string
          description: the time that this resource was created
          format: date-time
          example: 2022-12-13T15:06:48.888358-05:00
          x-go-name: CreatedAt
        id:
          type: string
          description: "the id of this resource, in UUID format"
          example: bb214807-246e-43a5-a25d-41761d1cff9e
          x-go-name: ID
        org_member:
          $ref: '#/components/schemas/OrganizationMemberSanitized'
        team_policies:
          type: array
          items:
            $ref: '#/components/schemas/TeamPolicyMeta'
          x-go-name: TeamPolicies
        updated_at:
          type: string
          description: the time that this resource was last updated
          format: date-time
          example: 2022-12-13T15:06:48.888358-05:00
          x-go-name: UpdatedAt
      example:
        team_policies:
        - updated_at: 2022-12-13T15:06:48.888358-05:00
          name: name
          created_at: 2022-12-13T15:06:48.888358-05:00
          id: bb214807-246e-43a5-a25d-41761d1cff9e
        - updated_at: 2022-12-13T15:06:48.888358-05:00
          name: name
          created_at: 2022-12-13T15:06:48.888358-05:00
          id: bb214807-246e-43a5-a25d-41761d1cff9e
        updated_at: 2022-12-13T15:06:48.888358-05:00
        org_member:
          updated_at: 2022-12-13T15:06:48.888358-05:00
          invite_accepted: true
          created_at: 2022-12-13T15:06:48.888358-05:00
          organization_policies:
          - updated_at: 2022-12-13T15:06:48.888358-05:00
            name: name
            created_at: 2022-12-13T15:06:48.888358-05:00
            id: bb214807-246e-43a5-a25d-41761d1cff9e
          - updated_at: 2022-12-13T15:06:48.888358-05:00
            name: name
            created_at: 2022-12-13T15:06:48.888358-05:00
            id: bb214807-246e-43a5-a25d-41761d1cff9e
          id: bb214807-246e-43a5-a25d-41761d1cff9e
          invite:
            invitee_email: invitee_email
            expires: 2000-01-23T04:56:07.000+00:00
            updated_at: 2022-12-13T15:06:48.888358-05:00
            created_at: 2022-12-13T15:06:48.888358-05:00
            id: bb214807-246e-43a5-a25d-41761d1cff9e
          user:
            display_name: User 1
            email: user1@gmail.com
        created_at: 2022-12-13T15:06:48.888358-05:00
        id: bb214807-246e-43a5-a25d-41761d1cff9e
      x-go-package: github.com/hatchet-dev/hatchet/api/v1/types
    TeamPolicyMeta:
      type: object
      properties:
        created_at:
          type: string
          description: the time that this resource was created
          format: date-time
          example: 2022-12-13T15:06:48.888358-05:00
          x-go-name: CreatedAt
        id:
          type: string
          description: "the id of this resource, in UUID format"
          example: bb214807-246e-43a5-a25d-41761d1cff9e
          x-go-name: ID
        name:
          type: string
          x-go-name: Name
        updated_at:
          type: string
          description: the time that this resource was last updated
          format: date-time
          example: 2022-12-13T15:06:48.888358-05:00
          x-go-name: UpdatedAt
      example:
        updated_at: 2022-12-13T15:06:48.888358-05:00
        name: name
        created_at: 2022-12-13T15:06:48.888358-05:00
        id: bb214807-246e-43a5-a25d-41761d1cff9e
      x-go-package: github.com/hatchet-dev/hatchet/api/v1/types
    TeamPolicyReference:
      type: object
      properties:
        id:
          type: string
          x-go-name: ID
        name:
          type: string
          x-go-name: Name
      x-go-package: github.com/hatchet-dev/hatchet/api/v1/types
    TeamUpdateRequest:
      required:
      - display_name
      type: object
      properties:
        display_name:
          type: string
          description: the display name for the team
          example: Team 1
          x-go-name: DisplayName
      x-go-package: github.com/hatchet-dev/hatchet/api/v1/types
    TeamUpdateResponse:
      $ref: '#/components/schemas/Team'
    TerraformLock:
      type: object
      properties:
        Created:
          type: string
        ID:
          type: string
        Info:
          type: string
        Operation:
          type: string
        Path:
          type: string
        Version:
          type: string
        Who:
          type: string
      x-go-package: github.com/hatchet-dev/hatchet/api/v1/types
    UpdateModuleRequest:
      type: object
      properties:
        env_vars:
          type: object
          additionalProperties:
            type: string
          x-go-name: EnvVars
        github:
          $ref: '#/components/schemas/CreateModuleRequestGithub'
        name:
          type: string
          x-go-name: Name
        values_github:
          $ref: '#/components/schemas/CreateModuleValuesRequestGithub'
        values_raw:
          type: object
          additionalProperties:
            type: object
            properties: {}
          x-go-name: ValuesRaw
      x-go-package: github.com/hatchet-dev/hatchet/api/v1/types
    UpdateModuleResponse:
      $ref: '#/components/schemas/Module'
    UpdateMonitorRequest:
      type: object
      properties:
        cron_schedule:
          type: string
          x-go-name: CronSchedule
        description:
          type: string
          x-go-name: Description
        disabled:
          type: boolean
          description: |-
            Whether the monitor is disabled. In order to turn the monitor off for all modules, set
            disabled=true. Passing in an empty module list will trigger this monitor for all modules.
          x-go-name: Disabled
        kind:
          type: string
          x-go-package: github.com/hatchet-dev/hatchet/api/v1/types
        modules:
          type: array
          description: "A list of module ids. If empty or omitted, this monitor targets\
            \ all modules."
          items:
            type: string
          x-go-name: Modules
        name:
          type: string
          x-go-name: Name
        policy_bytes:
          type: string
          x-go-name: PolicyBytes
      x-go-package: github.com/hatchet-dev/hatchet/api/v1/types
    UpdateMonitorResponse:
      $ref: '#/components/schemas/ModuleMonitor'
    UpdateOrgMemberPoliciesRequest:
      required:
      - policies
      type: object
      properties:
        policies:
          type: array
          description: the set of policies for this user
          items:
            $ref: '#/components/schemas/OrganizationPolicyReference'
          x-go-name: Policies
      x-go-package: github.com/hatchet-dev/hatchet/api/v1/types
    UpdateOrgMemberPoliciesResponse:
      $ref: '#/components/schemas/OrganizationMember'
    UpdateOrgOwnerRequest:
      type: object
      properties:
        new_owner_member_id:
          type: string
          description: the member id of the new owner
          example: bb214807-246e-43a5-a25d-41761d1cff9e
          x-go-name: NewOwnerMemberID
      x-go-package: github.com/hatchet-dev/hatchet/api/v1/types
    UpdateOrgRequest:
      required:
      - display_name
      type: object
      properties:
        display_name:
          type: string
          description: the display name for this user
          example: User 1
          x-go-name: DisplayName
      x-go-package: github.com/hatchet-dev/hatchet/api/v1/types
    UpdateOrgResponse:
      $ref: '#/components/schemas/Organization'
    UpdateUserRequest:
      required:
      - display_name
      type: object
      properties:
        display_name:
          type: string
          description: the display name for this user
          example: User 1
          x-go-name: DisplayName
      x-go-package: github.com/hatchet-dev/hatchet/api/v1/types
    UpdateUserResponse:
      $ref: '#/components/schemas/User'
    User:
      type: object
      properties:
        created_at:
          type: string
          description: the time that this resource was created
          format: date-time
          example: 2022-12-13T15:06:48.888358-05:00
          x-go-name: CreatedAt
        display_name:
          type: string
          description: the display name for this user
          example: User 1
          x-go-name: DisplayName
        email:
          type: string
          description: the email address for this user
          example: user1@gmail.com
          x-go-name: Email
        email_verified:
          type: boolean
          description: whether this user's email address has been verified
          example: false
          x-go-name: EmailVerified
        icon:
          type: string
          description: a URI for the user icon
          example: https://avatars.githubusercontent.com/u/25448214?v=4
          x-go-name: Icon
        id:
          type: string
          description: "the id of this resource, in UUID format"
          example: bb214807-246e-43a5-a25d-41761d1cff9e
          x-go-name: ID
        updated_at:
          type: string
          description: the time that this resource was last updated
          format: date-time
          example: 2022-12-13T15:06:48.888358-05:00
          x-go-name: UpdatedAt
      example:
        email_verified: false
        updated_at: 2022-12-13T15:06:48.888358-05:00
        icon: https://avatars.githubusercontent.com/u/25448214?v=4
        created_at: 2022-12-13T15:06:48.888358-05:00
        id: bb214807-246e-43a5-a25d-41761d1cff9e
        display_name: User 1
        email: user1@gmail.com
      x-go-package: github.com/hatchet-dev/hatchet/api/v1/types
    UserOrgPublishedData:
      type: object
      properties:
        display_name:
          type: string
          description: the display name for this user
          example: User 1
          x-go-name: DisplayName
        email:
          type: string
          description: the email address for this user
          example: user1@gmail.com
          x-go-name: Email
      description: |-
        Public data about the user that other members of the org and team
        can access
      example:
        display_name: User 1
        email: user1@gmail.com
      x-go-package: github.com/hatchet-dev/hatchet/api/v1/types
    VerifyEmailRequest:
      required:
      - token
      - token_id
      type: object
      properties:
        token:
          type: string
          description: the token
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9....
          x-go-name: Token
        token_id:
          type: string
          description: the token id
          example: bb214807-246e-43a5-a25d-41761d1cff9e
          x-go-name: TokenID
      example:
        token_id: bb214807-246e-43a5-a25d-41761d1cff9e
        token: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9....
      x-go-package: github.com/hatchet-dev/hatchet/api/v1/types
    createOrganization_request:
      required:
      - display_name
      type: object
      properties:
        display_name:
          type: string
          description: the display name for the organization
          example: Organization 1
          x-go-name: DisplayName
      x-go-package: github.com/hatchet-dev/hatchet/api/v1/types
    updateOrganization_request:
      required:
      - display_name
      type: object
      properties:
        display_name:
          type: string
          description: the display name for this user
          example: User 1
          x-go-name: DisplayName
      x-go-package: github.com/hatchet-dev/hatchet/api/v1/types
    createOrgMemberInvite_request:
      required:
      - invitee_email
      - invitee_policies
      type: object
      properties:
        invitee_email:
          type: string
          description: the email address to use for the invite
          example: user1@gmail.com
          x-go-name: InviteeEmail
        invitee_policies:
          type: array
          description: the set of policies for this user
          items:
            $ref: '#/components/schemas/OrganizationPolicyReference'
          x-go-name: InviteePolicies
      x-go-package: github.com/hatchet-dev/hatchet/api/v1/types
    createTeam_request:
      required:
      - display_name
      type: object
      properties:
        display_name:
          type: string
          description: the display name for the team
          example: Team 1
          x-go-name: DisplayName
      x-go-package: github.com/hatchet-dev/hatchet/api/v1/types
    addTeamMember_request:
      required:
      - policies
      type: object
      properties:
        org_member_id:
          type: string
          description: the organization member id of the new team member
          x-go-name: OrgMemberID
        policies:
          type: array
          description: the set of policies for this user
          items:
            $ref: '#/components/schemas/TeamPolicyReference'
          x-go-name: Policies
      x-go-package: github.com/hatchet-dev/hatchet/api/v1/types
    createModule_request:
      type: object
      properties:
        env_vars:
          type: object
          additionalProperties:
            type: string
          x-go-name: EnvVars
        github:
          $ref: '#/components/schemas/CreateModuleRequestGithub'
        name:
          type: string
          x-go-name: Name
        values_github:
          $ref: '#/components/schemas/CreateModuleValuesRequestGithub'
        values_raw:
          type: object
          additionalProperties:
            type: object
            properties: {}
          x-go-name: ValuesRaw
      x-go-package: github.com/hatchet-dev/hatchet/api/v1/types
    finalizeModuleRun_request:
      required:
      - description
      - status
      type: object
      properties:
        description:
          type: string
          description: the description for the module run status
          x-go-name: Description
        status:
          type: string
          x-go-package: github.com/hatchet-dev/hatchet/api/v1/types
      x-go-package: github.com/hatchet-dev/hatchet/api/v1/types
    createMonitorResult_request:
      type: object
      properties:
        failure_messages:
          type: array
          items:
            type: string
          x-go-name: FailureMessages
        monitor_id:
          type: string
          x-go-name: MonitorID
        severity:
          type: string
          x-go-name: Severity
        status:
          type: string
          x-go-name: Status
        success_message:
          type: string
          x-go-name: SuccessMessage
        title:
          type: string
          x-go-name: Title
      x-go-package: github.com/hatchet-dev/hatchet/api/v1/types
    createTerraformPlan_request:
      required:
      - plan_json
      - plan_pretty
      type: object
      properties:
        plan_json:
          type: string
          description: the JSON contents of the plan
          x-go-name: PlanJSON
        plan_pretty:
          type: string
          description: the prettified contents of the plan
          x-go-name: PlanPretty
      x-go-package: github.com/hatchet-dev/hatchet/api/v1/types
    createMonitor_request:
      type: object
      properties:
        cron_schedule:
          type: string
          x-go-name: CronSchedule
        description:
          type: string
          x-go-name: Description
        disabled:
          type: boolean
          description: |-
            Whether the monitor is disabled. In order to turn the monitor off for all modules, set
            disabled=true. Passing in an empty module list will trigger this monitor for all modules.
          x-go-name: Disabled
        kind:
          type: string
          x-go-package: github.com/hatchet-dev/hatchet/api/v1/types
        modules:
          type: array
          description: "A list of module ids. If empty or omitted, this monitor targets\
            \ all modules."
          items:
            type: string
          x-go-name: Modules
        name:
          type: string
          x-go-name: Name
        policy_bytes:
          type: string
          x-go-name: PolicyBytes
      x-go-package: github.com/hatchet-dev/hatchet/api/v1/types
    createUser_request:
      required:
      - display_name
      - email
      - password
      type: object
      properties:
        display_name:
          type: string
          description: the display name for this user
          example: User 1
          x-go-name: DisplayName
        email:
          type: string
          description: the email address for this user
          example: user1@gmail.com
          x-go-name: Email
        password:
          type: string
          description: the password for this user
          example: Securepassword123
          x-go-name: Password
      x-go-package: github.com/hatchet-dev/hatchet/api/v1/types
    resetPasswordManual_request:
      required:
      - new_password
      - old_password
      type: object
      properties:
        new_password:
          type: string
          description: the new password for this user
          example: Newpassword123
          x-go-name: NewPassword
        old_password:
          type: string
          description: the old password for this user
          example: Securepassword123
          x-go-name: OldPassword
      x-go-package: github.com/hatchet-dev/hatchet/api/v1/types
    createPersonalAccessToken_request:
      required:
      - display_name
      type: object
      properties:
        display_name:
          type: string
          description: the display name for the personal access token
          example: cli-token-1234
          x-go-name: DisplayName
      x-go-package: github.com/hatchet-dev/hatchet/api/v1/types
    verifyEmail_request:
      required:
      - token
      - token_id
      type: object
      properties:
        token:
          type: string
          description: the token
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9....
          x-go-name: Token
        token_id:
          type: string
          description: the token id
          example: bb214807-246e-43a5-a25d-41761d1cff9e
          x-go-name: TokenID
      x-go-package: github.com/hatchet-dev/hatchet/api/v1/types
    loginUser_request:
      required:
      - email
      - password
      type: object
      properties:
        email:
          type: string
          description: the email address for this user
          example: user1@gmail.com
          x-go-name: Email
        password:
          type: string
          description: the password for this user
          example: Securepassword123
          x-go-name: Password
      x-go-package: github.com/hatchet-dev/hatchet/api/v1/types
    resetPasswordEmail_request:
      required:
      - email
      type: object
      properties:
        email:
          type: string
          description: the email address for this user
          example: user1@gmail.com
          x-go-name: Email
      x-go-package: github.com/hatchet-dev/hatchet/api/v1/types
    resetPasswordEmailFinalize_request:
      required:
      - email
      - new_password
      - token
      - token_id
      type: object
      properties:
        email:
          type: string
          description: the email address for this user
          example: user1@gmail.com
          x-go-name: Email
        new_password:
          type: string
          description: the new password for this user
          example: Newpassword123
          x-go-name: NewPassword
        token:
          type: string
          description: the token
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9....
          x-go-name: Token
        token_id:
          type: string
          description: the token id
          example: bb214807-246e-43a5-a25d-41761d1cff9e
          x-go-name: TokenID
      x-go-package: github.com/hatchet-dev/hatchet/api/v1/types
    resetPasswordEmailVerify_request:
      required:
      - email
      - token
      - token_id
      type: object
      properties:
        email:
          type: string
          description: the email address for this user
          example: user1@gmail.com
          x-go-name: Email
        token:
          type: string
          description: the token
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9....
          x-go-name: Token
        token_id:
          type: string
          description: the token id
          example: bb214807-246e-43a5-a25d-41761d1cff9e
          x-go-name: TokenID
      x-go-package: github.com/hatchet-dev/hatchet/api/v1/types
  securitySchemes:
    Bearer:
      type: http
      scheme: bearer
      bearerFormat: JWT
  links: {}
  callbacks: {}
x-original-swagger-version: "2.0"
